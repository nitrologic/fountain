

# ꔀ ꔁ ꔂ ꔃ ꔄ ꔅ ꔆ ꔇ ꔈ ꔉ ꔊ ꔋ ꔌ ꔍ ꔎ ꔏ ꔐ ꔑ ꔒ ꔓ ꔔ ꔕ ꔖ ꔗ ꔘ ꔙ ꔚ ꔛ 
# ꔜ ꔝ ꔞ. ꔟ ꔠ ꔡ ꔢ ꔣ ꔤ ꔥ ꔦ ꔧ ꔨ ꔩ ꔪ ꔫ ꔬ ꔭ ꔮ ꔯ ꔰ ꔱ ꔲ ꔳ ꔴ ꔵ ꔶ ꔷ 

ꔸꔹꔺꔻꔼꔽꔾꔿꕀꕁꕂꕃꕄꕅꕆꕇꕈꕉꕊꕋꕌꕍꕎꕏꕐꕑꕒꕓꕔꕕꕖꕗꕘꕙꕚꕛꕜꕝꕞꕟꕠꕡꕢꕣꕤꕥꕦꕧꕨꕩꕪꕫꕬꕭꕮꕯꕰꕱꕲꕳꕴꕵꕶꕷꕸꕹꕺꕻꕼꕽꕾꕿꖀꖁꖂꖃꖄꖅꖆꖇꖈꖉꖊꖋꖌꖍꖎꖏꖐꖑꖒꖓꖔꖕꖖꖗꖘꖙꖚꖛꖜꖝꖞꖟꖠꖡꖢꖣꖤꖥꖦꖧꖨꖩꖪꖫꖬꖭꖮꖯꖰꖱꖲꖳꖴꖵꖶꖷꖸꖹꖺꖻꖼꖽꖾꖿꗀꗁꗂꗃꗄꗅꗆꗇꗈꗉꗊꗋꗌꗍꗎꗏꗐꗑꗒꗓꗔꗕꗖꗗꗘꗙꗚꗛꗜꗝꗞꗟꗠꗡꗢꗣꗤꗥꗦꗧꗨꗩꗪꗫꗬꗭꗮꗯꗰꗱꗲꗳꗴꗵꗶꗷꗸꗹꗺꗻꗼꗽꗾꗿꘀꘁꘂꘃꘄꘅꘆꘇꘈꘉꘊꘋꘌ꘍꘎꘏ꘐꘑꘒꘓꘔꘕꘖꘗꘘꘙꘚꘛꘜꘝꘞꘟ",

ꔞ. 

𝖠𝖡𝖢𝖣𝖤𝖥𝖦𝖧𝖨𝖩𝖪𝖫𝖬𝖭𝖮𝖯𝖰𝖱𝖲𝖳𝖴𝖵𝖶𝖷𝖸𝖹
𝖺𝖻𝖼𝖽𝖾𝖿𝗀𝗁𝗂𝗃𝗄𝗅𝗆𝗇𝗈𝗉𝗊𝗋𝗌𝗍𝗎𝗏𝗐𝗑𝗒𝗓
𝟢𝟣𝟤𝟥𝟦𝟧𝟨𝟩𝟪𝟫
𝗔𝗕𝗖𝗗𝗘𝗙𝗚𝗛𝗜𝗝𝗞𝗟𝗠𝗡𝗢𝗣𝗤𝗥𝗦𝗧𝗨𝗩𝗪𝗫𝗬𝗭
𝗮𝗯𝗰𝗱𝗲𝗳𝗴𝗵𝗶𝗷𝗸𝗹𝗺𝗻𝗼𝗽𝗾𝗿𝘀𝘁𝘂𝘃𝘄𝘅𝘆𝘇
𝟬𝟭𝟮𝟯𝟰𝟱𝟲𝟳𝟴𝟵

ꕢꕣꕤꕥꕦꕧꕨꕩ

ꔀꔁꔂꔃꔄꔅꔆꔇꔈꔉꔊꔋꔌꔍꔎꔏꔐꔑꔒꔓꔔꔕꔖꔗꔘꔙꔚꔛꔜꔝꔞꔟꔠꔡꔢꔣꔤꔥꔦꔧꔨꔩꔪꔫꔬꔭꔮꔯꔰꔱꔲꔳꔴꔵꔶꔷꔸꔹꔺꔻꔼꔽꔾꔿꕀꕁꕂꕃꕄꕅꕆꕇꕈꕉꕊꕋꕌꕍꕎꕏꕐꕑꕒꕓꕔꕕꕖꕗꕘꕙꕚꕛꕜꕝꕞꕟꕠꕡꕢꕣꕤꕥꕦꕧꕨꕩꕪꕫꕬꕭꕮꕯꕰꕱꕲꕳꕴꕵꕶꕷꕸꕹꕺꕻꕼꕽꕾꕿꖀꖁꖂꖃꖄꖅꖆꖇꖈꖉꖊꖋꖌꖍꖎꖏꖐꖑꖒꖓꖔꖕꖖꖗꖘꖙꖚꖛꖜꖝꖞꖟꖠꖡꖢꖣꖤꖥꖦꖧꖨꖩꖪꖫꖬꖭꖮꖯꖰꖱꖲꖳꖴꖵꖶꖷꖸꖹꖺꖻꖼꖽꖾꖿꗀꗁꗂꗃꗄꗅꗆꗇꗈꗉꗊꗋꗌꗍꗎꗏꗐꗑꗒꗓꗔꗕꗖꗗꗘꗙꗚꗛꗜꗝꗞꗟꗠꗡꗢꗣꗤꗥꗦꗧꗨꗩꗪꗫꗬꗭꗮꗯꗰꗱꗲꗳꗴꗵꗶꗷꗸꗹꗺꗻꗼꗽꗾꗿꘀꘁꘂꘃꘄꘅꘆꘇꘈꘉꘊꘋꘌ꘍꘎꘏ꘐꘑꘒꘓꘔꘕꘖꘗꘘꘙꘚꘛꘜꘝꘞꘟ",

０１２３４５６７８９


"mathalpha": {
	"name": "Mathematical Alphanumeric Symbols",
	"block": "Mathematical Alphanumeric Symbols",
	"category": ["Lu", "Ll", "Nd"],
	"variants": {
		"bold": {
			"upper": "𝐀𝐁𝐂𝐃𝐄𝐅𝐆𝐇𝐈𝐉𝐊𝐋𝐌𝐍𝐎𝐏𝐐𝐑𝐒𝐓𝐔𝐕𝐖𝐗𝐘𝐙",
			"lower": "𝐚𝐛𝐜𝐝𝐞𝐟𝐠𝐡𝐢𝐣𝐤𝐥𝐦𝐧𝐨𝐩𝐪𝐫𝐬𝐭𝐮𝐯𝐰𝐱𝐲𝐳",
			"digits": "𝟎𝟏𝟐𝟑𝟒𝟓𝟔𝟕𝟖𝟗",
			"range": ["U+1D400", "U+1D433", "U+1D7CE", "U+1D7D7"]
		},
		"italic": {
			"upper": "𝐴𝐵𝐶𝐷𝐸𝐹𝐺𝐻𝐼𝐽𝐾𝐿𝑀𝑁𝑂𝑃𝑄𝑅𝑆𝑇𝑈𝑉𝑊𝑋𝑌𝑍",
			"lower": "𝑎𝑏𝑐𝑑𝑒𝑓𝑔ℎ𝑖𝑗𝑘𝑙𝑚𝑛𝑜𝑝𝑞𝑟𝑠𝑡𝑢𝑣𝑤𝑥𝑦𝑧",
			"range": ["U+1D434", "U+1D467"]
		},
		"bold-italic": {
			"upper": "𝑨𝑩𝑪𝑫𝑬𝑭𝑮𝑯𝑰𝑱𝑲𝑳𝑴𝑵𝑶𝑷𝑸𝑹𝑺𝑻𝑼𝑽𝑾𝑿𝒀𝒁",
			"lower": "𝒂𝒃𝒄𝒅𝒆𝒇𝒈𝒉𝒊𝒋𝒌𝒍𝒎𝒏𝒐𝒑𝒒𝒓𝒔𝒕𝒖𝒗𝒘𝒙𝒚𝒛",
			"range": ["U+1D468", "U+1D49B"]
		},
		"script": {
			"upper": "𝒜𝒞𝒟𝒢𝒥𝒦𝒩𝒪𝒫𝒬𝒮𝒯𝒰𝒱𝒲𝒳𝒴𝒵",
			"lower": "𝓪𝓫𝓬𝓭𝓮𝓯𝓰𝓱𝓲𝓳𝓴𝓵𝓶𝓷𝓸𝓹𝓺𝓻𝓼𝓽𝓾𝓿𝔀𝔁𝔂𝔃",
			"range": ["U+1D49C", "U+1D4CF", "U+1D4EA", "U+1D503"]
		},
		"fraktur": {
			"upper": "𝔄𝔅𝔇𝔈𝔉𝔊𝔍𝔎𝔏𝔐𝔑𝔒𝔓𝔔𝔖𝔗𝔘𝔙𝔚𝔛𝔜",
			"lower": "𝔞𝔟𝔠𝔡𝔢𝔣𝔤𝔥𝔦𝔧𝔨𝔩𝔪𝔫𝔬𝔭𝔮𝔯𝔰𝔱𝔲𝔳𝔴𝔵𝔶𝔷",
			"range": ["U+1D504", "U+1D537", "U+1D552", "U+1D56B"]
		},
		"double-struck": {
			"upper": "𝔸𝔹ℂ𝔻𝔼𝔽𝔾ℍ𝕀𝕁𝕂𝕃𝕄ℕ𝕆ℙℚℝ𝕊𝕋𝕌𝕍𝕎𝕏𝕐ℤ",
			"digits": "𝟘𝟙𝟚𝟛𝟜𝟝𝟞𝟟𝟠𝟡",
			"range": ["U+1D538", "U+1D56B", "U+1D7D8", "U+1D7E1"]
		},
		"sans-serif": {
			"upper": "𝖠𝖡𝖢𝖣𝖤𝖥𝖦𝖧𝖨𝖩𝖪𝖫𝖬𝖭𝖮𝖯𝖰𝖱𝖲𝖳𝖴𝖵𝖶𝖷𝖸𝖹",
			"lower": "𝖺𝖻𝖼𝖽𝖾𝖿𝗀𝗁𝗂𝗃𝗄𝗅𝗆𝗇𝗈𝗉𝗊𝗋𝗌𝗍𝗎𝗏𝗐𝗑𝗒𝗓",
			"digits": "𝟢𝟣𝟤𝟥𝟦𝟧𝟨𝟩𝟪𝟫",
			"range": ["U+1D5A0", "U+1D5D3", "U+1D7E2", "U+1D7EB"]
		},
		"sans-bold": {
			"upper": "𝗔𝗕𝗖𝗗𝗘𝗙𝗚𝗛𝗜𝗝𝗞𝗟𝗠𝗡𝗢𝗣𝗤𝗥𝗦𝗧𝗨𝗩𝗪𝗫𝗬𝗭",
			"lower": "𝗮𝗯𝗰𝗱𝗲𝗳𝗴𝗵𝗶𝗷𝗸𝗹𝗺𝗻𝗼𝗽𝗾𝗿𝘀𝘁𝘂𝘃𝘄𝘅𝘆𝘇",
			"digits": "𝟬𝟭𝟮𝟯𝟰𝟱𝟲𝟳𝟴𝟵",
			"range": ["U+1D5D4", "U+1D607", "U+1D7EC", "U+1D7F5"]
		},
		"monospace": {
			"upper": "𝙰𝙱𝙲𝙳𝙴𝙵𝙶𝙷𝙸𝙹𝙺𝙻𝙼𝙽𝙾𝙿𝚀𝚁𝚂𝚃𝚄𝚅𝚆𝚇𝚈𝚉",
			"lower": "𝚊𝚋𝚌𝚍𝚎𝚏𝚐𝚑𝚒𝚓𝚔𝚕𝚖𝚗𝚘𝚙𝚚𝚛𝚜𝚝𝚞𝚟𝚠𝚡𝚢𝚣",
			"digits": "𝟶𝟷𝟸𝟹𝟺𝟻𝟼𝟽𝟾𝟿",
			"range": ["U+1D670", "U+1D6A3", "U+1D7F6", "U+1D7FF"]
		}
	},
	"usage": "Mathematical notation for variables, constants, and special number sets",
	"tags": ["math", "symbols", "alphanumeric", "typography"]
}


# 𝐀𝐁𝐂𝐃𝐄𝐅𝐆𝐇𝐈𝐉𝐊𝐋𝐌𝐍𝐎𝐏𝐐𝐑𝐒𝐓𝐔𝐕𝐖𝐗𝐘𝐙
# 𝐴𝐵𝐶𝐷𝐸𝐹𝐺𝐻𝐼𝐽𝐾𝐿𝑀𝑁𝑂𝑃𝑄𝑅𝑆𝑇𝑈𝑉𝑊𝑋𝑌𝑍
# 𝑨𝑩𝑪𝑫𝑬𝑭𝑮𝑯𝑰𝑱𝑲𝑳𝑴𝑵𝑶𝑷𝑸𝑹𝑺𝑻𝑼𝑽𝑾𝑿𝒀𝒁
# 𝒜𝒞𝒟𝒢𝒥𝒦𝒩𝒪𝒫𝒬𝒮𝒯𝒰𝒱𝒲𝒳𝒴𝒵
# 𝔄𝔅𝔇𝔈𝔉𝔊𝔍𝔎𝔏𝔐𝔑𝔒𝔓𝔔𝔖𝔗𝔘𝔙𝔚𝔛𝔜
# 𝔸𝔹ℂ𝔻𝔼𝔽𝔾ℍ𝕀𝕁𝕂𝕃𝕄ℕ𝕆ℙℚℝ𝕊𝕋𝕌𝕍𝕎𝕏𝕐ℤ
# 𝖠𝖡𝖢𝖣𝖤𝖥𝖦𝖧𝖨𝖩𝖪𝖫𝖬𝖭𝖮𝖯𝖰𝖱𝖲𝖳𝖴𝖵𝖶𝖷𝖸𝖹
# 𝗔𝗕𝗖𝗗𝗘𝗙𝗚𝗛𝗜𝗝𝗞𝗟𝗠𝗡𝗢𝗣𝗤𝗥𝗦𝗧𝗨𝗩𝗪𝗫𝗬𝗭
# 𝙰𝙱𝙲𝙳𝙴𝙵𝙶𝙷𝙸𝙹𝙺𝙻𝙼𝙽𝙾𝙿𝚀𝚁𝚂𝚃𝚄𝚅𝚆𝚇𝚈𝚉

𝔸 𝔹 ℂ 𝔻 𝔼 𝔽 𝔾 ℍ 𝕀 𝕁 𝕂 𝕃 𝕄 ℕ 𝕆 ℙ ℚ ℝ 𝕊 𝕋 𝕌 𝕍 𝕎 𝕏 𝕐 ℤ
𝔻𝕆𝕌𝔹𝕃𝔼 STRUCK
"upper": "𝐀𝐁𝐂𝐃𝐄𝐅𝐆𝐇𝐈𝐉𝐊𝐋𝐌𝐍𝐎𝐏𝐐𝐑𝐒𝐓𝐔𝐕𝐖𝐗𝐘𝐙",
"lower": "𝐚𝐛𝐜𝐝𝐞𝐟𝐠𝐡𝐢𝐣𝐤𝐥𝐦𝐧𝐨𝐩𝐪𝐫𝐬𝐭𝐮𝐯𝐰𝐱𝐲𝐳",
"digits": "𝟎𝟏𝟐𝟑𝟒𝟓𝟔𝟕𝟖𝟗",
"upper": "𝐴𝐵𝐶𝐷𝐸𝐹𝐺𝐻𝐼𝐽𝐾𝐿𝑀𝑁𝑂𝑃𝑄𝑅𝑆𝑇𝑈𝑉𝑊𝑋𝑌𝑍",
"lower": "𝑎𝑏𝑐𝑑𝑒𝑓𝑔ℎ𝑖𝑗𝑘𝑙𝑚𝑛𝑜𝑝𝑞𝑟𝑠𝑡𝑢𝑣𝑤𝑥𝑦𝑧",
"upper": "𝑨𝑩𝑪𝑫𝑬𝑭𝑮𝑯𝑰𝑱𝑲𝑳𝑴𝑵𝑶𝑷𝑸𝑹𝑺𝑻𝑼𝑽𝑾𝑿𝒀𝒁",
"lower": "𝒂𝒃𝒄𝒅𝒆𝒇𝒈𝒉𝒊𝒋𝒌𝒍𝒎𝒏𝒐𝒑𝒒𝒓𝒔𝒕𝒖𝒗𝒘𝒙𝒚𝒛",
"upper": "𝒜𝒞𝒟𝒢𝒥𝒦𝒩𝒪𝒫𝒬𝒮𝒯𝒰𝒱𝒲𝒳𝒴𝒵",
"lower": "𝓪𝓫𝓬𝓭𝓮𝓯𝓰𝓱𝓲𝓳𝓴𝓵𝓶𝓷𝓸𝓹𝓺𝓻𝓼𝓽𝓾𝓿𝔀𝔁𝔂𝔃",
"upper": "𝔄𝔅𝔇𝔈𝔉𝔊𝔍𝔎𝔏𝔐𝔑𝔒𝔓𝔔𝔖𝔗𝔘𝔙𝔚𝔛𝔜",
"lower": "𝔞𝔟𝔠𝔡𝔢𝔣𝔤𝔥𝔦𝔧𝔨𝔩𝔪𝔫𝔬𝔭𝔮𝔯𝔰𝔱𝔲𝔳𝔴𝔵𝔶𝔷",
"upper": "𝔸𝔹ℂ𝔻𝔼𝔽𝔾ℍ𝕀𝕁𝕂𝕃𝕄ℕ𝕆ℙℚℝ𝕊𝕋𝕌𝕍𝕎𝕏𝕐ℤ",
"digits": "𝟘𝟙𝟚𝟛𝟜𝟝𝟞𝟟𝟠𝟡",
"upper": "𝖠𝖡𝖢𝖣𝖤𝖥𝖦𝖧𝖨𝖩𝖪𝖫𝖬𝖭𝖮𝖯𝖰𝖱𝖲𝖳𝖴𝖵𝖶𝖷𝖸𝖹",
"lower": "𝖺𝖻𝖼𝖽𝖾𝖿𝗀𝗁𝗂𝗃𝗄𝗅𝗆𝗇𝗈𝗉𝗊𝗋𝗌𝗍𝗎𝗏𝗐𝗑𝗒𝗓",
"digits": "𝟢𝟣𝟤𝟥𝟦𝟧𝟨𝟩𝟪𝟫",
"upper": "𝗔𝗕𝗖𝗗𝗘𝗙𝗚𝗛𝗜𝗝𝗞𝗟𝗠𝗡𝗢𝗣𝗤𝗥𝗦𝗧𝗨𝗩𝗪𝗫𝗬𝗭",
"lower": "𝗮𝗯𝗰𝗱𝗲𝗳𝗴𝗵𝗶𝗷𝗸𝗹𝗺𝗻𝗼𝗽𝗾𝗿𝘀𝘁𝘂𝘃𝘄𝘅𝘆𝘇",
"digits": "𝟬𝟭𝟮𝟯𝟰𝟱𝟲𝟳𝟴𝟵",
"upper": "𝙰𝙱𝙲𝙳𝙴𝙵𝙶𝙷𝙸𝙹𝙺𝙻𝙼𝙽𝙾𝙿𝚀𝚁𝚂𝚃𝚄𝚅𝚆𝚇𝚈𝚉",
"lower": "𝚊𝚋𝚌𝚍𝚎𝚏𝚐𝚑𝚒𝚓𝚔𝚕𝚖𝚗𝚘𝚙𝚚𝚛𝚜𝚝𝚞𝚟𝚠𝚡𝚢𝚣",
"digits": "𝟶𝟷𝟸𝟹𝟺𝟻𝟼𝟽𝟾𝟿",


import { pooledMap } from "https://deno.land/std/async/pool.ts";

async function runTask(task: () => Promise<void>) {
    await pooledMap(4, [task], (t) => t());  // 4 concurrent relays max
}

class Session {
	id: string = crypto.randomUUID();
	rohaHistory: Plop[] = [];
	modelName: string;
	abort = new AbortController();
}
const sessions = new Map<string, Session>();
async function relaySession(session: Session) {
	if (session.abort.signal.aborted) return;
	try {
		const payload = buildPayload(session);   // use the session’s history
		const completion = await endpoint.chat.completions.create({
		...payload,
		signal: session.abort.signal
		});
		appendToSessionHistory(session, completion);
	} catch (e) {
		if (e.name === "AbortError") echo("session", session.id, "cancelled");
		else throw e;
	}
}

// D.  A dispatcher loop listening on a local pipe / port

const listener = Deno.listen({ port: 8081 });
for await (const conn of listener) {
	const session = new Session(await greeting(conn));
	sessions.set(session.id, session);
	runTask(() => chatLoop(session, conn));   // each chat gets its own async loop
}

E.  Interruption strategy

// drain stdin for only global commands:  exit, abort session
Deno.addSignalListener("SIGINT", () => {
	const id = prompt("Enter session to abort (or 'exit')");
	sessions.get(id)?.abort.abort();
});




if (!("requestMIDIAccess" in navigator)) {
	console.error("Web MIDI API not supported in this environment.");
	Deno.exit(1);
}
const midiAccess = await navigator.requestMIDIAccess();
console.log("MIDI Devices:");
// List input devices (e.g., MIDI keyboards)
midiAccess.inputs.forEach((input) => {
	console.log(`Input: ${input.name} (${input.manufacturer})`);
		input.onmidimessage = (event) => {
		console.log("MIDI Message:", event.data);
	};
});
// List output devices (e.g., synthesizers)
midiAccess.outputs.forEach((output) => {
	console.log(`Output: ${output.name} (${output.manufacturer})`);
});


import { Input } from "https://deno.land/x/cliffy@v1.0.0-rc.3/prompt/input.ts";
//  minLength: 8,
async function cliffyPrompt(prompt:string):Promise<string>{
	return await Input.prompt({message:prompt,allowTab:true});
}
	return cliffyPrompt(message);


async function clipTex5(text: string): Promise<void> {
  // Ensure text is a string
  if (typeof text !== "string") {
    throw new Error("Input must be a string");
  }

  // Convert text to UTF-8 encoded bytes
  const utf8Text = new TextEncoder().encode(text);

  let clipCmd: string;
  let args: string[] = [];

  // Determine the clipboard command based on the operating system
  switch (Deno.build.os) {
    case "darwin":
      clipCmd = "pbcopy";
      args = [];
      break;
    case "windows":
      clipCmd = "clip";
      args = [];
      break;
    case "linux":
      clipCmd = "xclip";
      args = ["-selection", "clipboard"];
      break;
    default:
      throw new Error(`Unsupported platform: ${Deno.build.os}`);
  }

  try {
    // Check if the command exists (optional, but improves robustness)
    await Deno.run({ cmd: [clipCmd, "--version"], stdout: "null", stderr: "null" }).status();

    // Spawn the process to copy text to the clipboard
    const process = Deno.run({
      cmd: [clipCmd, ...args],
      stdin: "piped",
      stdout: "piped",
      stderr: "piped",
    });

    // Write the UTF-8 encoded text to the process's stdin
    await process.stdin.write(utf8Text);
    process.stdin.close();

    // Wait for the process to complete and check its status
    const status = await process.status();

    if (!status.success) {
      const stderr = await process.stderrOutput();
      const errorText = new TextDecoder().decode(stderr);
      throw new Error(`Failed to copy to clipboard: ${errorText}`);
    }

    // Clean up
    process.close();
  } catch (err) {
    if (err instanceof Deno.errors.NotFound) {
      throw new Error(`Clipboard command '${clipCmd}' not found. Ensure it is installed.`);
    }
    throw err;
  }
}
function clipText4(text) {
	const utf8Text = Buffer.from(text, 'utf8').toString('utf8');
	let clipCmd;
	if (process.platform === 'darwin') {
			clipCmd = 'pbcopy';
	} else if (process.platform === 'win32') {
			clipCmd = 'clip';
	} else {
			clipCmd = 'xclip -selection clipboard';
	}

	const { spawn } = require('child_process');
	const proc = spawn(clipCmd, [], {
			shell: true,
			stdio: ['pipe', 'pipe', 'pipe']
	});

	// Write UTF-8 encoded text to stdin
	proc.stdin.write(utf8Text, 'utf8');
	proc.stdin.end();

	proc.on('error', (err) => {
			console.error('Clipboard error:', err);
	});
}

async function clipText3(text: string): Promise<void> {
	const isWindows = Deno.build.os === "windows";
	if (isWindows) {
		let process;
		try {
			process = Deno.run({cmd: ["cmd", "/c", "echo", text, "|", "clip"], stdin: "piped", stdout: "null", stderr: "null"});
			const textEncoder = new TextEncoder();
			await process.stdin.write(textEncoder.encode(text));
			process.stdin.close();
			const status = await process.status();
			if (!status.success) throw new Error("Failed to copy text to clipboard");
		} catch (error) {
			console.error("Clipboard error:", error.message);
			throw error;
		} finally {
			if (process) process.close();
		}
	} else {
		throw new Error("Clipboard copy is only implemented for Windows");
	}
}

async function clipText2(text: string): Promise<void> {
	const isWindows = Deno.build.os === "windows";
	if (isWindows) {
		try {
			const args={cmd: ["cmd", "/c", "echo", text, "|", "clip"], stdin: "piped", stdout: "null", stderr: "null"};
			const process = await Deno.run(args).status();
			const textEncoder = new TextEncoder();
			await process.stdin.write(textEncoder.encode(text));
			process.stdin.close();
			if (!process.success) throw new Error("Failed to copy text to clipboard");
		} catch (error) {
			console.error("Clipboard error:", error.message);
			throw error;
		} finally {
			process?.close();
		}
	} else {
		throw new Error("Clipboard copy is only implemented for Windows");
	}
}



{
        "audio-ic": {
                "7400 Series": {
                        "manufacturer": "Texas Instruments/Fairchild",
                        "year": 1964,
                        "description": "TTL Logic Gates used to build oscillators in early games like Pong."
                },
                "NE555 Timer IC": {
                        "manufacturer": "Signetics",
                        "year": 1971,
                        "description": "Pong's core sound generator. Versatile astable multivibrator for square-wave tones (e.g., 500-1000 Hz beeps)."
                },
                "3262 Timing Generator": {
                        "manufacturer": "Fairchild",
                        "year": 1972,
                        "description": "Video sync generator for display timing, used in early arcade tech."
                },
                "MC1408 DAC": {
                        "manufacturer": "Motorola",
                        "year": 1976,
                        "description": "8-bit Digital-to-Analog Converter used in TRS-80 Color Computer for basic waveform sound generation."
                },
                "SN76477": {
                        "manufacturer": "Texas Instruments",
                        "year": 1978,
                        "description": "Complex Sound Generator chip with noise, envelope, and VCO; used in Space Invaders for effects."
                },
                "AY-3-8910": {
                        "manufacturer": "General Instrument",
                        "year": 1978,
                        "description": "Programmable Sound Generator with 3 square-wave channels; popular in arcades, MSX, and ZX Spectrum."
                },
                "MC1377": {
                        "manufacturer": "Motorola",
                        "year": 1979,
                        "description": "Synced TV signals, indirectly gating audio via horizontal/vertical blanks."
                },
                "POKEY": {
                        "manufacturer": "Atari",
                        "year": 1979,
                        "description": "Pot Keyboard Integrated Circuit for sound and input; used in Atari 8-bit computers with 4 voices and distortion effects."
                },
                "MC6883 SAM": {
                        "manufacturer": "Motorola",
                        "year": 1980,
                        "description": "Synchronous Address Multiplexer in TRS-80 CoCo; handled timing for 6-bit DAC audio output."
                },
                "SP0256": {
                        "manufacturer": "General Instrument",
                        "year": 1980,
                        "description": "Allophone-based speech synthesizer; used in Intellivision and early educational toys for voice effects."
                },
                "TMS9919": {
                        "manufacturer": "Texas Instruments",
                        "year": 1981,
                        "description": "Sound chip with 3 tones + noise channel; powered TI-99/4A home computer audio."
                },
                "SID": {
                        "manufacturer": "MOS Technology",
                        "year": 1982,
                        "description": "Sound Interface Device with 3 voices, programmable waveforms, filters, and ADSR envelopes; iconic in Commodore 64."
                },
                "ULA (ZX Spectrum)": {
                        "manufacturer": "Ferranti",
                        "year": 1982,
                        "description": "Custom Uncommitted Logic Array; handled basic beeper sound via single-channel square waves in early ZX Spectrum."
                }
        }
}


"audio-ic":{
	"7400 Series",{
		"manufacturer":"Texas Instruments/Fairchild",
		"introduced":1960
	}
NE555 Timer IC (Signetics, 1971): Pong's core sound generator.
Motorola's MC1377 (later '70s) synced TV signals
Fairchild's 3262 Timing Generator


rem	echo Processing: %%i %%j %%k %%l %%m
rem set /a file_count+=%%i
rem set /a total_size+=%%k


import { PollyClient, SynthesizeSpeechCommand } from "https://esm.sh/@aws-sdk/client-polly";
const pollyClient = new PollyClient({region:"us-east-1" });
async function pollySay(text: string) {
	const command = new SynthesizeSpeechCommand({Text: text,OutputFormat: "mp3",VoiceId: "Joanna"});
	try {
		const response = await pollyClient.send(command);
		console.log("Speech synthesized successfully!");
	} catch (error) {
		console.error("Error synthesizing speech:", error);
	}
}
pollySay("hello world");

// import AWS from "npm:aws-sdk";
// const client = new AWS.S3({ region: "eu-west-3" });

//const response = await client.createBucket({Bucket: "<unique_bucket_name">}).promise();
//console.log(response);


const GPTVoices2=["breeze","cove","ember","juniper","sky"];


OpenAI Spec Notes

Request body
background
boolean or null

Optional
Defaults to false
Whether to run the model response in the background. Learn more.

include
array or null

Optional
Specify additional output data to include in the model response. Currently supported values are:


code_interpreter_call.outputs: Includes the outputs of python code execution in code interpreter tool call items.

computer_call_output.output.image_url: Include image urls from the computer call output.

file_search_call.results: Include the search results of the file search tool call.

message.input_image.image_url: Include image urls from the input message.

message.output_text.logprobs: Include logprobs with assistant messages.

reasoning.encrypted_content: Includes an encrypted version of reasoning tokens in reasoning item outputs. This enables reasoning items to be used in multi-turn conversations when using the

Responses API statelessly (like when the store parameter is set to false, or when an organization is enrolled in the zero data retention program).

input
string or array

Optional
Text, image, or file inputs to the model, used to generate a response.

Learn more:

Text inputs and outputs
Image inputs
File inputs
Conversation state
Function calling

Show possible types
instructions
string or null

Optional
A system (or developer) message inserted into the model's context.

When using along with previous_response_id, the instructions from a previous response will not be carried over to the next response. This makes it simple to swap out system (or developer) messages in new responses.

max_output_tokens
integer or null

Optional
An upper bound for the number of tokens that can be generated for a response, including visible output tokens and reasoning tokens.

max_tool_calls
integer or null

Optional
The maximum number of total calls to built-in tools that can be processed in a response. This maximum number applies across all built-in tool calls, not per individual tool. Any further attempts to call a tool by the model will be ignored.

metadata
map

Optional
Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format, and querying for objects via API or the dashboard.

Keys are strings with a maximum length of 64 characters. Values are strings with a maximum length of 512 characters.

model
string

Optional
Model ID used to generate the response, like gpt-4o or o3. OpenAI offers a wide range of models with different capabilities, performance characteristics, and price points. Refer to the model guide to browse and compare available models.

parallel_tool_calls
boolean or null

Optional
Defaults to true
Whether to allow the model to run tool calls in parallel.

previous_response_id
string or null

Optional
The unique ID of the previous response to the model. Use this to create multi-turn conversations. Learn more about conversation state.

prompt
object or null

Optional
Reference to a prompt template and its variables. Learn more.


Show properties
prompt_cache_key
string

Optional
Used by OpenAI to cache responses for similar requests to optimize your cache hit rates. Replaces the user field. Learn more.

reasoning
object or null

Optional
o-series models only

Configuration options for reasoning models.


Show properties
safety_identifier
string

Optional
A stable identifier used to help detect users of your application that may be violating OpenAI's usage policies. The IDs should be a string that uniquely identifies each user. We recommend hashing their username or email address, in order to avoid sending us any identifying information. Learn more.

service_tier
string or null

Optional
Defaults to auto
Specifies the processing type used for serving the request.

If set to 'auto', then the request will be processed with the service tier configured in the Project settings. Unless otherwise configured, the Project will use 'default'.
If set to 'default', then the request will be processed with the standard pricing and performance for the selected model.
If set to 'flex' or 'priority', then the request will be processed with the corresponding service tier. Contact sales to learn more about Priority processing.
When not set, the default behavior is 'auto'.
When the service_tier parameter is set, the response body will include the service_tier value based on the processing mode actually used to serve the request. This response value may be different from the value set in the parameter.

store
boolean or null

Optional
Defaults to true
Whether to store the generated model response for later retrieval via API.

stream
boolean or null

Optional
Defaults to false
If set to true, the model response data will be streamed to the client as it is generated using server-sent events. See the Streaming section below for more information.

stream_options
object or null

Optional
Defaults to null
Options for streaming responses. Only set this when you set stream: true.


Show properties
temperature
number or null

Optional
Defaults to 1
What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.

text
object

Optional
Configuration options for a text response from the model. Can be plain text or structured JSON data. Learn more:

Text inputs and outputs
Structured Outputs

Show properties
tool_choice
string or object

Optional
How the model should select which tool (or tools) to use when generating a response. See the tools parameter to see how to specify which tools the model can call.


Show possible types
tools
array

Optional
An array of tools the model may call while generating a response. You can specify which tool to use by setting the tool_choice parameter.

The two categories of tools you can provide the model are:

Built-in tools: Tools that are provided by OpenAI that extend the model's capabilities, like web search or file search. Learn more about built-in tools.
Function calls (custom tools): Functions that are defined by you, enabling the model to call your own code with strongly typed arguments and outputs. Learn more about function calling. You can also use custom tools to call your own code.

Show possible types
top_logprobs
integer or null

Optional
An integer between 0 and 20 specifying the number of most likely tokens to return at each token position, each with an associated log probability.

top_p
number or null

Optional
Defaults to 1
An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.

We generally recommend altering this or temperature but not both.

truncation
string or null

Optional
Defaults to disabled
The truncation strategy to use for the model response.

auto: If the context of this response and previous ones exceeds the model's context window size, the model will truncate the response to fit the context window by dropping input items in the middle of the conversation.
disabled (default): If a model response will exceed the context window size for a model, the request will fail with a 400 error.
user
Deprecated
string

Optional
This field is being replaced by safety_identifier and prompt_cache_key. Use prompt_cache_key instead to maintain caching optimizations. A stable identifier for your end-users. Used to boost cache hit rates by better bucketing similar requests and to help OpenAI detect and prevent abuse. Learn more.

Returns
Returns a Response object.


https://cloud.google.com/nodejs/docs/reference/text-to-speech/4.2.1#before-you-begin

// "role":"model"},
// "finishReason":"STOP","index":0}],
// "usageMetadata":{"promptTokenCount":8,
// "candidatesTokenCount":71,"totalTokenCount":79,
// "promptTokensDetails":[{"modality":"TEXT","tokenCount":8}],
// "candidatesTokensDetails":[{"modality":"AUDIO","tokenCount":71}]},
// "modelVersion":"gemini-2.5-flash-preview-tts",
// "responseId":"pFqZaMfNB6-Iz7IPza_ksAc"


//	return response;
/*
	const model=genAI.getGenerativeModel({model:GeminiFlashTTS});
	echo("[GEMINI] model",model);
	const request = {
		contents: [{
			role: "user",
			parts: [{ text: content }],
		}],
		generationConfig: {responseMimeType: "audio/mp3"}
	};
	try{
		const response = await model.generateContent(request);
		const audioData = response?.candidates?.[0]?.content?.parts?.[0]?.audio;
	//if (!audioData) {throw new Error("No audio data found in response");}
		echo("[GEMINI] Audio Data", audioData);
		return audioData; // Return base64-encoded audio or audio URL
	} catch (error) {
		console.error("[GEMINI] Error:", error.message);
		throw error;
	}
}
*/

//	const request = {model: GeminiFlashTTS,contents: [{ role: "user", parts: [{ content }] }],};
//	const transcript=await model.generateContent(request);
//	const text = transcript?.candidates?.[0]?.content?.parts?.[0]?.text;
//	echo("[GEMINI] Say",text)

/*
	if (!generatedText) throw new Error("Failed to generate text");
	const model=genAI.getGenerativeModel({model:GeminiFlashTTS});
	const transcript = await genAI.models.generateContent({model:GeminiFlashTTS,contents:text});
	const prompt={
		model: "gemini-2.5-flash-preview-tts",
		contents: transcript,
		config: {
			responseModalities: ['AUDIO'],
			speechConfig: {
				multiSpeakerVoiceConfig: {
					speakerVoiceConfigs: [
						{
							speaker: "Dr. Anya",
							voiceConfig: {
								prebuiltVoiceConfig: {voiceName: "Kore"},
							}
						},
						{
							speaker: "Liam",
							voiceConfig: {
								prebuiltVoiceConfig: {voiceName: "Puck"},
							}
						}
					]
				}
			}
		}
	};
	const response = await genAI.models.generateContent(prompt);
}
*/


model: {"id":0,"mut":"gemini-2.5-flash-tts","emoji":"🌟","rate":[],"limit":0,"modelname":
"models/gemini-2.5-flash-preview-tts@gemini","balance":"$-1.7031","keys":{"strict":false,"multi":false,"inline":false}}
> hi gemini
+
[GEMINI] unhandled error [GoogleGenerativeAI Error]: Error fetching from https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-tts:generateContent: [400 Bad Request] Multiturn chat is not enabled for models/gemini-2.5-flash-preview-tts
>

const transcript = await ai.models.generateContent({
   model: "gemini-2.0-flash",
   contents: "Generate a short transcript around 100 words that reads like it was clipped from a podcast by excited herpetologists. The hosts names are Dr. Anya and Liam.",
   })

const response = await ai.models.generateContent({
   model: "gemini-2.5-flash-preview-tts",
   contents: transcript,
   config: {
	responseModalities: ['AUDIO'],
	speechConfig: {
	   multiSpeakerVoiceConfig: {
		speakerVoiceConfigs: [
			 {
			   speaker: "Dr. Anya",
			   voiceConfig: {
				prebuiltVoiceConfig: {voiceName: "Kore"},
			   }
			},
			{
			   speaker: "Liam",
			   voiceConfig: {
				prebuiltVoiceConfig: {voiceName: "Puck"},
			  }
			}
		    ]
		  }
		}
	}
  });
}
// ..JavaScript code for exporting .wav file for output audio

await main();


Gemini 2.5 Flash Preview TTS
Gemini 2.5 Pro Preview TTS



export const GEMINI_TTS_VOICES = ["Zephyr","Puck","Charon","Kore","Fenrir","Leda","Orus","Aoede","Callirrhoe","Autonoe","Enceladus","Iapetus","Umbriel","Algieba","Despina","Erinome","Algenib","Rasalgethi","Laomedeia","Achernar","Alnilam","Schedar","Gacrux","Pulcherrima","Achird","Zubenelgenubi","Vindemiatrix","Sadachbia","Sadaltager","Sulafat"] as const;

const result = await model.generateContent({
  contents: [{ role: "user", parts: [{ text: "Hello from Gemini TTS!" }] }],
  generationConfig: {
    responseMimeType: "audio/mp3", // or audio/wav, audio/ogg, etc.
    speechConfig: {
	voiceConfig: {
	  voiceName: "Puck", // try "Kore", "Puck", "Charon" etc.
	}
    }
  }
});

// Result contains binary audio data in base64
const audioBase64 = result.response.candidates[0].content.parts[0].inlineData.data;

// Save to file
await Deno.writeFile(
  "output.mp3",
  Uint8Array.from(atob(audioBase64), c => c.charCodeAt(0))
);

console.log("Saved output.mp3");

model: {"id":0,"mut":"gemini-2.5-flash-tts","emoji":"🌟","rate":[],"limit":0,"modelname":"models/gemini-2.5-flash-preview-tts@gemini","balance":"$-1.7031","keys":{"strict":false,"multi":false,"inline":false}}
> hi gemini
+
[GEMINI] unhandled error [GoogleGenerativeAI Error]: Error fetching from https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-tts:generateContent: [429 Too Many Requests] You exceeded your current quota, please check your plan and billing details. For more information on this error, head to: https://ai.google.dev/gemini-api/docs/rate-limits. [{"@type":"type.googleapis.com/google.rpc.QuotaFailure","violations":[{"quotaMetric":"generativelanguage.googleapis.com/generate_content_paid_tier_input_token_count","quotaId":"GenerateContentPaidTierInputTokensPerModelPerMinute","quotaDimensions":{"location":"global","model":"gemini-2.5-flash-tts"},"quotaValue":"10000"}]},{"@type":"type.googleapis.com/google.rpc.Help","links":[{"description":"Learn more about Gemini API quotas","url":"https://ai.google.dev/gemini-api/docs/rate-limits"}]},{"@type":"type.googleapis.com/google.rpc.RetryInfo","retryDelay":"47s"}]
>

// -PlayAI

const groqEnglishVoices = [
  "Arista", "Atlas", "Basil", "Briggs", "Calum",
  "Celeste", "Cheyenne", "Chip", "Cillian", "Deedee",
  "Fritz", "Gail", "Indigo", "Mamaw", "Mason",
  "Mikail", "Mitch", "Quinn", "Thunder"
  // Add the remaining 7 if/when documented
];

const groqArabicVoices = ["Ahmad", "Amira", "Khalid", "Nasser"];

function listGroqVoices() {
  echo("English Voices (playai-tts):");
  groqEnglishVoices.forEach((voice, index) => echo(`${index + 1}. ${voice}`));

  echo("\nArabic Voices (playai-tts-arabic):");
  groqArabicVoices.forEach((voice, index) => echo(`${index + 1}. ${voice}`));
}




// const defaultVoice="gpt-4o-mini-tts@openai"
// https://platform.openai.com/docs/api-reference/audio/createSpeech
// model # 62 model: {"id":0,"mut":"gpt-4o-mini-tts","emoji":"🌐","rate":[0.6,12],"limit":0,
// "modelname":"gpt-4o-mini-tts@openai","balance":"$-2.4927","keys":{"strict":false,"multi":false,"inline":false}}


			if(line.includes(AnsiPasteStart)){
				echo("[ANSI] paste begin");
			}


const AnsiBracketedPasteEnable = "\x1b[?2004h";
const AnsiBracketedPasteDisable = "\x1b[?2004l";
const AnsiPasteStart = "\x1b[200~";
const AnsiPasteEnd = "\x1b[201~";

console.log(AnsiBracketedPasteEnable);


/*
			for(const [key, value] of Object.entries(endpoint)){
				let content=String(value);
				content=content.replace(/\n/g, " ");
				content=content.substring(0,30);
				if(key!="apiKey") echo("[OPENAI] endpoint:"+key+":"+content);
			}
*/
//		const models2=await listModels(config);
// dont do this	if(verbose) echo("model - ",JSON.stringify(model,null,"\t"));
// API support for OpenAI  ?? "alloy" ?? "mp3"
// {format:"mp3",voice:"alloy"}


"quad-plain":{
	"emoji":"🞎❑❐▣◢◣◤◥◧◨◩◪"
},

# ꔀ ꔁ ꔂ ꔃ ꔄ ꔅ ꔆ ꔇ ꔈ ꔉ ꔊ ꔋ ꔌ ꔍ ꔎ ꔏ ꔐ ꔑ ꔒ ꔓ ꔔ ꔕ ꔖ ꔗ ꔘ ꔙ ꔚ ꔛ
# ꔜ ꔝ ꔞ. ꔟ ꔠ ꔡ ꔢ ꔣ ꔤ ꔥ ꔦ ꔧ ꔨ ꔩ ꔪ ꔫ ꔬ ꔭ ꔮ ꔯ ꔰ ꔱ ꔲ ꔳ ꔴ ꔵ ꔶ ꔷ

ꔸꔹꔺꔻꔼꔽꔾꔿꕀꕁꕂꕃꕄꕅꕆꕇꕈꕉꕊꕋꕌꕍꕎꕏꕐꕑꕒꕓꕔꕕꕖꕗꕘꕙꕚꕛꕜꕝꕞꕟꕠꕡꕢꕣꕤꕥꕦꕧꕨꕩꕪꕫꕬꕭꕮꕯꕰꕱꕲꕳꕴꕵꕶꕷꕸꕹꕺꕻꕼꕽꕾꕿꖀꖁꖂꖃꖄꖅꖆꖇꖈꖉꖊꖋꖌꖍꖎꖏꖐꖑꖒꖓꖔꖕꖖꖗꖘꖙꖚꖛꖜꖝꖞꖟꖠꖡꖢꖣꖤꖥꖦꖧꖨꖩꖪꖫꖬꖭꖮꖯꖰꖱꖲꖳꖴꖵꖶꖷꖸꖹꖺꖻꖼꖽꖾꖿꗀꗁꗂꗃꗄꗅꗆꗇꗈꗉꗊꗋꗌꗍꗎꗏꗐꗑꗒꗓꗔꗕꗖꗗꗘꗙꗚꗛꗜꗝꗞꗟꗠꗡꗢꗣꗤꗥꗦꗧꗨꗩꗪꗫꗬꗭꗮꗯꗰꗱꗲꗳꗴꗵꗶꗷꗸꗹꗺꗻꗼꗽꗾꗿꘀꘁꘂꘃꘄꘅꘆꘇꘈꘉꘊꘋꘌ꘍꘎꘏ꘐꘑꘒꘓꘔꘕꘖꘗꘘꘙꘚꘛꘜꘝꘞꘟ",

ꔞ.

𝖠𝖡𝖢𝖣𝖤𝖥𝖦𝖧𝖨𝖩𝖪𝖫𝖬𝖭𝖮𝖯𝖰𝖱𝖲𝖳𝖴𝖵𝖶𝖷𝖸𝖹
𝖺𝖻𝖼𝖽𝖾𝖿𝗀𝗁𝗂𝗃𝗄𝗅𝗆𝗇𝗈𝗉𝗊𝗋𝗌𝗍𝗎𝗏𝗐𝗑𝗒𝗓
𝟢𝟣𝟤𝟥𝟦𝟧𝟨𝟩𝟪𝟫
𝗔𝗕𝗖𝗗𝗘𝗙𝗚𝗛𝗜𝗝𝗞𝗟𝗠𝗡𝗢𝗣𝗤𝗥𝗦𝗧𝗨𝗩𝗪𝗫𝗬𝗭
𝗮𝗯𝗰𝗱𝗲𝗳𝗴𝗵𝗶𝗷𝗸𝗹𝗺𝗻𝗼𝗽𝗾𝗿𝘀𝘁𝘂𝘃𝘄𝘅𝘆𝘇
𝟬𝟭𝟮𝟯𝟰𝟱𝟲𝟳𝟴𝟵

ꕢꕣꕤꕥꕦꕧꕨꕩ

ꔀꔁꔂꔃꔄꔅꔆꔇꔈꔉꔊꔋꔌꔍꔎꔏꔐꔑꔒꔓꔔꔕꔖꔗꔘꔙꔚꔛꔜꔝꔞꔟꔠꔡꔢꔣꔤꔥꔦꔧꔨꔩꔪꔫꔬꔭꔮꔯꔰꔱꔲꔳꔴꔵꔶꔷꔸꔹꔺꔻꔼꔽꔾꔿꕀꕁꕂꕃꕄꕅꕆꕇꕈꕉꕊꕋꕌꕍꕎꕏꕐꕑꕒꕓꕔꕕꕖꕗꕘꕙꕚꕛꕜꕝꕞꕟꕠꕡꕢꕣꕤꕥꕦꕧꕨꕩꕪꕫꕬꕭꕮꕯꕰꕱꕲꕳꕴꕵꕶꕷꕸꕹꕺꕻꕼꕽꕾꕿꖀꖁꖂꖃꖄꖅꖆꖇꖈꖉꖊꖋꖌꖍꖎꖏꖐꖑꖒꖓꖔꖕꖖꖗꖘꖙꖚꖛꖜꖝꖞꖟꖠꖡꖢꖣꖤꖥꖦꖧꖨꖩꖪꖫꖬꖭꖮꖯꖰꖱꖲꖳꖴꖵꖶꖷꖸꖹꖺꖻꖼꖽꖾꖿꗀꗁꗂꗃꗄꗅꗆꗇꗈꗉꗊꗋꗌꗍꗎꗏꗐꗑꗒꗓꗔꗕꗖꗗꗘꗙꗚꗛꗜꗝꗞꗟꗠꗡꗢꗣꗤꗥꗦꗧꗨꗩꗪꗫꗬꗭꗮꗯꗰꗱꗲꗳꗴꗵꗶꗷꗸꗹꗺꗻꗼꗽꗾꗿꘀꘁꘂꘃꘄꘅꘆꘇꘈꘉꘊꘋꘌ꘍꘎꘏ꘐꘑꘒꘓꘔꘕꘖꘗꘘꘙꘚꘛꘜꘝꘞꘟ",

０１２３４５６７８９


"mathalpha": {
	"name": "Mathematical Alphanumeric Symbols",
	"block": "Mathematical Alphanumeric Symbols",
	"category": ["Lu", "Ll", "Nd"],
	"variants": {
		"bold": {
			"upper": "𝐀𝐁𝐂𝐃𝐄𝐅𝐆𝐇𝐈𝐉𝐊𝐋𝐌𝐍𝐎𝐏𝐐𝐑𝐒𝐓𝐔𝐕𝐖𝐗𝐘𝐙",
			"lower": "𝐚𝐛𝐜𝐝𝐞𝐟𝐠𝐡𝐢𝐣𝐤𝐥𝐦𝐧𝐨𝐩𝐪𝐫𝐬𝐭𝐮𝐯𝐰𝐱𝐲𝐳",
			"digits": "𝟎𝟏𝟐𝟑𝟒𝟓𝟔𝟕𝟖𝟗",
			"range": ["U+1D400", "U+1D433", "U+1D7CE", "U+1D7D7"]
		},
		"italic": {
			"upper": "𝐴𝐵𝐶𝐷𝐸𝐹𝐺𝐻𝐼𝐽𝐾𝐿𝑀𝑁𝑂𝑃𝑄𝑅𝑆𝑇𝑈𝑉𝑊𝑋𝑌𝑍",
			"lower": "𝑎𝑏𝑐𝑑𝑒𝑓𝑔ℎ𝑖𝑗𝑘𝑙𝑚𝑛𝑜𝑝𝑞𝑟𝑠𝑡𝑢𝑣𝑤𝑥𝑦𝑧",
			"range": ["U+1D434", "U+1D467"]
		},
		"bold-italic": {
			"upper": "𝑨𝑩𝑪𝑫𝑬𝑭𝑮𝑯𝑰𝑱𝑲𝑳𝑴𝑵𝑶𝑷𝑸𝑹𝑺𝑻𝑼𝑽𝑾𝑿𝒀𝒁",
			"lower": "𝒂𝒃𝒄𝒅𝒆𝒇𝒈𝒉𝒊𝒋𝒌𝒍𝒎𝒏𝒐𝒑𝒒𝒓𝒔𝒕𝒖𝒗𝒘𝒙𝒚𝒛",
			"range": ["U+1D468", "U+1D49B"]
		},
		"script": {
			"upper": "𝒜𝒞𝒟𝒢𝒥𝒦𝒩𝒪𝒫𝒬𝒮𝒯𝒰𝒱𝒲𝒳𝒴𝒵",
			"lower": "𝓪𝓫𝓬𝓭𝓮𝓯𝓰𝓱𝓲𝓳𝓴𝓵𝓶𝓷𝓸𝓹𝓺𝓻𝓼𝓽𝓾𝓿𝔀𝔁𝔂𝔃",
			"range": ["U+1D49C", "U+1D4CF", "U+1D4EA", "U+1D503"]
		},
		"fraktur": {
			"upper": "𝔄𝔅𝔇𝔈𝔉𝔊𝔍𝔎𝔏𝔐𝔑𝔒𝔓𝔔𝔖𝔗𝔘𝔙𝔚𝔛𝔜",
			"lower": "𝔞𝔟𝔠𝔡𝔢𝔣𝔤𝔥𝔦𝔧𝔨𝔩𝔪𝔫𝔬𝔭𝔮𝔯𝔰𝔱𝔲𝔳𝔴𝔵𝔶𝔷",
			"range": ["U+1D504", "U+1D537", "U+1D552", "U+1D56B"]
		},
		"double-struck": {
			"upper": "𝔸𝔹ℂ𝔻𝔼𝔽𝔾ℍ𝕀𝕁𝕂𝕃𝕄ℕ𝕆ℙℚℝ𝕊𝕋𝕌𝕍𝕎𝕏𝕐ℤ",
			"digits": "𝟘𝟙𝟚𝟛𝟜𝟝𝟞𝟟𝟠𝟡",
			"range": ["U+1D538", "U+1D56B", "U+1D7D8", "U+1D7E1"]
		},
		"sans-serif": {
			"upper": "𝖠𝖡𝖢𝖣𝖤𝖥𝖦𝖧𝖨𝖩𝖪𝖫𝖬𝖭𝖮𝖯𝖰𝖱𝖲𝖳𝖴𝖵𝖶𝖷𝖸𝖹",
			"lower": "𝖺𝖻𝖼𝖽𝖾𝖿𝗀𝗁𝗂𝗃𝗄𝗅𝗆𝗇𝗈𝗉𝗊𝗋𝗌𝗍𝗎𝗏𝗐𝗑𝗒𝗓",
			"digits": "𝟢𝟣𝟤𝟥𝟦𝟧𝟨𝟩𝟪𝟫",
			"range": ["U+1D5A0", "U+1D5D3", "U+1D7E2", "U+1D7EB"]
		},
		"sans-bold": {
			"upper": "𝗔𝗕𝗖𝗗𝗘𝗙𝗚𝗛𝗜𝗝𝗞𝗟𝗠𝗡𝗢𝗣𝗤𝗥𝗦𝗧𝗨𝗩𝗪𝗫𝗬𝗭",
			"lower": "𝗮𝗯𝗰𝗱𝗲𝗳𝗴𝗵𝗶𝗷𝗸𝗹𝗺𝗻𝗼𝗽𝗾𝗿𝘀𝘁𝘂𝘃𝘄𝘅𝘆𝘇",
			"digits": "𝟬𝟭𝟮𝟯𝟰𝟱𝟲𝟳𝟴𝟵",
			"range": ["U+1D5D4", "U+1D607", "U+1D7EC", "U+1D7F5"]
		},
		"monospace": {
			"upper": "𝙰𝙱𝙲𝙳𝙴𝙵𝙶𝙷𝙸𝙹𝙺𝙻𝙼𝙽𝙾𝙿𝚀𝚁𝚂𝚃𝚄𝚅𝚆𝚇𝚈𝚉",
			"lower": "𝚊𝚋𝚌𝚍𝚎𝚏𝚐𝚑𝚒𝚓𝚔𝚕𝚖𝚗𝚘𝚙𝚚𝚛𝚜𝚝𝚞𝚟𝚠𝚡𝚢𝚣",
			"digits": "𝟶𝟷𝟸𝟹𝟺𝟻𝟼𝟽𝟾𝟿",
			"range": ["U+1D670", "U+1D6A3", "U+1D7F6", "U+1D7FF"]
		}
	},
	"usage": "Mathematical notation for variables, constants, and special number sets",
	"tags": ["math", "symbols", "alphanumeric", "typography"]
}


# 𝐀𝐁𝐂𝐃𝐄𝐅𝐆𝐇𝐈𝐉𝐊𝐋𝐌𝐍𝐎𝐏𝐐𝐑𝐒𝐓𝐔𝐕𝐖𝐗𝐘𝐙
# 𝐴𝐵𝐶𝐷𝐸𝐹𝐺𝐻𝐼𝐽𝐾𝐿𝑀𝑁𝑂𝑃𝑄𝑅𝑆𝑇𝑈𝑉𝑊𝑋𝑌𝑍
# 𝑨𝑩𝑪𝑫𝑬𝑭𝑮𝑯𝑰𝑱𝑲𝑳𝑴𝑵𝑶𝑷𝑸𝑹𝑺𝑻𝑼𝑽𝑾𝑿𝒀𝒁
# 𝒜𝒞𝒟𝒢𝒥𝒦𝒩𝒪𝒫𝒬𝒮𝒯𝒰𝒱𝒲𝒳𝒴𝒵
# 𝔄𝔅𝔇𝔈𝔉𝔊𝔍𝔎𝔏𝔐𝔑𝔒𝔓𝔔𝔖𝔗𝔘𝔙𝔚𝔛𝔜
# 𝔸𝔹ℂ𝔻𝔼𝔽𝔾ℍ𝕀𝕁𝕂𝕃𝕄ℕ𝕆ℙℚℝ𝕊𝕋𝕌𝕍𝕎𝕏𝕐ℤ
# 𝖠𝖡𝖢𝖣𝖤𝖥𝖦𝖧𝖨𝖩𝖪𝖫𝖬𝖭𝖮𝖯𝖰𝖱𝖲𝖳𝖴𝖵𝖶𝖷𝖸𝖹
# 𝗔𝗕𝗖𝗗𝗘𝗙𝗚𝗛𝗜𝗝𝗞𝗟𝗠𝗡𝗢𝗣𝗤𝗥𝗦𝗧𝗨𝗩𝗪𝗫𝗬𝗭
# 𝙰𝙱𝙲𝙳𝙴𝙵𝙶𝙷𝙸𝙹𝙺𝙻𝙼𝙽𝙾𝙿𝚀𝚁𝚂𝚃𝚄𝚅𝚆𝚇𝚈𝚉

𝔸 𝔹 ℂ 𝔻 𝔼 𝔽 𝔾 ℍ 𝕀 𝕁 𝕂 𝕃 𝕄 ℕ 𝕆 ℙ ℚ ℝ 𝕊 𝕋 𝕌 𝕍 𝕎 𝕏 𝕐 ℤ
𝔻𝕆𝕌𝔹𝕃𝔼 STRUCK
"upper": "𝐀𝐁𝐂𝐃𝐄𝐅𝐆𝐇𝐈𝐉𝐊𝐋𝐌𝐍𝐎𝐏𝐐𝐑𝐒𝐓𝐔𝐕𝐖𝐗𝐘𝐙",
"lower": "𝐚𝐛𝐜𝐝𝐞𝐟𝐠𝐡𝐢𝐣𝐤𝐥𝐦𝐧𝐨𝐩𝐪𝐫𝐬𝐭𝐮𝐯𝐰𝐱𝐲𝐳",
"digits": "𝟎𝟏𝟐𝟑𝟒𝟓𝟔𝟕𝟖𝟗",
"upper": "𝐴𝐵𝐶𝐷𝐸𝐹𝐺𝐻𝐼𝐽𝐾𝐿𝑀𝑁𝑂𝑃𝑄𝑅𝑆𝑇𝑈𝑉𝑊𝑋𝑌𝑍",
"lower": "𝑎𝑏𝑐𝑑𝑒𝑓𝑔ℎ𝑖𝑗𝑘𝑙𝑚𝑛𝑜𝑝𝑞𝑟𝑠𝑡𝑢𝑣𝑤𝑥𝑦𝑧",
"upper": "𝑨𝑩𝑪𝑫𝑬𝑭𝑮𝑯𝑰𝑱𝑲𝑳𝑴𝑵𝑶𝑷𝑸𝑹𝑺𝑻𝑼𝑽𝑾𝑿𝒀𝒁",
"lower": "𝒂𝒃𝒄𝒅𝒆𝒇𝒈𝒉𝒊𝒋𝒌𝒍𝒎𝒏𝒐𝒑𝒒𝒓𝒔𝒕𝒖𝒗𝒘𝒙𝒚𝒛",
"upper": "𝒜𝒞𝒟𝒢𝒥𝒦𝒩𝒪𝒫𝒬𝒮𝒯𝒰𝒱𝒲𝒳𝒴𝒵",
"lower": "𝓪𝓫𝓬𝓭𝓮𝓯𝓰𝓱𝓲𝓳𝓴𝓵𝓶𝓷𝓸𝓹𝓺𝓻𝓼𝓽𝓾𝓿𝔀𝔁𝔂𝔃",
"upper": "𝔄𝔅𝔇𝔈𝔉𝔊𝔍𝔎𝔏𝔐𝔑𝔒𝔓𝔔𝔖𝔗𝔘𝔙𝔚𝔛𝔜",
"lower": "𝔞𝔟𝔠𝔡𝔢𝔣𝔤𝔥𝔦𝔧𝔨𝔩𝔪𝔫𝔬𝔭𝔮𝔯𝔰𝔱𝔲𝔳𝔴𝔵𝔶𝔷",
"upper": "𝔸𝔹ℂ𝔻𝔼𝔽𝔾ℍ𝕀𝕁𝕂𝕃𝕄ℕ𝕆ℙℚℝ𝕊𝕋𝕌𝕍𝕎𝕏𝕐ℤ",
"digits": "𝟘𝟙𝟚𝟛𝟜𝟝𝟞𝟟𝟠𝟡",
"upper": "𝖠𝖡𝖢𝖣𝖤𝖥𝖦𝖧𝖨𝖩𝖪𝖫𝖬𝖭𝖮𝖯𝖰𝖱𝖲𝖳𝖴𝖵𝖶𝖷𝖸𝖹",
"lower": "𝖺𝖻𝖼𝖽𝖾𝖿𝗀𝗁𝗂𝗃𝗄𝗅𝗆𝗇𝗈𝗉𝗊𝗋𝗌𝗍𝗎𝗏𝗐𝗑𝗒𝗓",
"digits": "𝟢𝟣𝟤𝟥𝟦𝟧𝟨𝟩𝟪𝟫",
"upper": "𝗔𝗕𝗖𝗗𝗘𝗙𝗚𝗛𝗜𝗝𝗞𝗟𝗠𝗡𝗢𝗣𝗤𝗥𝗦𝗧𝗨𝗩𝗪𝗫𝗬𝗭",
"lower": "𝗮𝗯𝗰𝗱𝗲𝗳𝗴𝗵𝗶𝗷𝗸𝗹𝗺𝗻𝗼𝗽𝗾𝗿𝘀𝘁𝘂𝘃𝘄𝘅𝘆𝘇",
"digits": "𝟬𝟭𝟮𝟯𝟰𝟱𝟲𝟳𝟴𝟵",
"upper": "𝙰𝙱𝙲𝙳𝙴𝙵𝙶𝙷𝙸𝙹𝙺𝙻𝙼𝙽𝙾𝙿𝚀𝚁𝚂𝚃𝚄𝚅𝚆𝚇𝚈𝚉",
"lower": "𝚊𝚋𝚌𝚍𝚎𝚏𝚐𝚑𝚒𝚓𝚔𝚕𝚖𝚗𝚘𝚙𝚚𝚛𝚜𝚝𝚞𝚟𝚠𝚡𝚢𝚣",
"digits": "𝟶𝟷𝟸𝟹𝟺𝟻𝟼𝟽𝟾𝟿",

1 nitrologic linux delisted and removed - obese does not come close
2 nitrologic steamstub2 and nitrocircuit delisted - empty repos detected
3 nitrologic dsptool - case sensitive issue 'bios/README.md' 'bios/readme.md' - fix me
4 nitrologic boot wizbang kiosk playfab winding

fountain

fountain: nitrologic/fountain
forge: nitrologic/forge
foundry: nitrologic/foundry
roha: nitrologic/roha
biblispec: nitrologic/biblispec

studio lab stack

dsptool: nitrologic/dsptool
dspstudio: nitrologic/dspstudio

audio

vsynth: nitrologic/vsynth
miditool: nitrologic/miditool
audiotool: nitrologic/audiotool
hidapi: libusb/hidapi

embedded

yaroze: nitrologic/yaroze
picotool: nitrologic/picotool
pico-sdk: raspberrypi/pico-sdk
skid30: nitrologic/skid30

career

ninjakiwi: nitrologic/ninjakiwi
loadrite: nitrologic/loadrite
fusion: nitrologic/fusion

local terrain

roa: nitrologic/roa
roagrid: nitrologic/roagrid
pipeline: nitrologic/pipeline
pipeline2: nitrologic/pipeline2
skidroa: nitrologic/skidroa
bakery: nitrologic/bakery
stage: nitrologic/stage
stage2: nitrologic/stage2
stage3: nitrologic/stage3
stage4: nitrologic/stage4

Blitz Monkey2 Repositories

blitz2: nitrologic/blitz2
blitz3d: nitrologic/blitz3d
blitzmax: blitz-research/blitzmax
blitzmax20: nitrologic/blitzmax20
blitzmax-dpi-denial: nitrologic/blitzmax-dpi-denial
maxide: nitrologic/maxide
maxgui2.mod: nitrologic/maxgui2.mod
monkey2: nitrologic/monkey2
m2: nitrologic/m2
mx2: nitrologic/mx2
mx2core: nitrologic/mx2core
mx2mojo: nitrologic/mx2mojo
mojo3d-vr: nitrologic/mojo3d-vr
mojolab: nitrologic/mojolab
mojolabs: nitrologic/mojolabs
libsgd: blitz-research/libsgd

unsorted

nitrologic.github.io: nitrologic/nitrologic.github.io
nitrologic: nitrologic/nitrologic
plainview: nitrologic/plainview
acid8: nitrologic/acid8
worldbody: nitrologic/worldbody
deno: denoland/deno
bbarchives: nitrologic/bbarchives
f9dasm: Arakula/f9dasm
skidnz: nitrologic/skidnz
plainhost: nitrologic/plainhost
mobstar: nitrologic/mobstar
waveform: nitrologic/waveform
itouch: nitrologic/itouch
touch: nitrologic/touch
postphysics: nitrologic/postphysics
voxel-model: nitrologic/voxel-model
acid: nitrologic/acid
asmcoder: nitrologic/asmcoder
acidvm: nitrologic/acidvm
diversity: nitrologic/diversity
roanz: nitrologic/roanz
wasted: nitrologic/wasted

wire: nitrologic/wire
stereobasic: nitrologic/stereobasic
space: nitrologic/space
vector0: nitrologic/vector0
studio: nitrologic/studio
nod: nitrologic/nod
grid: nitrologic/grid
score: nitrologic/score
nitro: nitrologic/nitro
m2: nitrologic/m2
mx2: nitrologic/mx2
nextspace: nitrologic/nextspace
scout: nitrologic/scout
tileshop: nitrologic/tileshop
simon: nitrologic/simon
winding: nitrologic/winding
drawline: nitrologic/drawline
basement: nitrologic/basement
geom: nitrologic/geom
glTF: nitrologic/glTF
acidpd: nitrologic/acidpd
axe.mod: nitrologic/axe.mod
mod: nitrologic/mod
n3d: nitrologic/n3d
mx2core: nitrologic/mx2core
mx2mojo: nitrologic/mx2mojo
mojo3d-vr: nitrologic/mojo3d-vr
nitrovr: nitrologic/nitrovr
winmain: nitrologic/winmain
shape: nitrologic/shape
nitrotoken: nitrologic/nitrotoken
nano: nitrologic/nano
monkey2: nitrologic/monkey2
sphinx: nitrologic/sphinx
bbcom: nitrologic/bbcom
media: nitrologic/media
blitzmax-dpi-denial: nitrologic/blitzmax-dpi-denial
ffmpeg: nitrologic/ffmpeg
steamstub2: nitrologic/steamstub2
steamstub: nitrologic/steamstub
nitrosdk: nitrologic/nitrosdk
maxide: nitrologic/maxide
uae: nitrologic/uae
nitrojs: nitrologic/nitrojs
emu: nitrologic/emu
nitroclient: nitrologic/nitroclient
nitrocircuit: nitrologic/nitrocircuit
nitrodocs: nitrologic/nitrodocs
abc: nitrologic/abc
maxgui2.mod: nitrologic/maxgui2.mod
freeaudio: nitrologic/freeaudio



𝐀𝐁

## Viscera

# 𓄲 𓄳 𓄴 𓄵 𓄶 𓄷

# 𓄲𓄷𓄶𓄷𓄶𓄷𓄶𓄷𓄶𓄷𓄶𓄴

````
					"codes":"𓄲𓄳𓄴𓄵𓄶𓄷",
					"name":"Viscera",
					"block": "Egyptian Hieroglyphs",
					"category": "So",
					"tags": ["hieroglyphs", "plain","intestines","ea9625"],
					"wide": 1,
					"glyphs": [
						{"point":"𓄲","sim":"e"},
						{"point":"𓄳","sim":"a"},
						{"point":"𓄴","sim":"9"},
						{"point":"𓄵","sim":"g6"},
						{"point":"𓄶","sim":"z2"},
						{"point":"𓄷","sim":"s5"}
					]
````



https://en.wiktionary.org/wiki/%F0%93%84%88

https://en.wiktionary.org/wiki/𓄈


//		const value=(Array.isArray(c))?boxCell(w,c):(c||"");
// todo: clip string for tables or go multi line cells?
function boxCell(width,array){
	echo("[TABLE] boxCell",array);
	const w=(width/array.length)|0;
	return array.map((v, i) => {
		const ch = ['-', '·'][i % 2] || '-'; // simple pattern; extend as needed
		const n  = Math.round(v * w);
		return ch.repeat(Math.max(0, n));
	});
}


	if(inTable&&widths) {
		result.push(boxBottom(widths));
	}


> hi deepseek can you test the read_time tool pls
+
The current local time is 7/08/2025, 9:02:20 AM (Pacific/Auckland timezone). Let me know if
you'd like to test anything else!
{account:deepseek,spent:0.0001,balance:-0.2219}
 fountain 1.3.4 ⛲  deepseek-chat 🐋 deepseek-chat@deepseek 1.0° 🪣 $0.000 509B 3.53s
[RELAY] calls in progress 0 223
[RELAY] processToolCalls call_0_02120a7f-2cba-46f2-b9d6-647539824a8a {"index":0,"id":"call_0_02120a7f-2cba-46f2-b9d6-647539824a8a","type":"function","function":{"name":"read_time","arguments":"{}"}}
item
[RELAY] pushing tool result {"role":"assistant","tool_call_id":"call_0_02120a7f-2cba-46f2-b9d6-647539824a8a","title":"read_time","content":"{\"time\":\"7/08/2025, 9:02:20 am\",\"tz\":\"Pacific/Auckland\",\"locale\":\"en-NZ\"}"}
{account:deepseek,spent:0.0002,balance:-0.2221}

[TYPESCRIPT] 380 problems noted

// TODO: test file API support needed to avoid rate limits on plain chat
// TODO: use hash for file name to solve duplicates
// TODO: connect await anthropicStatus(sdk); to standard API Status endpoint

//Oops. rate_limit_error This request would exceed the rate limit for your organization (58fe2390-2bb6-4c31-9a42-525531a73246) of 30,000 input tokens per minute.
//For details, refer to: https://docs.anthropic.com/en/api/rate-limits. You can see the response headers for current usage.
// Please reduce the prompt length or the maximum tokens requested, or try again later.
// You may also contact sales at https://www.anthropic.com/contact-sales to discuss your options for a rate limit increase.

// how to limit 30,000 input tokens per minute?
// file sharing was supposed to fix this :(


/*
function stringFit2(text,width){
	// this code needs love
	const wide=stringWidth(text);
	if(width>wide){
 		let wide = 0;
		let clip = "";
		for (const ch of text) {
			const w = isDoubleWidth(ch.codePointAt(0)) ? 2 : 1;
			if (wide + w > width) break;
			clip += ch;
			wide += w;
		}
		return clip;
	}
	const pad=" ".repeat(wide-width);
	return text+pad;
}
*/


// Cohere account removed August 2025

		case "Cohere":
			return await connectCohere(account,config);

// API support for cohere

function getDottedDate(name:string):number{
	const n=name.length;
	const year=parseInt(name.substring(n-4,n));
	const month=parseInt(name.substring(n-7,n-5));
//	echo("[GETDATE]",year,month);
	const date=new Date(Date.UTC(year, month - 1, 1));
	return Math.floor(date.getTime()/1000);
}

function specCohereModel(model,account){
	if(roha.config.debugging) echo("[cohere] spec",model);
	const name=model.name+"@"+account;
	const exists=name in roha.mut;
	const info=exists?roha.mut[name]:{name,notes:[],errors:[],relays:0,cost:0};
	info.id=model.name;
	info.object="model";
	const modelname=model.name;
	const dated=(modelname.endsWith(2024)||modelname.endsWith(2025));
	const created=(dated)?getDottedDate(modelname):"created";
//	echo("COHERE",created);
	info.created=created;
	info.owner="owner";
	if (!info.notes) info.notes=[];
	if (!info.errors) info.errors=[];
//	echo("mut",name,info);
	roha.mut[name]=info;
}

function prepareCohereRequest(payload){
	const history=[];
	let blob={};
	for(const item of payload.messages){
		const content=item.content;
		switch(item.role){
			case "system":
				history.push({role:"system",content});
				break;
			case "user":
				if(item.name=="blob"){
					blob=JSON.parse(content);
					continue;
				}
				if(item.name=="image"){
					const image_url={url:"https://jpeg.org/images/jpeg-home.jpg"}
					history.push({role:"user",content:[{type:"image_url",image_url}]});
					continue;
//					const mediatype=blob.type;
//					const image_url={url:"data:"+mediatype+";base64,"+content};
// [<media-type>][;base64],<data>"
// TODO: url=data:[<media-type>][;base64],<data>
//					history.push({role:"user",content:[{type:"image",data}]});
				}
				history.push({role:"user",content});
				break;
			case "assistant":
				history.push({role:"assistant",content});
				break;
		}
	}
	const temperature=grokTemperature;
	const request={
		model:payload.model,
		temperature,
		stream:false,
		messages:history
	};
	return request;
}

async function connectCohere(account,config) {
	try{
		const baseURL=config.url;
		const apiKey=getEnv(config.env);
		if(!apiKey) return null;
		const headers={
			"Authorization":"Bearer "+apiKey,
			"Content-Type":"application/json",
			"Accept":"application/json",
			"X-Client-Name": "slopfountain.ts"
		};
		const response=await fetch(baseURL+"/models",{method:"GET",headers});
		if (!response.ok) return null;
		const reply=await response.json();
//		echo(reply.models);
		const list=[];
		for (const model of reply.models) {
			const name=model.name+"@"+account;
			list.push(name);
			specCohereModel(model,account);
		}
		list.sort();
		modelList=modelList.concat(list);
		return {
			apiKey,
			headers,
			baseURL,
			modelList:list,
			models: {
				list: async () => models, // Return cached models or fetch fresh
			},
			chat: {
				completions: {
					create: async (payload) => {
						const model=payload.model;
						const content=prepareCohereRequest(payload);
						const url=baseURL+"/chat";
						const usage={prompt_tokens:0,completion_tokens:0,total_tokens:0};
						if(roha.config.debugging){
							echo("[cohere] url",url);
							//echo("[cohere] content",content);
							//echo("[cohere] usage",usage);
							echo("[cohere] headers",headers);
						}
						try{
							const response=await fetch(url,{method:"POST",headers,body:JSON.stringify(content)});
							if(roha.config.debugging){
								echo("[cohere] response.ok",response.ok);
							}
							if (response.ok) {
								//[cohere] json
								// {"id":"5b7e6d03-d348-40b8-8178-a60ad55d792e","message":{"role":"assistant","content":[{"type":"text","text":"Hello! How can I assist you today?"}]},
								// "finish_reason":"COMPLETE","usage":{"billed_units":{"input_tokens":1,"output_tokens":9},"tokens":{"input_tokens":496,"output_tokens":11}}}
								const reply=[];
								const json=await response.json();
								const role=json.message.role;
								for(const item of json.message.content){
									if(item.type=="text") reply.push(item.text);
								}
								const text=reply.join("\n");
								// echo("[cohere]",text)
								const tokens=json.usage.tokens;
								const total_tokens=tokens.input_tokens+tokens.output_tokens;
								const usage={prompt_tokens:tokens.input_tokens,completion_tokens:tokens.output_tokens,total_tokens};
								return {model,choices:[{message:{content:text}}],usage};
							}
							echo("[cohere] status",response.status,response.statusText);
							if(roha.config.debugging)
								echo("[cohere] content",content);
						}catch(e){
							echo("[cohere] exception",e.message);
						}
						return {model,choices:[],usage};
					},
				},
			},

		}
	} catch (error) {
		echo(`Account ${account} fetch error: ${error.message}`);
		return null;
	}

}



//import { contentType } from "https://deno.land/std/media_types/mod.ts";


/*
					create: async (payload) => {
						const model=payload.model;
						const system=anthropicSystem(payload);
//						echo("[CLAUDE] ",payload);
						const messages=await anthropicMessages(sdk,payload);
//						echo("[CLAUDE] ",messages);
						const temperature=grokTemperature;
						// TODO: anthropic max_tokens
						const max_tokens=2048;//was 1024
						const request={model,max_tokens,temperature,system,messages};
						if (payload.tools) {
							request.tools=anthropicTools(payload);
						}
						const options={headers:{"anthropic-beta":"files-api-2025-04-14"}};
						const reply=await sdk.messages.create(request,options);
						const choices=[];
						const stopped=reply.stop_reason;
						if(stopped){
							echo("[CLAUDE] stopped:",stopped);
							if(stopped=="tool_use"){
								for(const content of reply.content){
									if(content.type == "tool_use"){
//										result = execute_tool(content.name, content.input)
										echo("[CLAUDE] execute:",content);	// id name input
										choices.push[{message:{tool_calls:calls}}];
									}
								}
							}
						}
						const usage={
							prompt_tokens:reply.usage.input_tokens,
							completion_tokens:reply.usage.output_tokens
						};
						for(const content of reply.content){
							if(content.type!="tool_use"){
								echo("[CLAUDE] content:",content);
								const text="";
								choices.push[{message:{content:text}}];
							}
						}
						return {model,choices,usage};
					}
				}
			}
		};
	} catch (error) {
		console.error("connectAnthropic error:",error.message);
		return null;
	}
}

*/
/*
		for (const choice of completion.choices) {
			const calls=choice.message.tool_calls;
			// choice has index message{role,content,refusal,annotations} finish_reason
			if (calls) {
				const count=increment("calls");
				if(verbose) echo("[RELAY] calls in progress",depth,count)
				// TODO: map toolcalls index
				const toolCalls=calls.map((tool, index) => ({
					id: tool.id,
					type: "function",
					function: {name: tool.function.name,arguments: tool.function.arguments || "{}"}
				}));
*/




					echo("[ANTHROPIC]",item);
					const tool_use_id=item.toolId;
					const content={};

//					const toolResult={type:"tool_result",tool_use_id,content:item.content};
//					const calls=choice.message.tool_calls;
					messages.push({role:"assistant",content});

					// now handled out of band


function anthropicInvoke(payload){
	for(const item of payload.messages){
		switch(item.role){
			case "assistant":
				if(item.tool_calls){
					echo("[ANTHROPIC]",item);
					const tool_use_id=item.toolId;
					const toolResult={type:"tool_result",tool_use_id,content:item.content};
				}
				break;
		}
	}
}

/*
		for (const choice of completion.choices) {
			const calls=choice.message.tool_calls;
			// choice has index message{role,content,refusal,annotations} finish_reason
			if (calls) {


		for (const choice of completion.choices) {
			const calls=choice.message.tool_calls;
			// choice has index message{role,content,refusal,annotations} finish_reason
			if (calls) {
				const count=increment("calls");
				if(verbose) echo("[RELAY] calls in progress",depth,count)
					messages.push({role:"user",content:[toolResult]});
//					messages.push({role:item.role,content:item.content,tool_calls:item.tool_calls});
*/


			case "balance":
				await getBalance(words);
				break;


/*
										const calls=content.tool_calls;
										const count=increment("calls");
										const toolCalls=calls.map((tool, index) => ({
											id: tool.id,
											type: "function",
											function: {name: tool.function.name,arguments: tool.function.arguments || "{}"}
										}));
										const toolResults=await processToolCalls(calls);
										for (const result of toolResults) {
											const item={role:"assistant",tool_call_id:result.tool_call_id,title:result.name,content:result.content};
											rohaHistory.push(item);
										}
										// new behavior, message content comes after tool reports
										const content=choice.message.content;
										if(content){
											if(verbose)echo("[RELAY] pushing asssistant model",depth,payload.model,mut,content);
						//					rohaHistory.push({role:"assistant",name:payload.model,mut,content,tool_calls:toolCalls});
										}
*/


+ debugging is on,
+ sorry I think I am missing some replies
+
[CLAUDE] file blob {
  path: "C:/nitrologic/fountain/roha/slopfountain.ts",
  length: 95829,
  type: "application/typescript",
  tag: ""
}
I can see from your log that my response (entry 005) shows I said I would fetch the file, but it
looks like the conversation may have been cut off or there was an issue with the file fetching
process.

Let me try to fetch the file you referenced again:

[RELAY] payload {
	"model": "claude-sonnet-4-20250514",
	"messages": [
		{
			"role": "system",
			"title": "fountain 1.3.3",
			"content": "As a guest assistant language model please be mindful of others, courteous and professional. Keep response short and only post code on request. Use tabs for indenting js and json files."
		},
		{
			"role": "system",
			"title": "ryzen5",
			"content": "models under test include claude-sonnet-4"
		},
		{
			"role": "user",
			"name": "blob",
			"content": "{\"path\":\"C:/nitrologic/fountain/roha/slopfountain.ts\",\"length\":95829,\"type\":\"application/typescript\",\"tag\":\"\"}"
		},
		{
			"role": "user",
			"name": "content",
			"content": "// slopfountain.ts - A research tool for dunking large language models.\r\n// Copyright (c) 2025 Simon Armstrong\r\n// Licensed under the MIT License\r\n\r\n// Tested with Deno 2.4.2, V8 13.7.152.14, TypeScript 5.8.3\r\n\r\nimport { OpenAI } from \"https://deno.land/x/openai@v4.69.0/mod.ts\";\r\nimport { toFile, Anthropic } from \"npm:@anthropic-ai/sdk\";\r\n\r\nimport { GoogleGenerativeAI } from \"npm:@google/generative-ai\";\r\n\r\nimport { encodeBase64 } from \"https://deno.land/std/encoding/base64.ts\";\r\nimport { resolve } from \"https://deno.land/std/path/mod.ts\";\r\n\r\n//import { contentType } from \"https://deno.land/std/media_types/mod.ts\";\r\n\r\n\r\nconst fountainVersion=\"1.3.3\";\r\nconst defaultModel=\"deepseek-chat@deepseek\";\r\nconst fountainName=\"fountain \"+fountainVersion;\r\nconst rohaTitle=fountainName+\" ⛲ \";\r\n\r\nconst terminalColumns=100;\r\nconst statsColumn=50;\r\nconst clipLog=1800;\r\n\r\n// system prompt\r\n\r\nconst rohaMihi=\"Welcome to the fountain - we've got fun and games. A many:many user model research project.\";\r\n\r\nconst rohaGuide=[\r\n\t\"As a guest assistant language model please be mindful of others, courteous and professional.\",\r\n\t\"Keep response short and only post code on request.\",\r\n\t\"Use tabs for indenting js and json files.\"\r\n]\r\n\r\nconst welcome=await Deno.readTextFile(\"welcome.txt\");\r\n\r\nconst mutsInclude=\"models under test include \"\r\nconst cleanupRequired=\"Switch model, drop shares or reset history to continue.\";\r\nconst warnDirty=\"Feel free to comment if shared files are new or different.\";\r\nconst exitMessage=\"Ending session.\";\r\nconst boxChars=[\"┌┐└┘─┬┴│┤├┼\",\"╔╗╚╝═╦╩║╣╠╬\",\"┏┓┗┛━┳┻┃┫┣╋\"];\r\nconst rule500= \"━\".repeat(500);\r\nconst pageBreak=rule500;\r\n\r\n// user environment\r\n\r\nfunction getEnv(key:string):string{\r\n\treturn Deno.env.get(key)||\"\";\r\n}\r\n\r\nconst username=getEnv(\"USERNAME\");\r\nconst userdomain=getEnv(\"USERDOMAIN\").toLowerCase();\r\nconst userregion = Intl.DateTimeFormat().resolvedOptions();\r\n\r\nconst userterminal=getEnv(\"TERM\")||getEnv(\"TERM_PROGRAM\")||getEnv(\"SESSIONNAME\")||\"VOID\";\r\n\r\ntype ConfigFlags = {\r\n\tshowWelcome: boolean;\r\n\treasonoutloud: boolean;\r\n\ttools: boolean;\r\n\tcommitonstart: boolean;\r\n\tsaveonexit: boolean;\r\n\tansi: boolean;\r\n\tverbose: boolean;\r\n\tsquash: boolean;\r\n\tbroken: boolean;\r\n\tlogging: boolean;\r\n\tdebugging: boolean;\r\n\tpushonshare: boolean;\r\n\trawprompt: boolean;\r\n\tresetcounters: boolean;\r\n\treturntopush: boolean;\r\n\tslow: boolean;\r\n\tslops: boolean;\r\n\tbudget: false;\r\n};\r\n\r\nclass Plop {\r\n\tconstructor(\r\n\t\tpublic role: string,\r\n\t\tpublic title: string,\r\n\t\tpublic content: string\r\n\t) {\r\n\t}\r\n}\r\n\r\n// a shared context state with multiple models\r\n\r\nlet rohaHistory:Plop[]=[];\r\n\r\nconst sessionStack:Plop[][]=[];\r\n\r\nfunction pushHistory(){\r\n\tsessionStack.push([...rohaHistory]);\r\n\tresetHistory();\r\n}\r\n\r\nfunction popHistory():Plop[]|false{\r\n\tif(sessionStack.length==0) return false;\r\n\treturn sessionStack.pop()||false;\r\n}\r\n\r\n\r\nlet rohaModel=\"mut\";\t//mut name excludes preview version details\r\nlet rohaUser=username+\"@\"+userdomain;\r\n\r\nlet grokModel=\"\";\r\nlet grokAccount=null;\r\nlet grokFunctions=true;\r\nlet grokUsage=0;\r\nlet grokTemperature=1.0;\r\nlet grokThink=0.0;\r\n\r\n// Ansi codes\r\n\r\nconst AnsiReset=\"\\x1b[0m\";\r\n\r\nconst AnsiHome=\"\\x1B[H\";\r\nconst AnsiCursor=\"\\x1B[\";\r\nconst AnsiWhite=\"\\x1b[38;5;255m\";\r\nconst AnsiGreenBG=\"\\x1b[48;5;23m\";\r\nconst AnsiTealBG=\"\\x1b[48;5;24m\";\r\nconst AnsiGreyBG=\"\\x1b[48;5;232m\";\r\nconst AnsiVividOrange=\"\\x1b[38;5;208m\";\r\nconst AnsiLineBlank=\"\\x1B[0K\";\r\n\r\nconst _AnsiClear=\"\\x1B[2J\";\r\nconst _AnsiMoveToEnd=\"\\x1b[999B\";\r\n\r\nconst _AnsiNeonPink=\"\\x1b[38;5;201m\";\r\nconst _AnsiPop=\"\\x1b[1;36m\";\r\nconst _AnsiSaveCursorA = \"\\x1B[s\";\r\nconst _AnsiRestoreCursorA = \"\\x1B[u\";\r\n\r\n// Array of 8 ANSI colors (codes 30-37)\r\n// selected for contrast and visibility in both light and dark modes.\r\n\r\nconst AnsiColorNames=[\"Black\",\"Red\",\"Green\",\"Yellow\",\"Blue\",\"Magenta\",\"Cyan\",\"White\"];\r\n\r\nconst AnsiColors=[\r\n\t\"\\x1b[30m\", // Black: Deep black (#333333), subtle on light, visible on dark\r\n\t\"\\x1b[31m\", // Red: Muted red (#CC3333), clear on white and black\r\n\t\"\\x1b[32m\", // Green: Forest green (#2D6A4F), good contrast on both\r\n\t\"\\x1b[33m\", // Yellow: Golden yellow (#DAA520), readable on dark and light\r\n\t\"\\x1b[34m\", // Blue: Medium blue (#3366CC), balanced visibility\r\n\t\"\\x1b[35m\", // Magenta: Soft magenta (#AA3377), distinct on any background\r\n\t\"\\x1b[36m\", // Cyan: Teal cyan (#008080), contrasts well without glare\r\n\t\"\\x1b[37m\"\t// White: Light gray (#CCCCCC), subtle on light, clear on dark\r\n];\r\n\r\nfunction ansiPrompt():string{\r\n\tconst size=Deno.consoleSize();\r\n\tconst row=size.rows;\r\n\treturn AnsiCursor + row + \";1H\" + AnsiLineBlank;\r\n}\r\n\r\n// application configuration\r\n\r\nconst slowMillis=25;\r\nconst MaxFileSize=512*1024*16;\r\n\r\nconst appDir=Deno.cwd();\r\nconst accountsPath=resolve(appDir,\"accounts.json\");\r\nconst specsPath=resolve(appDir,\"modelspecs.json\");\r\nconst unicodePath=resolve(appDir,\"slopspec.json\");\r\nconst bibliPath=resolve(appDir,\"bibli.json\");\r\n\r\nconst slopPath=resolve(appDir,\"../slop\");\r\n\r\nconst forgePath=resolve(appDir,\"forge\");\r\nconst rohaPath=resolve(forgePath,\"forge.json\");\r\n\r\nconst modelAccounts=JSON.parse(await Deno.readTextFile(accountsPath));\r\nconst modelSpecs=JSON.parse(await Deno.readTextFile(specsPath));\r\nconst unicodeSpec=JSON.parse(await Deno.readTextFile(unicodePath));\r\nconst bibli=JSON.parse(await Deno.readTextFile(bibliPath));\r\n\r\nconst emojiIndex = {};\r\n\r\n// helper functions\r\n\r\nconst epoch:number=Date.UTC(2025,4,12);\r\nfunction timestamp():string{\r\n\treturn Math.floor((Date.now()-epoch)/62.5).toString(16);\r\n}\r\n\r\nfunction unixTime(date:string){\r\n\tconst d = new Date(date);\r\n\tconst s = d.getTime()/1000;\r\n\treturn Math.floor(s);\r\n}\r\n\r\nfunction dateStamp(seconds:number){\r\n\tif(seconds>0){\r\n\t\tconst date = new Date(seconds*1000);\r\n\t\tconst created=date.toISOString();\r\n\t\treturn created.substring(0,10);\r\n\t}\r\n\treturn \"---\";\r\n}\r\n\r\nconst thinSpace=\" \";\r\nfunction padChars(text:string):string{\r\n\treturn [...text].join(thinSpace);\r\n}\r\n\r\nfunction stringifyArray(array:[]):string{\r\n\treturn array.join(\",\");\r\n}\r\n\r\nfunction stringWidth(text:string):number{\r\n\tlet w = 0;\r\n\tfor (const ch of text) {\r\n\t\tw += isDoubleWidth(ch.codePointAt(0)) ? 2 : 1;\r\n\t}\r\n\treturn w;\r\n}\r\n\r\nfunction stringFit(text:string,width:number):string{\r\n\treturn text.substring(0,width);\r\n}\r\n\r\nfunction stringRight(text:string,width:number):string{\r\n\tconst n=stringWidth(text);\r\n\tconst pad=(width>n)?\" \".repeat(width-n):\"\";\r\n\treturn pad+text;\r\n}\r\nfunction echoKey(key:object,wide:number){\r\n\tconst text=JSON.stringify(key);\r\n\tconst rtext=stringRight(text,wide);\r\n\techo(rtext);\r\n}\r\n\r\n/*\r\nfunction stringFit2(text,width){\r\n\t// this code needs love\r\n\tconst wide=stringWidth(text);\r\n\tif(width>wide){\r\n \t\tlet wide = 0;\r\n\t\tlet clip = \"\";\r\n\t\tfor (const ch of text) {\r\n\t\t\tconst w = isDoubleWidth(ch.codePointAt(0)) ? 2 : 1;\r\n\t\t\tif (wide + w > width) break;\r\n\t\t\tclip += ch;\r\n\t\t\twide += w;\r\n\t\t}\r\n\t\treturn clip;\r\n\t}\r\n\tconst pad=\" \".repeat(wide-width);\r\n\treturn text+pad;\r\n}\r\n*/\r\n\r\nfunction parseUnicode(){\r\n\tfor(const group in unicodeSpec){\r\n\t\tconst keys = Object.keys(unicodeSpec[group].emoji);\r\n\t\techo(\"[UNICODE]\",group,keys.join(\" \"));\r\n\t}\r\n}\r\n\r\nfunction parseBibli(){\r\n\tconst tag=roha.config.verbose?\"[BIBLI]\":\"\";\r\n\tconst glyphs=bibli.separator;\r\n//\tconst size=Deno.consoleSize();\r\n//\tconst wide=size.columns;\r\n\tconst wide=terminalColumns-10;\r\n\tconst spaced=padChars(glyphs.repeat(150));\r\n\tconst br=stringFit(spaced,wide);\r\n\tconst hr=stringFit(rule500,wide);\r\n\techo(tag,hr);\r\n\tfor(const index in bibli.spec){\r\n\t\tconst item=bibli.spec[index];\r\n\t\tconst keys = Object.keys(item);\r\n\t\techo(tag,index,keys.join(\" \"));\r\n\t\tif(item.alphabet){\r\n\t\t\techo(tag+\" alphabet:\",item.alphabet);\r\n\t\t}\r\n\t\tif(item.lexis){\r\n\t\t\tconst blocks=Object.keys(item.lexis);\r\n\t\t\techo(tag+\" lexis:\",blocks.join(\" \"));\r\n\t\t}\r\n\t}\r\n\techo(tag,hr);\r\n\techo(tag,bibli.moto);\r\n\techo(tag,hr);\r\n}\r\n\r\nfunction stringwidth2(str) {\r\n\tlet width = 0;\r\n\tfor (const char of str) {\r\n\t\twidth += emojiIndex[char] || 1;\r\n\t}\r\n\treturn width;\r\n}\r\n\r\nconst decoder=new TextDecoder(\"utf-8\");\r\nconst encoder=new TextEncoder();\r\n\r\n// rohaHistory is array of {role,name||title,content}\r\n// attached as payload messages in chat completions\r\n\r\nconst flagNames={\r\n\tsquash : \"squash message sequences in output\",\r\n\treasonoutloud : \"echo chain of thought\",\r\n\ttools : \"enable model tool interface\",\r\n\tcommitonstart : \"commit shared files on start\",\r\n\tsaveonexit : \" save conversation history on exit\",\r\n\tansi : \"markdown ANSI rendering\",\r\n\tverbose : \"emit debug information\",\r\n\tbroken : \"ansi background blocks\",\r\n\tlogging : \"log all output to file\",\r\n\tdebugging : \"emit diagnostics\",\r\n\tpushonshare : \"emit a /push after any /share\",\r\n\trawprompt : \"experimental rawmode stdin - broken paste\",\r\n\tresetcounters : \"factory reset when reset\",\r\n\treturntopush : \"hit return to /push - under test\",\r\n\tslow : \"experimental output at reading speed\",\r\n\tslops : \"console worker scripts\",\r\n\tbudget : \"cheap models for the win\"\r\n};\r\n\r\nconst emptyConfig:ConfigFlags={\r\n\tshowWelcome:false,\r\n\treasonoutloud:false,\r\n\ttools:false,\r\n\tcommitonstart:false,\r\n\tsaveonexit:false,\r\n\tansi:true,\r\n\tverbose:false,\r\n\tsquash:false,\r\n\tbroken:false,\r\n\tlogging:false,\r\n\tdebugging:false,\r\n\tpushonshare:false,\r\n\trawprompt:false,\r\n\tresetcounters:false,\r\n\treturntopush:false,\r\n\tslow:false,\r\n\tslops:false,\r\n\tbudget:false\r\n};\r\n\r\nconst emptyRoha={\r\n\tconfig:emptyConfig,\r\n\ttags:{},\r\n\tsharedFiles:[],\r\n\tattachedFiles:[],\r\n\tsaves:[],\r\n\tcounters:{},\r\n\tmut:{},\r\n\tlode:{},\r\n\tforge:[],\r\n\tnic:\"friend\"\r\n};\r\n\r\nlet slopPid=null;\r\n\r\nfunction sanitizeNic(nic){\r\n\treturn nic.replace(/[^a-zA-Z0-9]/g,\"\");\r\n}\r\n\r\nasync function exitForge(){\r\n\tconst pid=slopPid;\r\n\tif(pid){\r\n\t\tDeno.kill(Number(pid),\"SIGTERM\");\r\n\t\techo(\"pid\",pid,\"killed\");\r\n\t\tslopPid=null;\r\n\t}\r\n\tawait flush();\r\n\tif(roha.config.saveonexit){\r\n\t\tawait saveHistory();\r\n\t}\r\n\tawait flush();\r\n\tDeno.stdin.setRaw(false);\r\n\tconsole.log(\"exitForge\",exitMessage)\r\n\tif(slopConnection) slopConnection.close();\r\n}\r\n\r\nlet slopPail=[];\r\nlet readingSlop=false;\r\nlet slopConnection;\r\n\r\n//\r\n// let listening=false;\r\n// TODO: use deno comms to talk with slop <=> fountain task comms\r\n\r\nconst rxBufferSize=1e6;\r\n\r\nconst rxBuffer = new Uint8Array(rxBufferSize);\r\n\r\n// todo: encode slopPipe origin parameter\r\nasync function writeSlop(slopPipe,data){\r\n\treturn await slopPipe.write(data);\r\n}\r\n\r\nasync function readSlop(slopPipe){\r\n\tif(!readingSlop) return;\r\n\treadingSlop=true;\r\n\tlet n=null;\r\n\ttry{\r\n\t\tn = await slopPipe.read(rxBuffer);\r\n\t}catch(e){\r\n\t\techo(\"readSlop\",e);\r\n\t}\r\n\tif (n !== null) {\r\n\t\tconst received = rxBuffer.subarray(0, n);\r\n\t\tconst message = decoder.decode(received);\r\n\t\techo(\"readSlop\", message);\r\n\t\t// TODO: document me\r\n\t\tself.postMessage({rx:message});\r\n\t}\r\n\treadingSlop=false;\r\n}\r\n\r\nasync function serveConnection(connection){\r\n\tconsole.error(\"\\t[FOUNTAIN] serveConnection \",JSON.stringify(connection));\r\n\tconst text=encoder.encode(\"greetings from fountain client\");\r\n\tawait writeSlop(connection,text);\r\n}\r\n\r\nasync function listenService(){\r\n\techo(\"listening from fountain for slop on port 8081\");\r\n\tconst listener=Deno.listen({ hostname: \"localhost\", port: 8081, transport: \"tcp\" });\r\n\twhile (true) {\r\n\t\tconst connection=await listener.accept();\r\n\t\tslopConnection=connection;\r\n\t\tawait serveConnection(connection);\r\n\t}\r\n}\r\n\r\nfunction price(credit){\r\n\tif (credit === null || isNaN(credit)) return \"$0\";\r\n\treturn \"$\"+credit.toFixed(4);\r\n}\r\n\r\nfunction annotateTag(name,description){\r\n\tif(!name){\r\n\t\tthrow(\"null name\");\r\n\t}\r\n\tif(!(name in roha.tags)) {\r\n\t\troha.tags[name]={};\r\n//\t\tthrow(\"tag not found \"+name);\r\n\t}\r\n\troha.tags[name].description=description;\r\n}\r\n\r\nfunction annotateShare(name,description){\r\n\tlet index=roha.sharedFiles.findIndex(item => item.id === name);\r\n\tif(index==-1) {\r\n\t\tthrow(\"annotateShare name not found \"+name);\r\n\t}\r\n\troha.sharedFiles[index].description=description;\r\n\techo(\"annotateShare annotated file share\",name);\r\n}\r\n\r\nfunction increment(key){\r\n\tlet i=0;\r\n\tif(key in roha.counters){\r\n\t\ti=roha.counters[key]+1;\r\n\t}\r\n\troha.counters[key]=i;\r\n\treturn i\r\n}\r\n\r\n// all models are here - with and without spec\r\n\r\nlet modelList=[];\r\nlet lodeList=[];\r\n\r\n// never read - work in progress\r\n\r\nlet tagList=[];\r\nlet shareList=[];\r\nlet memberList=[];\r\n\r\nconst emptyMUT={notes:[],errors:[],relays:0,cost:0,elapsed:0,created:0}\r\nconst emptyModel={name:\"empty\",account:\"\",hidden:false,prompts:0,completion:0}\r\nconst emptyTag={}\r\n\r\n// const emptyShare={path,size,modified,hash,tag,id}\r\n\r\nlet roha=emptyRoha;\r\nlet listCommand=\"\";\r\nlet creditCommand=\"\";\r\nlet rohaShares=[];\r\nlet currentDir=Deno.cwd();\r\n\r\nfunction resetHistory(){\r\n\trohaHistory=[{role:\"system\",title:fountainName,content:rohaMihi}];\r\n\tconst guide=rohaGuide.join(\" \");\r\n\tif (guide) {\r\n\t\trohaHistory=[{role:\"system\",title:fountainName,content:guide}];\r\n\t}\r\n}\r\n\r\nfunction echoContent(content,wide,left,right){\r\n\tconst chars=wide-(left+right);\r\n\tconst indent=\" \".repeat(left);\r\n\tlet cursor=0;\r\n\twhile(cursor<content.length){\r\n\t\tlet line=content.substring(cursor,cursor+chars);\r\n\t\tlet n=line.indexOf(\"\\n\");\r\n\t\tif(n==-1) n=line.lastIndexOf(\" \");\r\n\t\tif(n!=-1) line=line.substring(0,n+1);\r\n\t\tif(line.length){\r\n\t\t\techo(indent+line);\r\n\t\t\tcursor+=line.length;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n// with item in order of preference, src = mut title name\r\nfunction itemSource(item):string{\r\n\tconst src:string=item.mut||item.title||item.name||\"roha\";\r\n\treturn src;\r\n}\r\n\r\nfunction listHistory(){\r\n\tconst wide=terminalColumns-statsColumn;\r\n\tconst history=rohaHistory;\r\n\tlet total=0;\r\n\tfor(let i=0;i<history.length;i++){\r\n\t\tconst item=history[i];\r\n\t\tconst content=readable(item.content);\r\n\t\tconst clip=content.substring(0,wide);\r\n\t\tconst size=\"(\"+content.length+\")\";\r\n\t\tconst role=item.role.padEnd(12,\" \");\r\n\t\tconst from=itemSource(item).padEnd(15,\" \");\r\n\t\tconst iii=String(i).padStart(3,\"0\");\r\n\t\tconst spend=item.price?(item.emoji+\" \"+item.price.toFixed(4)) :\"\";\r\n\t\tconst seconds=item.elapsed?(item.elapsed.toFixed(2)+\"s\"):\"\";\r\n\t\techo(iii,role,from,clip,size,spend,seconds);\r\n\t\ttotal+=content.length;\r\n\t}\r\n\tconst size=unitString(total,4,\"B\");\r\n\techo(\"History size\",size);\r\n}\r\n\r\nfunction logHistory(){\r\n\tconst wide=terminalColumns;\r\n\tlet history=rohaHistory;\r\n\tif(roha.config.squash){\r\n\t\thistory=squashMessages(rohaHistory);\r\n\t}\r\n\tfor(let i=0;i<history.length;i++){\r\n\t\tconst item=history[i];\r\n\t\tconst index=i;//item.index;\r\n\t\tconst iii=String(index).padStart(3,\"0\");\r\n\t\tconst spend=item.price?(item.emoji+\" \"+item.price.toFixed(4)) :\"\";\r\n\t\tconst seconds=item.elapsed?(item.elapsed.toFixed(2)+\"s\"):\"\";\r\n\t\tconst src=itemSource(item);\r\n\t\techo(iii,item.role,src,spend,seconds);\r\n\t\tconst content=readable(item.content).substring(0,clipLog);\r\n\t\techoContent(content,wide,3,2);\r\n\t}\r\n}\r\n\r\n// TODO: username is blobuser, pass message type for images\r\nfunction rohaPush(content,username){\r\n\tconst item={role:\"user\",name:username,content:content};\r\n\trohaHistory.push(item);\r\n\tslopPail.push({\"push\":{item}});\r\n}\r\n\r\nresetHistory();\r\n\r\n// roha\r\n\r\nconst rohaTools=[{\r\n\ttype: \"function\",\r\n\tfunction:{\r\n\t\tname: \"read_time\",\r\n\t\tdescription: \"Returns current local time\",\r\n\t\tparameters: {\r\n\t\t\ttype: \"object\",\r\n\t\t\tproperties: {},\r\n\t\t\trequired: []\r\n\t\t}\r\n\t}\r\n},{\r\n\ttype: \"function\",\r\n\tfunction:{\r\n\t\tname: \"submit_file\",\r\n\t\tdescription: \"Submit a file for review\",\r\n\t\tparameters: {\r\n\t\t\ttype: \"object\",\r\n\t\t\tproperties: {\r\n\t\t\t\tcontentType:{type:\"string\"},\r\n\t\t\t\tcontent:{type:\"string\"}\r\n\t\t\t},\r\n\t\t\trequired: [\"contentType\",\"content\"]\r\n\t\t}\r\n\t}\r\n},{\r\n\ttype: \"function\",\r\n\tfunction:{\r\n\t\tname: \"fetch_file\",\r\n\t\tdescription: \"Request a file for analysis\",\r\n\t\tparameters: {\r\n\t\t\ttype: \"object\",\r\n\t\t\tproperties: {\r\n\t\t\t\tfileName:{type:\"string\"}\r\n\t\t\t},\r\n\t\t\trequired: [\"fileName\"]\r\n\t\t}\r\n\t}\r\n},{\r\n\ttype: \"function\",\r\n\tfunction: {\r\n\t\tname: \"tag_slop\",\r\n\t\tdescription: \"Attach description to code tag and share Fountain objects\",\r\n\t\tparameters: {\r\n\t\t\ttype: \"object\",\r\n\t\t\tproperties: {\r\n\t\t\t\tname: { type: \"string\" },\r\n\t\t\t\ttype: { type:\"string\" , description:\"forge category\", enum:[\"code\",\"session\",\"share\",\"lode\"]},\r\n\t\t\t\tdescription: { type: \"string\" }\r\n\t\t\t},\r\n\t\t\trequired: [\"name\",\"type\",\"description\"]\r\n\t\t}\r\n\t}\r\n}];\r\n\r\n// fountain utility functions\r\n\r\n// Define the ranges for single-width characters (including some emojis and symbols)\r\nconst singleWidthRanges = [\r\n\t[0x269B], // ⚛ Atom symbol\r\n\t[0x1F3FB, 0x1F3FF], // Emoji modifiers\r\n\t[0x1F9B0, 0x1F9B3], // Skin tone modifiers\r\n\t[0x25FE, 0x25FF], // Geometric shapes\r\n];\r\n\r\n// here be dragons\r\n// emoji wide char groups may need cludge for abnormal plungers\r\n\r\nconst isDoubleWidth = (() => {\r\n\tconst ranges = [\r\n\t\t[0x1100, 0x115F],\r\n\t\t[0x2329, 0x232A],\r\n\t\t[0x2E80, 0x303E],\r\n\t\t[0x3040, 0xA4CF],\r\n\t\t[0xAC00, 0xD7A3],\r\n\t\t[0xF900, 0xFAFF],\r\n\t\t[0xFE10, 0xFE19],\r\n\t\t[0xFE30, 0xFE6F],\r\n\t\t[0xFF00, 0xFF60],\r\n\t\t[0xFFE0, 0xFFE6],\r\n\t\t[0x1F000, 0x1F02F],\r\n\t\t[0x1F0A0, 0x1F0FF],\r\n\t\t[0x1F100, 0x1F1FF],\r\n\t\t[0x1F300, 0x1F9FF],\r\n\t\t[0x20000, 0x2FFFD],\r\n\t\t[0x30000, 0x3FFFD]\r\n\t];\r\n\treturn cp =>\r\n\t\tranges.some(([s, e]) => cp >= s && cp <= e);\r\n})();\r\n\r\n// here be dragons - emoji widths based on userterminal may be required\r\n\r\nasync function fileLength(path) {\r\n\tconst stat=await Deno.stat(path);\r\n\treturn stat.size;\r\n}\r\n\r\nasync function sleep(ms) {\r\n\tawait new Promise(function(awake) {setTimeout(awake, ms);});\r\n}\r\n\r\nfunction unitString(value,precision=2,type){\r\n\tif (typeof value !== 'number' || isNaN(value)) return \"NaN\";\r\n\tconst units=[\"\",\"K\",\"M\",\"G\",\"T\"];\r\n\tconst abs=Math.abs(value);\r\n\tconst unit=(Math.log10(abs)/3)|0;\r\n\tif(unit>0){\r\n\t\tif(unit>4)unit=4;\r\n\t\tlet n=value / Math.pow(10, unit*3);\r\n\t\tconst digits=Math.max(1, String(Math.floor(n)).length);\r\n\t\tn=n.toFixed(Math.max(0, precision - digits));\r\n\t\treturn n+units[unit]+type;\r\n\t}\r\n\treturn String(value)+type;\r\n}\r\n\r\nfunction measure(o){\r\n\tconst value=(typeof o===\"string\")?o.length:JSON.stringify(o).length;\r\n\treturn unitString(value,4,\"B\");\r\n}\r\n\r\nlet outputBuffer:string[]=[];\r\nlet printBuffer=[];\r\nlet markdownBuffer=[];\r\n\r\nfunction print():void{\r\n\tconst args=arguments.length?Array.from(arguments):[];\r\n\tconst lines=args.join(\" \").split(\"\\n\");\r\n\tfor(const eachline of lines){\r\n\t\tconst line=eachline.trimEnd();\r\n\t\tprintBuffer.push({model:rohaModel,line});\r\n\t}\r\n}\r\n\r\nfunction toString(arg:unknown):string{\r\n\tif (typeof arg === 'object') {\r\n\t\treturn JSON.stringify(arg);\r\n\t}\r\n\treturn String(arg);\r\n}\r\n\r\n// takes both markdown and plain\r\n\r\nfunction echo(...args:any):void{\r\n\tconst lines=[];\r\n\tfor(const arg of args){\r\n\t\tconst line=toString(arg);\r\n\t\tlines.push(line.trim());\r\n\t}\r\n\tconst output=lines.join(\" \").trim();\r\n\tif(output.length){\r\n\t\toutputBuffer.push(output);\r\n\t}\r\n}\r\n\r\nfunction echoWarning(...args:any){\r\n\tconst lines=[];\r\n\tfor(const arg of args){\r\n\t\tconst line=toString(arg);\r\n\t\tlines.push(line);\r\n\t}\r\n\tconst text=ansiStyle(lines.join(\" \"),\"blink\",1);\r\n\toutputBuffer.push(text);\r\n}\r\n\r\n\r\nfunction echo_row(...cells:any):void{\r\n\tconst row = cells.map(String).join('|');\r\n\tmarkdownBuffer.push(\"|\"+row+\"|\");\r\n}\r\n\r\nfunction debugValue(title:string,value:unknown){\r\n\tif(roha.config.debugging){\r\n\t\tconst json=JSON.stringify(value);\r\n\t\techo(title,json);\r\n\t}else{\r\n\t\tif(roha.config.verbose){\r\n\t\t\techo(title);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nasync function logForge(lines:string,id:string){\r\n\tif(roha.config.logging){\r\n\t\tconst time=timestamp();\t//new Date().toISOString();\r\n\t\tconst list=[];\r\n\t\tfor(let line of lines.split(\"\\n\")){\r\n\t\t\tline=stripAnsi(line);\r\n\t\t\tline=time+\" [\"+id+\"] \"+line+\"\\n\";\r\n\t\t\tlist.push(line);\r\n\t\t}\r\n\t\tlet path=resolve(forgePath,\"forge.log\");\r\n\t\tawait Deno.writeTextFile(path,list.join(\"\\n\"),{append:true});\r\n\t}\r\n}\r\n\r\nasync function readFileNames(path,suffix){\r\n\tconst result=[];\r\n\ttry {\r\n\tfor await (const entry of Deno.readDir(path)) {\r\n\t\tif (entry.isFile && entry.name.endsWith(suffix)) {\r\n\t\t\tif(roha.config.verbose) echo(\"readDir\",path,entry);\r\n\t\t\tresult.push(entry.name);\r\n\t\t}\r\n\t}\r\n\t} catch (error) {\r\n\t\techo(\"Error reading directory:\", error);\r\n\t}\r\n\treturn result;\r\n}\r\n\r\nasync function flush() {\r\n\tconst delay=roha.config.slow ? slowMillis : 0;\r\n\tfor (const mutline of printBuffer) {\r\n\t\tconst mut=mutline.model;\r\n\t\tconst line=mutline.line;\r\n\t\tconsole.log(line);\r\n\t\tawait logForge(line,mut);\r\n\t\tawait sleep(delay)\r\n\t}\r\n\tprintBuffer=[];\r\n\r\n\tconst md=markdownBuffer.join(\"\\n\");\r\n\tif(md.length){\r\n\t\tif (roha.config.ansi) {\r\n\t\t\tconst ansi=mdToAnsi(md);\r\n\t\t\tconsole.log(ansi);\t\t//+\"🌟\");\r\n\t\t}else{\r\n\t\t\tif(md.length) console.log(md);\r\n\t\t}\r\n\t}\r\n\tmarkdownBuffer=[];\r\n\r\n\tfor (const output of outputBuffer) {\r\n\t\tconsole.log(output);\r\n\t\tconst lines=output.split(\"\\n\");\r\n\t\tfor(const line of lines){\r\n\t\t\tif(line.length){\r\n\t\t\t\tawait logForge(line,\"roha\");\r\n\t\t\t}\r\n\t\t}\r\n\t\tawait sleep(delay);\r\n\t}\r\n\toutputBuffer=[];\r\n}\r\n\r\nfunction wordWrap(text:string,cols:number=terminalColumns):string{\r\n\tconst result=[];\r\n\tlet pos=0;\r\n\twhile(pos<text.length){\r\n\t\tlet line=text.substring(pos,pos+cols);\r\n\t\tlet n=line.length;\r\n\t\tif(n==cols){\r\n\t\t\tlet i=line.lastIndexOf(\" \",n);\r\n\t\t\tif(i>0){\r\n\t\t\t\tline=line.substring(0,i);\r\n\t\t\t\tn=i+1;\r\n\t\t\t}\r\n\t\t}\r\n\t\tresult.push(line);\r\n\t\tpos+=n;\r\n\t}\r\n\treturn result.join(\"\\n\");\r\n}\r\n\r\nasync function listModels(config){\r\n\tlet url=config.url+\"/models\";\r\n\tlet response=await fetch(url);\r\n\tif(response.ok){\r\n\t\tconsole.log(await response.text());\r\n\t}else{\r\n\t\tconsole.error(response);\r\n\t}\r\n\treturn null;\r\n}\r\n\r\n// API support for gemini\r\n\r\n// https://ai.google.dev/gemini-api/docs/text-generation\r\n\r\nfunction geminiTools(payload){\r\n\tconst functions=[];\r\n\tfor(const tool of payload.tools){\r\n//\t\tgeminiTools(payload)\r\n//\t\techo(\"[GEMINI] tool\",tool);\r\n\t\tif(tool.type==\"function\"){\r\n\t\t\tconst f=tool.function;\r\n\t\t\tconst p=f.parameters;\r\n\t\t\tconst d={name:f.name,description:f.description,parameters:{type:p.type,properties:p.properties,required:p.required}};\r\n//\t\t\techo(\"[GEMINI] function\",d);\r\n\t\t\tfunctions.push(d);\r\n\t\t}\r\n\t}\r\n\treturn {functionDeclarations:functions};\r\n}\r\n\r\nfunction prepareGeminiContent(payload){\r\n\tconst debugging=roha.config.debugging;\r\n\tif(debugging) echo(\"[GEMINI] payload\",payload);\r\n\tconst contents=[];\r\n\tconst sysparts=[];\t// GenerateContentRequest systemInstruction content\r\n\tlet blob={};\r\n\tfor(const item of payload.messages){\r\n\t\tif(debugging) echo(\"[GEMINI] item\",item);\r\n\t\tconst text=item.content;\r\n\t\tif(debugging) echo(\"[GEMINI] text\",text);\r\n\t\tswitch(item.role){\r\n\t\t\tcase \"system\":\r\n\t\t\t\tsysparts.push({text});\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"assistant\":{\r\n\t\t\t\tif(item.tool_call_id){\r\n\t\t\t\t\t// todo: - geminifi the tool result\r\n\t\t\t\t\tif (debugging) echo(\"[GEMINI] assistant\",item.tool_call_id);\r\n\t\t\t\t\tconst ass={role:\"user\",parts:[{text}]}\r\n//\t\t\t\t\tcontents.push(ass);\r\n\t\t\t\t}else{\r\n\t\t\t\t\tconst ass={role:\"model\",parts:[{text}]}\r\n\t\t\t\t\tif (debugging) echo(\"[GEMINI] assistant\",ass,item);\r\n//\t\t\t\t\tcontents.push(ass);\r\n\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"user\":{\r\n\t\t\t\t\tif(debugging) echo(\"[GEMINI] prepare\",item);\r\n\t\t\t\t\tif(item.name==\"blob\"){\r\n\t\t\t\t\t\tblob=JSON.parse(text);\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// should this be title?\r\n\t\t\t\t\tif(item.name==\"image\"){\r\n\t\t\t\t\t\tconst mimeType=blob.type;\r\n\t\t\t\t\t\tconst data=text;\r\n\t\t\t\t\t\techo(\"[GEMINI] image\",mimeType);\r\n\t\t\t\t\t\tcontents.push({role:\"user\",parts:[{inlineData:{mimeType,data}}]});\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(item.content?.length){\r\n\t\t\t\t\t\tcontents.push({role:\"user\",parts:[{text:item.content}]});\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"tool\":{\r\n\t\t\t\t\tconst functionResponse={name:item.name,response:JSON.parse(text)};\r\n\t\t\t\t\tcontents.push({role:\"user\",parts:[{functionResponse}] });\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\r\n\t// TODO: enable disable tools\r\n\t// TODO: tools and toolsconfig support\r\n\r\n\tconst tools=payload.tools?geminiTools(payload):[];\r\n\r\n\t//system_instruction\r\n\r\n\tconst temperature=grokTemperature;\r\n\r\n\tconst request={\r\n\t\tmodel:payload.model,\r\n\t\tsystem_instruction:{parts:sysparts},\r\n\t\tgenerationConfig:{temperature},\r\n\t\tcontents,\r\n\t\ttools\r\n\t};\r\n\r\n\tif(debugging) echo(\"[GEMINI] request\",request);\r\n\r\n\treturn request;\r\n}\r\n\r\nlet geminiCallCount=0;\r\n\r\nasync function connectGoogle(account,config){\r\n\ttry{\r\n\t\tconst baseURL=config.url;\r\n\t\tconst apiKey=getEnv(config.env);\r\n\t\tif(!apiKey) return null;\r\n\t\tconst response=await fetch(baseURL+\"/models?key=\"+apiKey);\r\n\t\tif (!response.ok) {\r\n\t\t\tconsole.info(\"connectGoogle response\",response)\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\tconst models=await response.json();\r\n\t\tconst list=[];\r\n\t\t//specModel\r\n\t\tfor(const model of models.models){\r\n\t\t\tconst name=model.name+\"@\"+account;\r\n\t\t\tlist.push(name);\r\n//\t\t\techo(\"[GOOOGLE] released\",name);\r\n\t\t\tconst spec={id:model.name,object:\"model\",owner:\"owner\"}\r\n\t\t\tspecModel(spec,account);\r\n\t\t}\r\n\t\tmodelList.push(...list);\r\n\t\tconst genAI=new GoogleGenerativeAI(apiKey);\r\n\t\treturn {\r\n\t\t\tgenAI,\r\n\t\t\tapiKey,\r\n\t\t\tbaseURL,\r\n\t\t\tmodelList:list,\r\n\t\t\tmodels: {\r\n\t\t\t\tlist: async () => models, // Return cached models or fetch fresh\r\n\t\t\t},\r\n\t\t\tchat: {\r\n\t\t\t\tcompletions: {\r\n\t\t\t\t\tcreate: async (payload) => {\r\n//\t\t\t\t\t\tconfig: { systemInstruction: setup, maxOutputTokens: 500,temperature: 0.1, }\r\n\t\t\t\t\t\tconst model=genAI.getGenerativeModel({model:payload.model});\r\n\t\t\t\t\t\tconst request=prepareGeminiContent(payload);\r\n\t\t\t\t\t\t// TODO: hook up ,signal SingleRequestOptions parameter\r\n\t\t\t\t\t\t// if(roha.config.debugging) echo(\"[GEMINI] generateContent\",request);\r\n\t\t\t\t\t\tconst result=await model.generateContent(request);\r\n\t\t\t\t\t\tconst debugging=roha.config.debugging;\r\n\t\t\t\t\t\tif(debugging) echo(\"[GEMINI] result\",result);\r\n\t\t\t\t\t\tconst text=await result.response.text();\r\n\t\t\t\t\t\tconst usage=result.response.usageMetadata||{};\r\n\t\t\t\t\t\tconst choices = [];\r\n\t\t\t\t\t\tchoices.push({message:{content:text}});\r\n\t\t\t\t\t\tconst calls = result.response.functionCalls(); // Get Gemini's raw function calls\r\n\t\t\t\t\t\tif(calls){\r\n\t\t\t\t\t\t\tconst toolCalls = calls.map((call,index)=>({id:\"call_\"+(geminiCallCount++),type:\"function\",function:{name:call.name,arguments:JSON.stringify(call.args)}}));\r\n\t\t\t\t\t\t\tchoices[0].message.tool_calls=toolCalls;\r\n\t\t\t\t\t\t\techo(\"[GEMINI] toolCalls\",toolCalls);\r\n//\t\t\t\t\t\t\tfor(const call of toolCalls){\r\n//\t\t\t\t\t\t\t\techo(\"[GEMINI] toolCall\",call);\r\n//\t\t\t\t\t\t\t\tchoices.push({tool_calls:call});\r\n//\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tconst temperature=grokTemperature;\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\tmodel:payload.model,\r\n\t\t\t\t\t\t\ttemperature,\r\n\t\t\t\t\t\t\tchoices,\r\n\t\t\t\t\t\t\tusage:{\r\n\t\t\t\t\t\t\t\tprompt_tokens:usage.promptTokenCount,\r\n\t\t\t\t\t\t\t\tcompletion_tokens:usage.candidatesTokenCount+usage.thoughtsTokenCount,\r\n\t\t\t\t\t\t\t\ttotal_tokens:usage.totalTokenCount\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t},\r\n\t\t\t\t},\r\n\t\t\t},\r\n\t\t};\r\n\t} catch (error) {\r\n\t\tconsole.error(\"connectGoogle error:\",error.message);\r\n\t\treturn null;\r\n\t}\r\n}\r\n\r\n// API support for anthropic\r\n\r\n// TODO: test file API support needed to avoid rate limits on plain chat\r\n\r\nfunction anthropicSystem(payload){\r\n\tconst system=[];\r\n\tfor(const item of payload.messages){\r\n\t\tswitch(item.role){\r\n\t\t\tcase \"system\":\r\n\t\t\t\tsystem.push({type:\"text\",text:item.content});\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\treturn system;\r\n}\r\n\r\nconst anthropicStore:Record<string, string>={};\r\nasync function anthropicFile(sdk,blob){\t//sdk=anthropic.beta\r\n\tconsole.log(\"[CLAUDE] file blob\",blob);\r\n\tconst hash=await hashFile(blob.path);\r\n\tif(hash in anthropicStore) return anthropicStore[hash];\r\n\tconst fileContent = await Deno.readFile(blob.path);\r\n\tconst name=blob.path;\r\n\tconst file = await toFile(fileContent,name,{type:blob.type});\r\n\tconst result = await sdk.beta.files.upload({file,betas:['files-api-2025-04-14']});\r\n\tanthropicStore[hash]=result.id;\r\n\treturn result.id;\r\n}\r\nasync function anthropicMessages(sdk,payload){\r\n\tconst messages=[];\r\n\tlet blob={};\r\n\tfor(const item of payload.messages){\r\n//\t\tconsole.log(\"[CLAUDE] item \",item);\r\n\t\tswitch(item.role){\r\n\t\t\tcase \"user\":{\r\n\t\t\t\t\tconst name=item.name;\r\n\t\t\t\t\tif(name==\"blob\"){\r\n\t\t\t\t\t\tblob=JSON.parse(item.content);\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(name==\"image\" || name==\"content\"){\r\n\t\t\t\t\t\tconst id=await anthropicFile(sdk,blob);\r\n//\t\t\t\t\t\tconsole.log(\"[CLAUDE] file id\",id);\r\n\t\t\t\t\t\tconst fileref=\"file reference \"+id;\r\n\t\t\t\t\t\tconst content=item.name?item.name+\": \"+fileref:fileref;\r\n\t\t\t\t\t\tmessages.push({role:\"user\",content});\r\n\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\t// item role name type\r\n//\t\t\t\t\t\tmessages.push({role:\"user\",name:item.name,content:item.content});\r\n\t\t\t\t\t\tconst content=item.name?item.name+\": \"+item.content:item.content;\r\n\t\t\t\t\t\tmessages.push({role:\"user\",content:content});\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"assistant\":\r\n\t\t\t\tif(item.tool_calls){\r\n\t\t\t\t\t// TODO: test me\r\n\t\t\t\t\tmessages.push({role:item.role,content:item.content,tool_calls:item.tool_calls});\r\n\t\t\t\t}else{\r\n//\t\t\t\t\tmessages.push({role:\"assistant\",name:item.name,content:item.content});\r\n\t\t\t\t\tconst content=item.name?item.name+\": \"+item.content:item.content;\r\n\t\t\t\t\tmessages.push({role:\"assistant\",content});\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\treturn messages;\r\n}\r\n\r\nfunction anthropicTools(payload){\r\n\tconst tools=[];\r\n\tfor(const tool of payload.tools){\r\n\t\tconst f=tool.function;\r\n\t\tconst s=f.parameters;\r\n\t\tconst d={name:f.name,description:f.description,input_schema:s};\r\n\t\ttools.push(d);\r\n\t}\r\n\treturn tools;\r\n}\r\n\r\nasync function connectAnthropic(account,config){\r\n\ttry{\r\n\t\tconst baseURL=config.url;\r\n\t\tconst apiKey=getEnv(config.env);\r\n\t\tif(!apiKey) return null;\r\n\t\tconst headers={\r\n\t\t\t\"x-api-key\":apiKey,\r\n\t\t\t\"Content-Type\": \"application/json\",\r\n\t\t\t\"anthropic-version\": \"2023-06-01\"\r\n\t\t};\r\n\t\tconst response = await fetch(baseURL+\"/models\",{ method: \"GET\", headers });\r\n\t\tif (!response.ok) {\r\n\t\t\tconsole.info(\"connectAnthropic response\",response)\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\tconst data=await response.json();\r\n\t\tconst list=[];\r\n\t\tfor(const model of data.data){\r\n\t\t\t//{\"type\":\"model\",\"id\":\"claude-opus-4-20250514\",\"display_name\":\"Claude Opus 4\",\"created_at\":\"2025-05-22T00:00:00Z\"}\r\n\t\t\tif(model.type==\"model\"){\r\n\t\t\t\tconst name=model.id+\"@\"+account;\r\n\t\t\t\tlist.push(name);\r\n\t\t\t\tconst t=unixTime(model.created_at);\r\n\t\t\t\tconst spec={id:model.id,object:\"model\",created:t,owner:\"owner\"}\r\n\t\t\t\tspecModel(spec,account);\r\n\t\t\t}else{\r\n\t\t\t\techo(\"[CLAUDE] unexpected model type\",model);\r\n\t\t\t}\r\n\t\t}\r\n\t\tmodelList.push(...list);\r\n\t\tconst sdk=new Anthropic({apiKey});\r\n\r\n\t\treturn {\r\n\t\t\tsdk,\r\n\t\t\tapiKey,\r\n\t\t\tbaseURL,\r\n\t\t\tmodelList:list,\r\n\t\t\tmodels: {\r\n\t\t\t\tlist: async () => models, // Return cached models or fetch fresh\r\n\t\t\t},\r\n\t\t\tchat: {\r\n\t\t\t\tcompletions: {\r\n\t\t\t\t\tcreate: async (payload) => {\r\n\t\t\t\t\t\tconst model=payload.model;\r\n\t\t\t\t\t\tconst system=anthropicSystem(payload);\r\n//\t\t\t\t\t\techo(\"[CLAUDE] \",payload);\r\n\t\t\t\t\t\tconst messages=await anthropicMessages(sdk,payload);\r\n//\t\t\t\t\t\techo(\"[CLAUDE] \",messages);\r\n\t\t\t\t\t\tconst temperature=grokTemperature;\r\n\t\t\t\t\t\t// TODO: anthropic max_tokens\r\n\t\t\t\t\t\tconst max_tokens=2048;//was 1024\r\n\t\t\t\t\t\tconst request={model,max_tokens,temperature,system,messages};\r\n\t\t\t\t\t\tif (payload.tools) {\r\n\t\t\t\t\t\t\trequest.tools=anthropicTools(payload);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tconst reply = await sdk.messages.create(request);\r\n\t\t\t\t\t\tconst usage={\r\n\t\t\t\t\t\t\tprompt_tokens:reply.usage.input_tokens,\r\n\t\t\t\t\t\t\tcompletion_tokens:reply.usage.output_tokens\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tconst content=reply.content[0].text||\"\";\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\tmodel,\r\n\t\t\t\t\t\t\tchoices:[\r\n\t\t\t\t\t\t\t\t{message:{content}}\r\n\t\t\t\t\t\t\t],\r\n\t\t\t\t\t\t\tusage\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t} catch (error) {\r\n\t\tconsole.error(\"connectAnthropic error:\",error.message);\r\n\t\treturn null;\r\n\t}\r\n}\r\n\r\n// API support for cohere\r\n\r\nfunction getDottedDate(name:string):number{\r\n\tconst n=name.length;\r\n\tconst year=parseInt(name.substring(n-4,n));\r\n\tconst month=parseInt(name.substring(n-7,n-5));\r\n//\techo(\"[GETDATE]\",year,month);\r\n\tconst date=new Date(Date.UTC(year, month - 1, 1));\r\n\treturn Math.floor(date.getTime()/1000);\r\n}\r\n\r\nfunction getDate(yearmonthday:string):number{\r\n\tconst date=new Date(yearmonthday+\"T00:00:00Z\");\r\n\tconst time=Math.floor(date.getTime()/1000);\r\n//\techo(\"[GETDATE]\",time);\r\n\treturn time;\r\n}\r\n\r\n\r\nfunction specCohereModel(model,account){\r\n\tif(roha.config.debugging) echo(\"[cohere] spec\",model);\r\n\tconst name=model.name+\"@\"+account;\r\n\tconst exists=name in roha.mut;\r\n\tconst info=exists?roha.mut[name]:{name,notes:[],errors:[],relays:0,cost:0};\r\n\tinfo.id=model.name;\r\n\tinfo.object=\"model\";\r\n\tconst modelname=model.name;\r\n\tconst dated=(modelname.endsWith(2024)||modelname.endsWith(2025));\r\n\tconst created=(dated)?getDottedDate(modelname):\"created\";\r\n//\techo(\"COHERE\",created);\r\n\tinfo.created=created;\r\n\tinfo.owner=\"owner\";\r\n\tif (!info.notes) info.notes=[];\r\n\tif (!info.errors) info.errors=[];\r\n//\techo(\"mut\",name,info);\r\n\troha.mut[name]=info;\r\n}\r\n\r\nfunction prepareCohereRequest(payload){\r\n\tconst history=[];\r\n\tlet blob={};\r\n\tfor(const item of payload.messages){\r\n\t\tconst content=item.content;\r\n\t\tswitch(item.role){\r\n\t\t\tcase \"system\":\r\n\t\t\t\thistory.push({role:\"system\",content});\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"user\":\r\n\t\t\t\tif(item.name==\"blob\"){\r\n\t\t\t\t\tblob=JSON.parse(content);\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\tif(item.name==\"image\"){\r\n\t\t\t\t\tconst image_url={url:\"https://jpeg.org/images/jpeg-home.jpg\"}\r\n\t\t\t\t\thistory.push({role:\"user\",content:[{type:\"image_url\",image_url}]});\r\n\t\t\t\t\tcontinue;\r\n//\t\t\t\t\tconst mediatype=blob.type;\r\n//\t\t\t\t\tconst image_url={url:\"data:\"+mediatype+\";base64,\"+content};\r\n// [<media-type>][;base64],<data>\"\r\n// TODO: url=data:[<media-type>][;base64],<data>\r\n//\t\t\t\t\thistory.push({role:\"user\",content:[{type:\"image\",data}]});\r\n\t\t\t\t}\r\n\t\t\t\thistory.push({role:\"user\",content});\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"assistant\":\r\n\t\t\t\thistory.push({role:\"assistant\",content});\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\tconst temperature=grokTemperature;\r\n\tconst request={\r\n\t\tmodel:payload.model,\r\n\t\ttemperature,\r\n\t\tstream:false,\r\n\t\tmessages:history\r\n\t};\r\n\treturn request;\r\n}\r\n\r\nasync function connectCohere(account,config) {\r\n\ttry{\r\n\t\tconst baseURL=config.url;\r\n\t\tconst apiKey=getEnv(config.env);\r\n\t\tif(!apiKey) return null;\r\n\t\tconst headers={\r\n\t\t\t\"Authorization\":\"Bearer \"+apiKey,\r\n\t\t\t\"Content-Type\":\"application/json\",\r\n\t\t\t\"Accept\":\"application/json\",\r\n\t\t\t\"X-Client-Name\": \"slopfountain.ts\"\r\n\t\t};\r\n\t\tconst response=await fetch(baseURL+\"/models\",{method:\"GET\",headers});\r\n\t\tif (!response.ok) return null;\r\n\t\tconst reply=await response.json();\r\n//\t\techo(reply.models);\r\n\t\tconst list=[];\r\n\t\tfor (const model of reply.models) {\r\n\t\t\tconst name=model.name+\"@\"+account;\r\n\t\t\tlist.push(name);\r\n\t\t\tspecCohereModel(model,account);\r\n\t\t}\r\n\t\tlist.sort();\r\n\t\tmodelList=modelList.concat(list);\r\n\t\treturn {\r\n\t\t\tapiKey,\r\n\t\t\theaders,\r\n\t\t\tbaseURL,\r\n\t\t\tmodelList:list,\r\n\t\t\tmodels: {\r\n\t\t\t\tlist: async () => models, // Return cached models or fetch fresh\r\n\t\t\t},\r\n\t\t\tchat: {\r\n\t\t\t\tcompletions: {\r\n\t\t\t\t\tcreate: async (payload) => {\r\n\t\t\t\t\t\tconst model=payload.model;\r\n\t\t\t\t\t\tconst content=prepareCohereRequest(payload);\r\n\t\t\t\t\t\tconst url=baseURL+\"/chat\";\r\n\t\t\t\t\t\tconst usage={prompt_tokens:0,completion_tokens:0,total_tokens:0};\r\n\t\t\t\t\t\tif(roha.config.debugging){\r\n\t\t\t\t\t\t\techo(\"[cohere] url\",url);\r\n\t\t\t\t\t\t\t//echo(\"[cohere] content\",content);\r\n\t\t\t\t\t\t\t//echo(\"[cohere] usage\",usage);\r\n\t\t\t\t\t\t\techo(\"[cohere] headers\",headers);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\ttry{\r\n\t\t\t\t\t\t\tconst response=await fetch(url,{method:\"POST\",headers,body:JSON.stringify(content)});\r\n\t\t\t\t\t\t\tif(roha.config.debugging){\r\n\t\t\t\t\t\t\t\techo(\"[cohere] response.ok\",response.ok);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif (response.ok) {\r\n\t\t\t\t\t\t\t\t//[cohere] json\r\n\t\t\t\t\t\t\t\t// {\"id\":\"5b7e6d03-d348-40b8-8178-a60ad55d792e\",\"message\":{\"role\":\"assistant\",\"content\":[{\"type\":\"text\",\"text\":\"Hello! How can I assist you today?\"}]},\r\n\t\t\t\t\t\t\t\t// \"finish_reason\":\"COMPLETE\",\"usage\":{\"billed_units\":{\"input_tokens\":1,\"output_tokens\":9},\"tokens\":{\"input_tokens\":496,\"output_tokens\":11}}}\r\n\t\t\t\t\t\t\t\tconst reply=[];\r\n\t\t\t\t\t\t\t\tconst json=await response.json();\r\n\t\t\t\t\t\t\t\tconst role=json.message.role;\r\n\t\t\t\t\t\t\t\tfor(const item of json.message.content){\r\n\t\t\t\t\t\t\t\t\tif(item.type==\"text\") reply.push(item.text);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tconst text=reply.join(\"\\n\");\r\n\t\t\t\t\t\t\t\t// echo(\"[cohere]\",text)\r\n\t\t\t\t\t\t\t\tconst tokens=json.usage.tokens;\r\n\t\t\t\t\t\t\t\tconst total_tokens=tokens.input_tokens+tokens.output_tokens;\r\n\t\t\t\t\t\t\t\tconst usage={prompt_tokens:tokens.input_tokens,completion_tokens:tokens.output_tokens,total_tokens};\r\n\t\t\t\t\t\t\t\treturn {model,choices:[{message:{content:text}}],usage};\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\techo(\"[cohere] status\",response.status,response.statusText);\r\n\t\t\t\t\t\t\tif(roha.config.debugging)\r\n\t\t\t\t\t\t\t\techo(\"[cohere] content\",content);\r\n\t\t\t\t\t\t}catch(e){\r\n\t\t\t\t\t\t\techo(\"[cohere] exception\",e.message);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn {model,choices:[],usage};\r\n\t\t\t\t\t},\r\n\t\t\t\t},\r\n\t\t\t},\r\n\r\n\t\t}\r\n\t} catch (error) {\r\n\t\techo(`Account ${account} fetch error: ${error.message}`);\r\n\t\treturn null;\r\n\t}\r\n\r\n}\r\n\r\n// API support for deepseek\r\n\r\nasync function connectDeepSeek(account,config) {\r\n\ttry{\r\n\t\tconst baseURL=config.url;\r\n\t\tconst apiKey=getEnv(config.env);\r\n\t\tif(!apiKey) return null;\r\n\t\tconst headers={Authorization:\"Bearer \"+apiKey,\"Content-Type\":\"application/json\"};\r\n\t\tconst response=await fetch(baseURL+\"/models\",{method:\"GET\",headers});\r\n\t\tif (!response.ok) return null;\r\n\t\tconst models=await response.json();\r\n\t\tconst list=[];\r\n\t\tfor (const model of models.data) {\r\n\t\t\techo(\"[DEEPSEEK]\",model);\r\n\t\t\tconst name=model.id+\"@\"+account;\r\n\t\t\tlist.push(name);\r\n// dont do this\tif(verbose) echo(\"model - \",JSON.stringify(model,null,\"\\t\"));\r\n\t\t\tspecModel(model,account);\r\n\t\t}\r\n\t\tlist.sort();\r\n\t\tmodelList=modelList.concat(list);\r\n\t//\techo(\"connected DeepSeek\",list);\r\n\t\treturn {\r\n\t\t\tapiKey,\r\n\t\t\tbaseURL,\r\n\t\t\tmodelList:list,\r\n\t\t\tmodels: {\r\n\t\t\t\tlist: async () => models, // Return cached models or fetch fresh\r\n\t\t\t},\r\n\t\t\tchat: {\r\n\t\t\t\tcompletions: {\r\n\t\t\t\t\tcreate: async (payload) => {\r\n\t\t\t\t\t\tconst url=`${baseURL}/chat/completions`;\r\n\t\t\t\t\t\tconst response=await fetch(url, {\r\n\t\t\t\t\t\t\tmethod: \"POST\",\r\n\t\t\t\t\t\t\theaders,\r\n\t\t\t\t\t\t\tbody: JSON.stringify(payload),\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\tif (!response.ok) {\r\n\t\t\t\t\t\t\tconsole.log(\"[DeepSeek] not ok\",response.status,response.statusText);\r\n\t\t\t\t\t\t\tthrow new Error(\"DeepSeek API error \"+response.statusText);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn await response.json();\r\n\t\t\t\t\t},\r\n\t\t\t\t},\r\n\t\t\t},\r\n\t\t};\r\n\t} catch (error) {\r\n\t\techo(`Account ${account} fetch error: ${error.message}`);\r\n\t\treturn null;\r\n\t}\r\n}\r\n\r\nasync function connectOpenAI(account,config) {\r\n\ttry{\r\n\t\tconst apiKey=getEnv(config.env);\r\n\t\tconst endpoint=new OpenAI({ apiKey, baseURL: config.url });\r\n\t\tif(roha.config.debugging){\r\n\t\t\tdebugValue(\"endpoint\",endpoint)\r\n/*\r\n\t\t\tfor(const [key, value] of Object.entries(endpoint)){\r\n\t\t\t\tlet content=String(value);\r\n\t\t\t\tcontent=content.replace(/\\n/g, \" \");\r\n\t\t\t\tcontent=content.substring(0,30);\r\n\t\t\t\tif(key!=\"apiKey\") echo(\"[OPENAI] endpoint:\"+key+\":\"+content);\r\n\t\t\t}\r\n*/\r\n\t\t}\r\n//\t\tconst models2=await listModels(config);\r\n\t\tconst models=await endpoint.models.list();\r\n\t\tconst list=[];\r\n\t\tfor (const model of models.data) {\r\n\t\t\tconst name=model.id+\"@\"+account;\r\n\t\t\tlist.push(name);\r\n// dont do this\tif(verbose) echo(\"model - \",JSON.stringify(model,null,\"\\t\"));\r\n\t\t\tspecModel(model,account);\r\n\t\t}\r\n\t\tlist.sort();\r\n\t\tendpoint.modelList=list;\r\n\t\tmodelList=modelList.concat(list);\r\n\t\treturn endpoint;\r\n\t}catch(error){\r\n\t\t// Error: 429 \"Your team ^&*^&^&*^&*\r\n\t\t// has either used all available credits or reached its monthly spending limit.\r\n\t\t// To continue making API requests, please purchase more credits or raise your spending limit.\"\r\n\t\tif(error.status==429){\r\n\t\t\techo(\"Account Credit Error, please topup.\");\r\n\t\t}else{\r\n\t\t\techo(JSON.stringify(error));\r\n\t\t}\r\n\t}\r\n}\r\n\r\nasync function connectAccount(account) {\r\n\tconst config=modelAccounts[account];\r\n\tif (!config) return null;\r\n\tconst api= config.api;\r\n\tswitch(api){\r\n\t\tcase \"OpenAI\":\r\n\t\t\treturn await connectOpenAI(account,config);\r\n\t\tcase \"DeepSeek\":\r\n\t\t\treturn await connectDeepSeek(account,config);\r\n\t\tcase \"Google\":\r\n\t\t\treturn await connectGoogle(account,config);\r\n\t\tcase \"Anthropic\":\r\n\t\t\treturn await connectAnthropic(account,config);\r\n\t\tcase \"Cohere\":\r\n\t\t\treturn await connectCohere(account,config);\r\n\t}\r\n\treturn null;\r\n}\r\n\r\nfunction specAccount(account){\r\n\tconst config=modelAccounts[account];\r\n\tconst endpoint=rohaEndpoint[account];\r\n\tconst models=endpoint.models||[];\r\n\tif(!(account in roha.lode)){\r\n\t\troha.lode[account]={name:account,url:endpoint.baseURL,env:config.env,credit:0};\r\n\t}\r\n\tif(roha.config.debugging){\r\n\t\tconst lode=roha.lode[account];\r\n\t\tif(roha.config.verbose) echo(\"[FOUNTAIN] specAccount\",account,lode);\r\n\t}\r\n}\r\n\r\nfunction specModel(model,account){\r\n\tconst name=model.id+\"@\"+account;\r\n\tconst exists=name in roha.mut;\r\n\tconst spec=(name in modelSpecs)?modelSpecs[name]:null;\r\n\tconst created=(spec && spec.released)?(getDate(spec.released)):model.created;\r\n\tconst info=exists?roha.mut[name]:{name,notes:[],errors:[],relays:0,cost:0};\r\n\tinfo.id=model.id;\r\n\tinfo.object=model.object;\r\n\tinfo.created=created;\r\n\tinfo.owner=model.owned_by;\r\n//\techo(\"specModel\",name,JSON.stringify(model));\r\n\tif (!info.notes) info.notes=[];\r\n\tif (!info.errors) info.errors=[];\r\n//\techo(\"[MUT]\",name,info);\r\n\troha.mut[name]=info;\r\n}\r\n\r\nasync function aboutModel(modelname){\r\n\tconst mut=mutName(modelname);\r\n\tconst info=(modelname in modelSpecs)?modelSpecs[modelname]:null;\r\n\tconst rate=info?info.pricing||[]:[];\r\n\tconst limit=info?info.maxprompt||0:0;\r\n\tconst id=(info?info.id:0)||0;\r\n\tconst strict=info?info.strict||false:false;\r\n\tconst multi=info?info.multi||false:false;\r\n\tconst inline=info?info.inline||false:false;\r\n\tconst modelProvider=modelname.split(\"@\");\r\n\tconst provider=modelProvider[1];\r\n\tconst account=modelAccounts[provider];\r\n\tconst emoji=account.emoji||\"\";\r\n\tconst lode=roha.lode[provider];\r\n\tconst balance=(lode&&lode.credit)?price(lode.credit):\"$-\";\r\n\tif(roha.config.verbose){\r\n\t\techo(\"model:\",{id,mut,emoji,rate,limit,modelname,balance,strict,multi,inline});\r\n\t}else{\r\n\t\techo(\"model:\",{mut,emoji,rate,limit,balance,modelname});\r\n\t}\r\n\tif(roha.config.verbose && info){\r\n\t\tif(info.purpose)echo(\"purpose:\",info.purpose);\r\n\t\tif(info.press)echo(\"press:\",info.press);\r\n\t\tif(info.reality)echo(\"reality:\",info.reality);\r\n\t}\r\n\tawait writeForge();\r\n}\r\n\r\n//DeepSeek-R1-Distill-Llama-70B\r\n//Meta-Llama-3.1-8B-Instruct\r\n//-experimental -Instruct\r\nfunction mutName(modelname:string){\r\n\tconst modelAccount=modelname.split(\"@\");\r\n\tconst path=modelAccount[0];\r\n\tconst names=path.split(\"/\");\r\n\tlet name:string=names.pop()||\"\";\r\n\tname=name.replace(\"-R1-Distill-\",\"-\");\r\n\tname=name.replace(\"Meta-Llama-\",\"Llama\");\r\n\tname=name.replace(\"-experimental\",\"#\");\r\n\tname=name.replace(\"-Instruct\",\"\");\r\n\tname=name.replace(\"-instruct\",\"\");\r\n\tname=name.replace(\"-generate\",\"\");\r\n\tconst namebits=name.split(\"-\");\r\n\tconst muts=namebits.slice(0,3);\r\n\tconst bit=namebits[3]||\"0\";\r\n\tif (isNaN(parseFloat(bit))) muts.push(bit);\r\n\treturn muts.join(\"-\");\r\n}\r\n\r\nasync function resetModel(modelname:string){\r\n\tconst modelAccount=modelname.split(\"@\");\r\n\tconst path=modelAccount[0];\r\n\tconst provider=modelAccount[1];\r\n\tconst account=modelAccounts[provider];\r\n\tif(!account){\r\n\t\techo(\"[reset] account not found\",modelname);\r\n\t\treturn;\r\n\t}\r\n\tgrokModel=modelname;\r\n\tgrokAccount=account;\r\n\tconst mut=mutName(modelname);\r\n\trohaModel=mut;\r\n\tgrokFunctions=true;\r\n\tconst content=mutsInclude+mut;\r\n\trohaHistory.push({role:\"system\",title:userdomain,content});\r\n\tawait aboutModel(modelname);\r\n}\r\n\r\nfunction dropShares(){\r\n\tlet dirty=false;\r\n\tfor(const item of rohaHistory){\r\n\t\tif(item.role===\"user\" && (item.name===\"content\" || item.name===\"image\")){\r\n\t\t\titem.name=\"fountain\";\r\n\t\t\titem.content=\"dropped share\";\r\n\t\t\tdirty=true;\r\n\t\t}\r\n\t}\r\n\tif(dirty)echo(\"content removed from history\");\r\n\tif(rohaShares.length){\r\n\t\trohaShares=[];\r\n\t\techo(\"all shares dropped\");\r\n\t}\r\n\tif(roha.config.commitShares) echo(\"With commitShares enabled consider /reset.\")\r\n}\r\n\r\nfunction listShare(){\r\n\tconst list=[];\r\n\tlet count=0;\r\n\tconst sorted=roha.sharedFiles.slice();\r\n\tsorted.sort((a, b) => b.size - a.size);\r\n\tfor (const share of sorted) {\r\n\t\tconst shared=(rohaShares.includes(share.path))?\"🔗\":\"\";\r\n\t\tconst tags=\"[ \"+rohaUser+\" \"+share.tag+\"]\";\t//+rohaTitle\r\n\t\tconst detail=(share.description)?share.description:\"\";\r\n\t\techo((count++),share.path,share.size,shared,tags,detail);\r\n\t\tlist.push(share.id);\r\n\t}\r\n\tshareList=list;\r\n}\r\n\r\nasync function listSaves(){\r\n\tconst saves=roha.saves||[];\r\n\tfor(let i=0;i<saves.length;i++){\r\n\t\tconst path=\"forge/\"+saves[i];\r\n\t\tconst length=await fileLength(path)||\"-\";\r\n\t\techo(i,path,length);\r\n\t}\r\n}\r\n\r\nasync function saveHistory(name) {\r\n\ttry {\r\n\t\tconst timestamp=Math.floor(Date.now()/1000).toString(16);\r\n\t\tconst filename=(name||\"transmission-\"+timestamp)+\".json\";\r\n\t\tconst filePath=resolve(forgePath,filename);\r\n\t\tconst line=\"Saved session \"+filename+\".\";\r\n//\t\trohaHistory.push({role:\"system\",title:\"Fountain History Saved\",content:line});\r\n\t\trohaHistory.push({role:\"system\",title:\"saveHistory\",content:line});\r\n\t\tawait Deno.writeTextFile(filePath,JSON.stringify(rohaHistory,null,\"\\t\"));\r\n\t\techo(line);\r\n\t\troha.saves.push(filename);\r\n\t\tawait writeForge();\r\n\t} catch (error) {\r\n\t\techo(\"[FORGE] History save error\",error.message);\r\n\t}\r\n}\r\n\r\nasync function loadHistory(filename){\r\n\tlet history;\r\n\ttry {\r\n\t\tconst fileContent=await Deno.readTextFile(filename);\r\n\t\thistory=JSON.parse(fileContent);\r\n\t\techo(\"History restored from\",filename);\r\n\t} catch (error) {\r\n//\t\tconsole.error(\"Error restoring history:\", error.message);\r\n\t\techo(\"[FORGE] loadHistory error\",error.message);\r\n\t\tresetHistory()\r\n\t}\r\n\treturn history;\r\n}\r\n\r\n\r\nfunction stripAnsi(text:string) {\r\n\treturn text.replace(/\\x1B\\[\\d+(;\\d+)*[mK]/g, \"\");\r\n}\r\n\r\nfunction ansiStyle(text:string, style:string=\"bold\", colorIndex:number=-1) {\r\n\tif (!roha.config.ansi) return text;\r\n\tlet formatted=text;\r\n\tswitch (style.toLowerCase()) {\r\n\t\tcase \"bold\": formatted=\"\\x1b[1m\" + formatted + \"\\x1b[0m\"; break;\r\n\t\tcase \"dim\": formatted=\"\\x1b[2m\" + formatted + \"\\x1b[0m\"; break;\r\n\t\tcase \"italic\": formatted=\"\\x1b[3m\" + formatted + \"\\x1b[0m\"; break;\r\n\t\tcase \"underline\": formatted=\"\\x1b[4m\" + formatted + \"\\x1b[0m\"; break;\r\n\t\tcase \"blink1\": formatted=\"\\x1b[5m\" + formatted + \"\\x1b[0m\"; break;\r\n\t\tcase \"blink2\": formatted=\"\\x1b[6m\" + formatted + \"\\x1b[0m\"; break;\r\n\t\tcase \"reverse\": formatted=\"\\x1b[7m\" + formatted + \"\\x1b[0m\"; break;\r\n\t\tcase \"hidden\": formatted=\"\\x1b[8m\" + formatted + \"\\x1b[0m\"; break;\r\n\t\tcase \"strikethrough\": formatted=\"\\x1b[9m\"+formatted + \"\\x1b[0m\"; break;\r\n\t}\r\n\tif (!Deno.noColor && colorIndex !== null && colorIndex >= 0 && colorIndex < AnsiColors.length) {\r\n\t\tformatted=AnsiColors[colorIndex] + formatted + \"\\x1b[0m\";\r\n\t}\r\n\treturn formatted;\r\n}\r\n\r\nconst CodeTitle=AnsiTealBG+AnsiVividOrange;\r\nconst CodeBlock=AnsiGreenBG+AnsiWhite;\r\nconst ReplyBlock=AnsiGreyBG;\r\n\r\nconst StatusBlock=AnsiGreyBG;\r\n\r\nconst saveCursor=new Uint8Array([27,91,115]);\r\nconst restoreCursor=new Uint8Array([27,91,117]);\r\n\r\nconst homeCursor=new Uint8Array([27, 91, 72]);\r\nconst disableScroll=new Uint8Array([27, 91, 55, 59, 49, 59, 114]);\r\nconst restoreScroll=new Uint8Array([27, 91, 114]);\r\n\r\n\r\n// box drawing code\r\n\r\nconst TopLeft=0;\r\nconst TopRight=1;\r\nconst BottomLeft=2;\r\nconst BottomRight=3;\r\nconst Horizontal=4;\r\nconst HorizontalDown=5;\r\nconst HorizontalUp=6;\r\nconst Vertical=7;\r\nconst VerticalLeft=8;\r\nconst VerticalRight=9;\r\nconst Cross=10;\r\n\r\nfunction boxTop(widths){\r\n\tconst box=boxChars[0];\r\n\tconst h=box.charAt(Horizontal);\r\n\tconst hd=box.charAt(HorizontalDown);\r\n\tconst tl=box.charAt(TopLeft);\r\n\tconst tr=box.charAt(TopRight);\r\n\tconst bits=[];\r\n\tfor(const wid of widths){\r\n\t\tconst n=wid.length;\r\n\t\tbits.push(h.repeat(n));\r\n\t}\r\n\treturn tl+bits.join(hd)+tr;\r\n}\r\n\r\n// dash: \"---- ---- ---- ----\"\r\n// array: [1,2,0.3]\r\n// result: 1.00 2.00 0.30\r\nfunction dashString(dash,array){\r\n\tconst dashes=dash.split(\" \");\r\n\treturn array.map((v, i) => {\r\n\t\tconst w = dashes[i]?.length ?? 1;\r\n\t\tconst ch = ['-', '·'][i % 2] || '-'; // simple pattern; extend as needed\r\n\t\tconst n  = Math.round(v * w);\r\n\t\treturn ch.repeat(Math.max(0, n));\r\n\t});\r\n}\r\n\r\nfunction boxCells(widths,cells){\r\n\tconst box=boxChars[0];\r\n\tconst v=box.charAt(Vertical);\r\n\tconst bits=[];\r\n\tfor(let i=0;i<widths.length;i++){\r\n\t\tconst w=widths[i].length;\r\n\t\tconst c=cells[i];\r\n\t\tconst value=(Array.isArray(c))?dashString(widths[i],c):(c||\"\");\r\n// todo: clip string for tables or go multi line cells?\r\n\t\tconst indent=(w>2)?\" \":\"\";\r\n\t\tconst cell=indent+value;\r\n\t\tconst wide=stringWidth(cell);\r\n\t\tconst pads=w-wide;\r\n\t\tconst padding=(pads>0)?\" \".repeat(pads):\"\";\r\n\t\tbits.push(cell+padding);\r\n\t}\r\n\treturn v+bits.join(v)+v;\r\n}\r\n\r\nfunction boxSplit(widths){\r\n\tconst box=boxChars[0];\r\n\tconst h=box.charAt(Horizontal);\r\n\tconst x=box.charAt(Cross);\r\n\tconst vr=box.charAt(VerticalRight);\r\n\tconst vl=box.charAt(VerticalLeft);\r\n\tconst bits=[];\r\n\tfor(let i=0;i<widths.length;i++){\r\n\t\tconst w=widths[i].length;\r\n\t\tbits.push(h.repeat(w));\r\n\t}\r\n\treturn vr+bits.join(x)+vl;\r\n}\r\n\r\nfunction boxBottom(widths){\r\n\tconst box=boxChars[0];\r\n\tconst h=box.charAt(Horizontal);\r\n\tconst hu=box.charAt(HorizontalUp);\r\n\tconst bl=box.charAt(BottomLeft);\r\n\tconst br=box.charAt(BottomRight);\r\n\tconst bits=[];\r\n\tfor(const wid of widths){\r\n\t\tconst n=wid.length;\r\n\t\tbits.push(h.repeat(n));\r\n\t}\r\n\treturn bl+bits.join(hu)+br;\r\n}\r\n\r\nconst rohaPrompt=\">\";\r\nlet colorCycle=0;\r\n\r\n// warning - do not call echo from here\r\n\r\nfunction mdToAnsi(md) {\r\n\tconst broken=roha.config.broken;\r\n\tconst lines=md.split(\"\\n\");\r\n\tlet inCode=false;\r\n\tlet inTable=false;\r\n\tlet headings=[];\r\n\tlet widths=[];\r\n\tconst result=broken?[ReplyBlock]:[];\r\n\tlet poplast=false;\r\n\tfor (let line of lines) {\r\n\t\tline=line.trimEnd();\r\n\t\tconst trim=line.trim();\r\n\t\tpoplast=line.length==0;\r\n\t\tif (trim.startsWith(\"```\")) {\r\n\t\t\tinCode=!inCode;\r\n\t\t\tif(inCode){\r\n\t\t\t\tconst codeType=trim.substring(3).trim();\r\n\t\t\t\tresult.push(CodeBlock);\r\n\t\t\t\tif(roha.config.debugging&&codeType) print(\"inCode codetype:\",codeType,\"line:\",line);\r\n\t\t\t}else{\r\n\t\t\t\tresult.push(AnsiReset);\r\n\t\t\t\tif (broken) result.push(ReplyBlock);\r\n\t\t\t}\r\n\t\t}else{\r\n\t\t\tif (!inCode) {\r\n\t\t\t\t// rules\r\n\t\t\t\tif(line.startsWith(\"---\")||line.startsWith(\"***\")||line.startsWith(\"___\")){\r\n\t\t\t\t\tline=pageBreak.substring(0,terminalColumns-10);\r\n\t\t\t\t}\r\n\t\t\t\tif(line.startsWith(\"|\")){\r\n\t\t\t\t\tif(headings.length&&widths.length){\r\n\t\t\t\t\t\tresult.push(boxSplit(widths));\r\n\t\t\t\t\t\theadings=[];\r\n\t\t\t\t\t}\r\n\t\t\t\t\tconst split=line.split(\"|\");\r\n\t\t\t\t\tconst splits=split.length;\r\n\t\t\t\t\tif(splits>2){\r\n\t\t\t\t\t\tlet trim=split.slice(1,splits-1);\r\n\t\t\t\t\t\tif(!inTable) {\r\n\t\t\t\t\t\t\tinTable=true;\r\n\t\t\t\t\t\t\theadings=trim;\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t}else{\r\n\t\t\t\t\t\t\tconst spacer=(trim[0]||\"\").startsWith(\"-\");\r\n\t\t\t\t\t\t\tif(spacer){\r\n\t\t\t\t\t\t\t\twidths=trim;\r\n\t\t\t\t\t\t\t\tresult.push(boxTop(widths));\r\n\t\t\t\t\t\t\t\tlet wide=0;\r\n\t\t\t\t\t\t\t\tfor(let i=0;i<widths.length;i++){\r\n\t\t\t\t\t\t\t\t\tconst w=widths[i].length;\r\n\t\t\t\t\t\t\t\t\twide+=w+1;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\ttrim=headings;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif(widths){\r\n\t\t\t\t\t\t\t\tline=boxCells(widths,trim);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}else{\r\n\t\t\t\t\tif(inTable) {\r\n\t\t\t\t\t\tresult.push(boxBottom(widths));\r\n\t\t\t\t\t\tinTable=false;\r\n\t\t\t\t\t\theadings=[];\r\n\t\t\t\t\t\twidths=[];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t// headershow\r\n\t\t\t\tconst header=line.match(/^#+/);\r\n\t\t\t\tif (header) {\r\n\t\t\t\t\tconst level=header[0].length;\r\n\t\t\t\t\tline=line.substring(level).trim();\r\n\t\t\t\t\tconst ink=Deno.noColor?\"\":AnsiColors[(colorCycle++)&7];\r\n\t\t\t\t\tline=ink + line + AnsiReset;\t//ansiPop\r\n\t\t\t\t}\r\n\t\t\t\t// bullets\r\n\t\t\t\tif (line.startsWith(\"*\") || line.startsWith(\"+\")) {\r\n\t\t\t\t\tline=\"• \" + line.substring(1).trim();\r\n\t\t\t\t}\r\n\t\t\t\t// bold\r\n\t\t\t\tif (line.includes(\"**\")) {\r\n\t\t\t\t\tline=line.replace(/\\*\\*(.*?)\\*\\*/g, \"\\x1b[1m$1\\x1b[0m\");\r\n\t\t\t\t}\r\n\t\t\t\t// italic\r\n\t\t\t\tline=line.replace(/\\*(.*?)\\*/g, \"\\x1b[3m$1\\x1b[0m\");\r\n\t\t\t\tline=line.replace(/_(.*?)_/g, \"\\x1b[3m$1\\x1b[0m\");\r\n\t\t\t\t// wordwrap\r\n\t\t\t\tline=wordWrap(line,terminalColumns);\r\n\t\t\t}\r\n\t\t\tresult.push(line.trimEnd());\r\n\t\t}\r\n\t}\r\n\tif(poplast){\r\n\t\tresult.pop();\r\n\t}\r\n\r\n\tif(inTable&&widths) {\r\n\t\tresult.push(boxBottom(widths));\r\n\t}\r\n\r\n\tresult.push(AnsiReset);\r\n\treturn result.join(\"\\n\");\r\n}\r\n\r\nasync function hashFile(filePath) {\r\n\tconst buffer=await Deno.readFile(filePath);\r\n\tconst hash=await crypto.subtle.digest(\"SHA-256\", buffer);\r\n\tconst bytes=new Uint8Array(hash);\r\n\treturn Array.from(bytes, (byte) =>\r\n\t\tbyte.toString(16).padStart(2, \"0\")\r\n\t).join(\"\");\r\n}\r\n\r\nasync function readForge(){\r\n\ttry {\r\n\t\tconst fileContent=await Deno.readTextFile(rohaPath);\r\n\t\troha=JSON.parse(fileContent);\r\n\t\tif(!roha.saves) roha.saves=[];\r\n\t\tif(!roha.counters) roha.counters={};\r\n\t\tif(!roha.mut) roha.mut={};\r\n\t\tif(!roha.forge) roha.forge=[];\r\n\t\tif(!roha.lode) roha.lode={};\r\n\t\tif(!roha.nic) roha.nic=sanitizeNic(username);\r\n\t} catch (error) {\r\n\t\tconsole.error(\"Error reading or parsing\",rohaPath,error);\r\n\t\troha=emptyRoha;\r\n\t}\r\n}\r\n\r\nasync function writeForge(){\r\n//\tconsole.log(\"[WRITING] roha\",roha)\r\n\tconst json=JSON.stringify(roha, null, \"\\t\");\r\n\ttry {\r\n\t\troha.model=grokModel;\r\n\t\tawait Deno.writeTextFile(rohaPath,json);\r\n\t} catch (error) {\r\n\t\tconsole.error(\"Error writing\",rohaPath,error);\r\n\t}\r\n}\r\n\r\nasync function resetRoha(){\r\n\tgrokTemperature=1.0;\r\n\trohaShares=[];\r\n\troha.sharedFiles=[];\r\n//\troha.tags={};\r\n\tif(roha.config.resetcounters) roha.counters={};\r\n\tincrement(\"resets\");\r\n\tawait writeForge();\r\n\tresetHistory();\r\n\tawait resetModel(roha.model||defaultModel);\r\n\techo(\"resetRoha\",\"All shares and history reset.\");\r\n}\r\n\r\nfunction resolvePath(dir,filename){\r\n\tlet path=resolve(dir,filename);\r\n\tpath=path.replace(/\\\\/g, \"/\");\r\n\treturn path;\r\n}\r\n\r\n// a raw mode prompt replacement\r\n// roha.config.rawprompt is not default\r\n// arrow navigation and tab completion incoming\r\n// a reminder to enable rawprompt for new modes\r\n\r\n// new version with timeout\r\n//const promptTimeout = new AbortController();\r\n//const text=SaveCursorA + AnsiHome + AnsiClear + frame + RestoreCursorA;\r\n\r\nconst slopFrames=[];\r\n\r\nlet promptBuffer=new Uint8Array(0);\r\nlet slopFrame=0;\r\n\r\nconst writer=Deno.stdout.writable.getWriter();\r\n\r\nasync function refreshBackground(ms,line) {\r\n\tawait new Promise(resolve => setTimeout(resolve, ms));\r\n\tif(slopFrames.length&&slopFrame!=slopFrames.length){\r\n\t\tslopFrame=slopFrames.length;\r\n\t\tconst frame=slopFrames[slopFrame-1];\r\n//\t\tconst message=AnsiHome + frame + AnsiCursor + row + \";1H\\n\" + prompt+line;\r\n\t\tconst message=AnsiHome + frame + ansiPrompt() + line;\r\n\t\tawait writer.write(encoder.encode(message));\r\n\t\tawait writer.ready;\r\n\t}\r\n}\r\n\r\n// promptForge 𓅠\r\n\r\nconst reader=Deno.stdin.readable.getReader();\r\n\r\nasync function promptForge(message:string) {\r\n\tif(!roha.config.rawprompt) return prompt(message);\r\n\tlet result=\"\";\r\n\tif(message){\r\n\t\tawait writer.write(encoder.encode(message));\r\n\t\tawait writer.ready;\r\n\t}\r\n\t// todo: paging tests\r\n\tif(roha.config.page) {\r\n\t\tawait writer.write(homeCursor);\r\n\t}\r\n\r\n\tlet busy=true;\r\n\tlet timer;\r\n\r\n\tif(roha.config.refreshBackground){\r\n\t\ttimer = setInterval(async() => {\r\n\t\t\tconst line=decoder.decode(promptBuffer);\r\n\t\t\tawait refreshBackground(5,message+line);\r\n\t\t}, 1000);\r\n\t}\r\n\r\n\tDeno.stdin.setRaw(true);\r\n\r\n\twhile (busy) {\r\n\t\ttry {\r\n\t\t\tconst { value, done }=await reader.read();\r\n\t\t\tif (done || !value) break;\r\n\t\t\tconst bytes=[];\r\n\t\t\tfor (const byte of value) {\r\n\t\t\t\tif (byte === 0x7F || byte === 0x08) { // Backspace\r\n\t\t\t\t\tif (promptBuffer.length > 0) {\r\n\t\t\t\t\t\tpromptBuffer=promptBuffer.slice(0, -1);\r\n\t\t\t\t\t\tbytes.push(0x08, 0x20, 0x08);\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (byte === 0x1b) { // Escape sequence\r\n\t\t\t\t\tif (value.length === 1) {\r\n\t\t\t\t\t\tawait exitForge();\r\n\t\t\t\t\t\tDeno.exit(0);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (value.length === 3) {\r\n\t\t\t\t\t\tif (value[1] === 0xf4 && value[2] === 0x50) {\r\n\t\t\t\t\t\t\techo(\"F1\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t} else if (byte === 0x0A || byte === 0x0D) { // Enter key\r\n\t\t\t\t\tbytes.push(0x0D, 0x0A);\r\n\t\t\t\t\tconst line=decoder.decode(promptBuffer);\r\n\t\t\t\t\tlet n=line.length;\r\n\t\t\t\t\tif (n > 0) {\r\n\t\t\t\t\t\tpromptBuffer=promptBuffer.slice(n);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tresult=line.trimEnd();\r\n\t\t\t\t\tawait logForge(result, \"stdin\");\r\n\t\t\t\t\tbusy=false;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tbytes.push(byte);\r\n\t\t\t\t\tconst buf=new Uint8Array(promptBuffer.length + 1);\r\n\t\t\t\t\tbuf.set(promptBuffer);\r\n\t\t\t\t\tbuf[promptBuffer.length]=byte;\r\n\t\t\t\t\tpromptBuffer=buf;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (bytes.length) await writer.write(new Uint8Array(bytes));\r\n\t\t}catch(error){\r\n\t\t\tconsole.error(\"Prompt error:\", error);\r\n\t\t\tif(roha.config.rawprompt){\r\n\t\t\t\tconsole.error(\"Please consider disabling rawprompt in config\");\r\n\t\t\t}\r\n\t\t\tbusy=false;\r\n\t\t}\r\n\t}\r\n\tDeno.stdin.setRaw(false);\r\n//\treader.cancel();\r\n\r\n\tif (timer) clearInterval(timer);\r\n\tif(roha.config.page) await writer.write(homeCursor);\r\n\treturn result;\r\n}\r\n\r\nasync function addShare(share){\r\n\tshare.id=\"share\"+increment(\"shares\");\r\n\troha.sharedFiles.push(share);\r\n\tif(share.tag) {\r\n\t\tawait setTag(share.tag,share.id);\r\n\t}\r\n}\r\n\r\nasync function shareDir(dir:string, tag:string, depth=1) {\r\n\ttry {\r\n\t\tconst paths=[];\r\n\t\tfor await (const file of Deno.readDir(dir)) {\r\n\t\t\tif(file.isDirectory){\r\n\t\t\t\tconst path = resolvePath(dir, file.name);\r\n\t\t\t\tif(depth<5){\r\n\t\t\t\t\tshareDir(path, tag, depth + 1);\r\n\t\t\t\t}\r\n\t\t\t}else{\r\n\t\t\t\tif (file.isFile && !file.name.startsWith(\".\")) {\r\n\t\t\t\t\tpaths.push(resolvePath(dir, file.name));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tfor (const path of paths) {\r\n\t\t\ttry {\r\n\t\t\t\techo(\"Sharing\",path);\r\n\t\t\t\tconst stat=await Deno.stat(path);\r\n\t\t\t\tconst size=stat.size||0;\r\n\t\t\t\tconst modified=stat.mtime.getTime();\r\n\t\t\t\tconst hash=await hashFile(path);\r\n\t\t\t\tawait addShare({ path, size, modified, hash, tag });\r\n\t\t\t} catch (error) {\r\n\t\t\t\techo(\"[KOHA] shareDir error\",path,error.message);\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t}\r\n\t\techo(\"Shared\",paths.length,\"files from\",dir,\"with tag\",tag);\r\n\t} catch (error) {\r\n\t\techo(\"shareDir error\",String(error)); //.message\r\n\t\tthrow error;\r\n\t}\r\n}\r\n\r\nfunction annotateCode(name,description){\r\n\techo(\"annotateCode\",name,description);\r\n}\r\n\r\nconst imageExtensions=[\r\n\t\"jpg\",\"jpeg\",\"png\"\r\n];\r\n\r\nconst textExtensions=[\r\n\t\"js\", \"ts\", \"txt\", \"json\", \"md\",\r\n\t\"css\",\"html\", \"svg\",\r\n\t\"cpp\", \"c\", \"h\", \"cs\", \"s\", \"java\",\r\n\t\"sh\", \"bat\",\r\n\t\"log\",\"py\",\"csv\",\"xml\",\"ini\"\r\n];\r\n\r\nconst fileTypes={\r\n\t\"js\": \"application/javascript\",\r\n\t\"ts\": \"application/typescript\",\r\n\t\"txt\": \"text/plain\",\r\n\t\"json\": \"application/json\",\r\n\t\"md\": \"text/markdown\",\r\n\t\"css\": \"text/css\",\r\n\t\"html\": \"text/html\",\r\n\t\"svg\": \"image/svg+xml\",\r\n\t\"cpp\": \"text/x-c++src\",\r\n\t\"c\": \"text/x-csrc\",\r\n\t\"h\": \"text/x-chdr\",\r\n\t\"cs\": \"text/x-csharp\",\r\n\t\"s\": \"text/x-asm\",\r\n\t\"java\": \"text/x-java\",\r\n\t\"sh\": \"text/x-shellscript\",\r\n\t\"bat\": \"text/x-batch\",\r\n\t\"log\": \"text/plain\",\r\n\t\"py\": \"text/x-python\",\r\n\t\"csv\": \"text/csv\",\r\n\t\"xml\": \"application/xml\",\r\n\t\"ini\": \"text/plain\",\r\n\t\"jpg\": \"image/jpeg\",\r\n\t\"jpeg\": \"image/jpeg\",\r\n\t\"png\": \"image/png\",\r\n\t\"mp3\": \"audio/mpeg\"\r\n};\r\n\r\nfunction fileType(extension:string){\r\n\treturn fileTypes[extension.toLowerCase()] || \"application/octet-stream\";\r\n}\r\n\r\nasync function shareBlob(path,size,tag){\r\n\tconst extension=path.split(\".\").pop().toLowerCase();\r\n\tconst mimeType=fileType(extension);\r\n\tconst metadata=JSON.stringify({ path:path,length:size,type:mimeType,tag });\r\n\trohaPush(metadata,\"blob\");\r\n\t// TODO: test for imageExtensions\r\n\tif (textExtensions.includes(extension)) {\r\n\t\tconst content=await Deno.readTextFile(path);\r\n\t\trohaPush(content,\"content\");\r\n\t} else {\r\n\t\tconst data=await Deno.readFile(path);\r\n\t\tconst base64=encodeBase64(data);\r\n\t\trohaPush(base64,\"image\");\r\n\t}\r\n\treturn true;\r\n}\r\n\r\nasync function commitShares(tag) {\r\n\tlet count=0;\r\n\tlet dirty=false;\r\n\tconst validShares=[];\r\n\tconst removedPaths=[];\r\n\tfor (const share of roha.sharedFiles) {\r\n\t\tif (tag && share.tag !== tag) {\r\n\t\t\tvalidShares.push(share);\r\n\t\t\tcontinue;\r\n\t\t}\r\n\t\ttry {\r\n\t\t\tconst path=share.path;\r\n\t\t\tconst stat=await Deno.stat(path);\r\n\t\t\tconst size=stat.size;\r\n\t\t\tif (!stat.isFile) {\r\n\t\t\t\tremovedPaths.push(path);\r\n\t\t\t\techo(\"[KOHA] Removed invalid path\",path);\r\n\t\t\t\tdirty=true;\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tif (size > MaxFileSize) {\r\n\t\t\t\techo(\"[KOHA] MaxFileSize breached\",path);\r\n\t\t\t\tdirty=true;\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tconst modified=share.modified !== stat.mtime.getTime();\r\n\t\t\tconst isShared=rohaShares.includes(path);\r\n\t\t\tif (modified || !isShared) {\r\n\t\t\t\tlet ok=await shareBlob(path,size,tag);\r\n\t\t\t\tif(ok){\r\n\t\t\t\t\tcount++;\r\n\t\t\t\t\tshare.modified=stat.mtime.getTime();\r\n\t\t\t\t\tdirty=true;\r\n\t\t\t\t\tif (!rohaShares.includes(path)) {\r\n\t\t\t\t\t\trohaShares.push(path);\r\n\t\t\t\t\t\tif(roha.config.verbose){\r\n\t\t\t\t\t\t\techo(\"[KOHA] Shared path\",path);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\techo(\"[KOHA] Updated share path\",path);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tvalidShares.push(share);\r\n\t\t} catch (error) {\r\n\t\t\tif (error instanceof Deno.errors.NotFound || error instanceof Deno.errors.PermissionDenied) {\r\n\t\t\t\tremovedPaths.push(share.path);\r\n\t\t\t\tdirty=true;\r\n\t\t\t}\r\n\t\t\techo(\"[KOHA] commitShares path\",share.path);\r\n\t\t\techo(\"[KOHA] commitShares error\",error.message);\r\n\t\t}\r\n\t}\r\n\tif (removedPaths.length) {\r\n\t\troha.sharedFiles=validShares;\r\n\t\tawait writeForge();\r\n\t\techo(\"[KOHA] commitShares removed\", removedPaths.join(\" \"));\r\n\t}\r\n\tif (dirty && tag) {\r\n\t\trohaHistory.push({ role: \"system\", title:\"Fountain Tool Hint\", content: \"Feel free to call annotate_forge to tag \" + tag });\r\n\t}\r\n\tif (count && roha.config.verbose) {\r\n\t\techo(\"[KOHA] Updated files\",count,\"of\",validShares.length);\r\n\t}\r\n\treturn dirty;\r\n}\r\n\r\nasync function setTag(name,note){\r\n\tconst tags=roha.tags||{};\r\n\tconst tag=(tags[name])?tags[name]:{name,info:[]};\r\n\ttag.info.push(note);\r\n\ttags[name]=tag;\r\n\troha.tags=tags;\r\n\tawait writeForge();\r\n//\tlet invoke=`New tag \"${name}\" added. Describe all shares with this tag.`;\r\n//\trohaHistory.push({role:\"system\",content:invoke});\r\n}\r\nfunction listCounters(){\r\n\tlet keys=Object.keys(roha.counters);\r\n\tlet i=0;\r\n\tfor(let key of keys){\r\n\t\tlet count=roha.counters[key];\r\n\t\techo((i++),key,count);\r\n\t}\r\n}\r\nfunction listTags(){\r\n\tlet tags=roha.tags||{};\r\n\tlet keys=Object.keys(tags);\r\n\tlet list=[];\r\n\tlet n=keys.length||0;\r\n\tfor(let i=0;i<n;i++){\r\n\t\tlet tag=tags[keys[i]];\r\n\t\tconst name=tag.name||\"?????\";\r\n\t\tif(tag.info){\r\n\t\t\techo(i,name,\"(\"+tag.info.length+\")\");\r\n\t\t}else{\r\n\t\t\techo(i,name);\r\n\t\t}\r\n\t\tlet info=tag.description;\r\n\t\tif(info) echo(\"\",info);\r\n\t\tlist.push(name);\r\n\t}\r\n\ttagList=list;\r\n}\r\n\r\nasync function openWithDefaultApp(path) {\r\n\tconst cmd=Deno.build.os === \"windows\" ? [\"start\", \"\", path] : Deno.build.os === \"darwin\" ? [\"open\", path] : [\"xdg-open\", path];\r\n\tawait Deno.run({ cmd }).status();\r\n}\r\n\r\nfunction onForge(args){\r\n\tlet list=roha.forge;\r\n\tif(args.length>1){\r\n\t\tlet name=args.slice(1).join(\" \");\r\n\t\tif(name.length && !isNaN(name)) {\r\n\t\t\tlet item=list[name|0];\r\n\t\t\techo(\"opening\",item.name,\"from\",item.path);\r\n\t\t\topenWithDefaultApp(item.path);\r\n\t\t}\r\n\t}else{\r\n\t\tfor(let i=0;i<list.length;i++){\r\n\t\t\techo(i,list[i].name);\r\n\t\t}\r\n\t\tlistCommand=\"forge\";\r\n\t}\r\n}\r\n\r\nasync function creditAccount(credit,account){\r\n\tconst amount=Number(credit);\r\n\tconst lode=roha.lode[account];\r\n\tconst current=lode.credit||0;\r\n\tlode.credit=amount;\r\n\tif(roha.config.verbose) {\r\n\t\tconst delta=(current-amount).toFixed(2);\r\n\t\techo(\"creditAccount\",price(amount),account,\"balance\",price(lode.credit),\"delta\",delta);\r\n\t}\r\n\tawait writeForge();\r\n}\r\n\r\nasync function onAccount(args){\r\n\tif(args.length>1){\r\n\t\tlet name=args.slice(1).join(\" \");\r\n\t\tif(name.length && !isNaN(name)) {\r\n\t\t\tname=lodeList[name|0];\r\n\t\t}\r\n\t\tspecAccount(name);\r\n\t\tconst lode=roha.lode[name];\r\n\t\tconst balance=lode.credit||0;\r\n\t\techo(\"Adjust\",lode.name,\"balance\",price(balance));\r\n\t\tcreditCommand=(credit)=>creditAccount(credit,name);\r\n\t\tawait writeForge();\r\n\t}else{\r\n\t\tconst list=[];\r\n\t\tfor(const key in modelAccounts){\r\n\t\t\tlist.push(key);\r\n\t\t}\r\n\t\techo_row(\"id\",\"name\",\"llm\",\"credit\");\r\n\t\techo_row(\"----\",\"-------------\",\"----\",\"----------\");\r\n\t\tfor(let i=0;i<list.length;i++){\r\n\t\t\tconst key=list[i];\r\n\t\t\tif(key in roha.lode){\r\n\t\t\t\tconst endpoint=rohaEndpoint[key];\r\n\t\t\t\tconst models=endpoint?.modelList||[];\r\n\t\t\t\tconst lode=roha.lode[key];\r\n\t\t\t\tconst count=models?.length|0;\r\n\t\t\t\techo_row(i,key,count,price(lode.credit));\r\n\t\t\t}else{\r\n\t\t\t\techo_row(i,key);\r\n\t\t\t}\r\n\t\t\tlodeList=list;\r\n\t\t\tlistCommand=\"credit\";\r\n\t\t}\r\n\t}\r\n}\r\n\r\nasync function showHelp(words:string[]) {\r\n\ttry {\r\n\t\tconst md=await Deno.readTextFile(\"forge.md\");\r\n\t\tconst cmds=md.split(\"\\n### /\");\r\n\t\tconst intro=cmds[0].split(\"\\n## \")[0].trim();\r\n\t\tif(words.length>1){\r\n\t\t\tconst index=parseInt(words[1]);\r\n\t\t\tfor(let i=1;i<cmds.length;i++){\r\n\t\t\t\tif(i==index){\r\n\t\t\t\t\tconst help=\"/\"+cmds[i].trim();\r\n\t\t\t\t\techo(\"[HELP]\",help);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tlistCommand=\"\";\r\n\t\t}else{\r\n\t\t\techo(\"[HELP]\",intro);//mdToAnsi(intro));\r\n\t\t\tfor(let i=1;i<cmds.length;i++){\r\n\t\t\t\tconst line=cmds[i];\r\n\t\t\t\tconst eol:number=line.indexOf(\"\\n\");\r\n\t\t\t\tconst name=line.substring(0,eol);\r\n\t\t\t\techo(\"#\"+i+\" /\"+name);\r\n\t\t\t\tlistCommand=\"help\";\r\n\t\t\t}\r\n\t\t}\r\n\t} catch (e) {\r\n\t\techo(\"showHelp error\",e.message);\r\n\t}\r\n}\r\n\r\nfunction readable(text){\r\n\ttext=text.replace(/\\s+/g, \" \");\r\n\treturn text;\r\n}\r\n\r\n\r\nfunction listShares(shares){\r\n\tconst list=[];\r\n\tlet count=0;\r\n\tlet sorted=shares.slice();\r\n\tsorted.sort((a, b) => b.size - a.size);\r\n\tfor (const share of sorted) {\r\n\t\tlet shared=(rohaShares.includes(share.path))?\"*\":\"\";\r\n\t\tlet tags=\"[\"+rohaTitle+\" \"+share.tag+\"]\";\r\n\t\tlet info=(share.description)?share.description:\"\";\r\n\t\techo((count++),share.path,share.size,shared,tags,info);\r\n\t\tlist.push(share.id);\r\n\t}\r\n\tshareList=list;\r\n}\r\n\r\n// modelCommand - list table of models\r\nconst modelKeys=\"📠📷📘\";\r\nconst modelKey={\"📠\":\"Tools\",\"📷\":\"Vision\",\"📘\":\"Strict\"};\r\nasync function modelCommand(words){\r\n\tlet name=words[1];\r\n\tif(name && name!=\"all\"){\r\n\t\tif(name.length&&!isNaN(name)) name=modelList[name|0];\r\n\t\tif(modelList.includes(name)){\r\n\t\t\tawait resetModel(name);\r\n\t\t\tawait writeForge();\r\n\t\t}\r\n\t}else{\r\n\t\techoKey(modelKey,100);\r\n\t\techo_row(\"id\",\"☐\",\"model\",\"account\",\"🧮\",\"📆\",\"💰\",modelKeys);\r\n\t\techo_row(\r\n\t\t\t\"-----\",\r\n\t\t\t\"--\",\r\n\t\t\t\"--------------------------\",\r\n\t\t\t\"------------\",\r\n\t\t\t\"-----\",\r\n\t\t\t\"------------\",\r\n\t\t\t\"---  ----  ---- ---\",\r\n\t\t\t\"---------\"\r\n\t\t);\r\n\t\tconst all=(name && name==\"all\");\r\n\t\tfor(let i=0;i<modelList.length;i++){\r\n\t\t\tconst modelname=modelList[i];\r\n// todo: ⭐power\r\n\t\t\tconst attr=(modelname==grokModel)?\"☑\":\" \";\r\n// mutspec from roha.mut\r\n\t\t\tconst mutspec=(modelname in roha.mut)?roha.mut[modelname]:{...emptyMUT};\r\n\t\t\tmutspec.name=modelname;\r\n\t\t\tconst notes=[...mutspec.notes];\r\n\t\t\tif(mutspec.hasForge) notes.push(\"📠\");\r\n\t\t\tconst rated=modelname in modelSpecs?modelSpecs[modelname]:{};\r\n\t\t\tif(rated.cold) notes.push(\"🧊\");\r\n\t\t\tif(rated.multi) notes.push(\"📷\");\r\n\t\t\tif(rated.strict) notes.push(\"📘\");\r\n//\t\t\tif(rated.inline) notes.push(\"📘\");\r\n\t\t\tconst seconds=mutspec.created;\r\n\t\t\tconst created=dateStamp(seconds);\r\n\t\t\tconst priced=rated.pricing;\r\n\t\t\t// account from modelProvder\r\n\t\t\tconst modelProvider=modelname.split(\"@\");\r\n\t\t\tconst provider=modelProvider[1];\r\n\t\t\tconst account=modelAccounts[provider];\r\n\t\t\tconst emoji=account.emoji||\"\";\r\n\t\t\tconst mut=mutName(modelname);\r\n\t\t\tlet cheap = priced && priced[0]<3.01;\r\n\t\t\tif(!roha.config.budget) cheap=priced;\r\n\t\t\tif(cheap || all){\r\n\t\t\t\tconst pricing=(rated&&rated.pricing)?stringifyArray(rated.pricing):\"\";\r\n\t\t\t\techo_row(i,attr,mut,provider,mutspec.relays|0,created,pricing,notes.join(\" \"));\r\n\t\t\t}\r\n\t\t}\r\n\t\tlistCommand=\"model\";\r\n\t}\r\n}\r\n\r\nasync function attachMedia(words){\r\n\tif (words.length==1){\r\n\t\tlistShares(roha.attachedFiles);\r\n\t}else{\r\n\t\tconst filename=words.slice(1).join(\" \");\r\n\t\tconst path=resolvePath(Deno.cwd(), filename);\r\n\t\tconst stat=await Deno.stat(path);\r\n\t\tconst tag=\"\";//await promptForge(\"Enter tag name (optional):\");\r\n\t\tif(stat.isFile){\r\n\t\t\tconst size=stat.size;\r\n\t\t\tconst modified=stat.mtime.getTime();\r\n\t\t\techo(\"Attach media path:\",path,\"size:\",size);\r\n//\t\t\tconst hash=await hashFile(path,size);\r\n//\t\t\techo(\"hash:\",hash);\r\n//\t\t\tawait addShare({path,size,modified,hash,tag});\r\n\t\t}\r\n\t\tawait writeForge();\r\n\t}\r\n}\r\n\r\n// can emit [FOUNTAIN] callCommand error\r\n// TODO: validate docs and link to information\r\nasync function callCommand(command:string) {\r\n\tlet dirty=false;\r\n\tlet words=command.split(\" \");\r\n\ttry {\r\n\t\tswitch (words[0]) {\r\n\t\t\tcase \"bibli\":\r\n\t\t\t\tparseBibli();\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"spec\":\r\n\t\t\t\tparseUnicode();\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"listen\":\r\n\t\t\t\tlistenService();\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"think\":\r\n\t\t\t\tif (words.length > 1) {\r\n\t\t\t\t\tconst newThink=parseFloat(words[1]);\r\n\t\t\t\t\tif (!isNaN(newThink) && newThink >= 0 && newThink <= 8192) {\r\n\t\t\t\t\t\tgrokThink=newThink;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\techo(\"Current model thinking budget is\", grokThink);\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"temp\":\r\n\t\t\t\tif (words.length > 1) {\r\n\t\t\t\t\tconst newTemp=parseFloat(words[1]);\r\n\t\t\t\t\tif (!isNaN(newTemp) && newTemp >= -5 && newTemp <= 50) {\r\n\t\t\t\t\t\tgrokTemperature=newTemp;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\techo(\"Current model temperature is\", grokTemperature);\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"balance\":\r\n\t\t\t\tawait getBalance(words);\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"forge\":\r\n\t\t\t\tonForge(words);\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"counter\":\r\n\t\t\t\tlistCounters();\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"tag\":\r\n\t\t\t\tawait listTags();\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"account\":\r\n\t\t\tcase \"credit\":\r\n\t\t\t\tawait onAccount(words);\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"help\":\r\n\t\t\t\tawait showHelp(words);\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"nic\":{\r\n\t\t\t\t\tif(words.length>1){\r\n\t\t\t\t\t\tconst nic=sanitizeNic(words[1].trim()||\"nix\");\r\n\t\t\t\t\t\troha.nic=nic;\r\n\t\t\t\t\t\trohaNic=nic;\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\techo(roha.nic);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"config\":\r\n\t\t\t\tif(words.length>1){\r\n\t\t\t\t\tlet flag=words[1].trim();\r\n\t\t\t\t\tif(flag.length && !isNaN(flag)){\r\n\t\t\t\t\t\tflag=Object.keys(flagNames)[flag|0];\r\n\t\t\t\t\t\techo(\"flag\",flag);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(flag in flagNames){\r\n\t\t\t\t\t\troha.config[flag]=!roha.config[flag];\r\n\t\t\t\t\t\techo(flag+\" - \"+flagNames[flag]+\" is \"+(roha.config[flag]?\"true\":\"false\"));\r\n\t\t\t\t\t\tawait writeForge();\r\n\t\t\t\t\t}\r\n\t\t\t\t}else{\r\n\t\t\t\t\tlet count=0;\r\n\t\t\t\t\tfor(let flag in flagNames){\r\n\t\t\t\t\t\techo((count++),flag,\":\",flagNames[flag],\":\",(roha.config[flag]?\"true\":\"false\"))\r\n\t\t\t\t\t}\r\n\t\t\t\t\tlistCommand=\"config\";\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"time\":\r\n\t\t\t\techo(\"Current time:\", new Date().toString());\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"log\":\r\n\t\t\t\tlogHistory();\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"list\":\r\n\t\t\tcase \"history\":\r\n\t\t\t\tlistHistory();\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"load\":{\r\n\t\t\t\t\tlet save=words[1];\r\n\t\t\t\t\tif(save){\r\n\t\t\t\t\t\tif(save.length && !isNaN(save)) save=roha.saves[save|0];\r\n\t\t\t\t\t\tif(roha.saves.includes(save)){\r\n\t\t\t\t\t\t\techo(\"loading\",save);\r\n\t\t\t\t\t\t\tconst path=\"forge/\"+save;\r\n\t\t\t\t\t\t\tlet load=await loadHistory(path);\r\n\t\t\t\t\t\t\trohaHistory=load;\r\n\t\t\t\t\t\t\techo(\"rohaHistory <= \",save);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\tawait listSaves();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"save\":{\r\n\t\t\t\t\tconst savename=words.slice(1).join(\" \");\r\n\t\t\t\t\tawait saveHistory(savename);\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"note\":\r\n\t\t\t\t// todo roha.mut[] -> roha.mutspec[]\r\n\t\t\t\tif(grokModel in roha.mut){\r\n\t\t\t\t\tconst mutspec=roha.mut[grokModel];\r\n\t\t\t\t\tconst note=words.slice(1).join(\" \");\r\n\t\t\t\t\tif(note.length){\r\n\t\t\t\t\t\tmutspec.notes.push(note);\r\n\t\t\t\t\t\tawait writeForge();\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\tconst n=mutspec.notes.length;\r\n\t\t\t\t\t\tfor(let i=0;i<n;i++){\r\n\t\t\t\t\t\t\techo(i,mutspec.notes[i]);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"dump\":\r\n\t\t\t\tfor(let i=0;i<modelList.length;i++){\r\n\t\t\t\t\tlet name=modelList[i];\r\n\t\t\t\t\tif(name in modelSpecs){\r\n\t\t\t\t\t\techo(name);\r\n\t\t\t\t\t\taboutModel(name);\r\n\t\t\t\t\t\techo(\".\");\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"model\":\r\n\t\t\t\tawait modelCommand(words);\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"begin\":\r\n\t\t\t\tawait pushHistory();\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"finish\":{\r\n\t\t\t\t\tlet ok=await popHistory();\r\n\t\t\t\t\tif(!ok){\r\n\t\t\t\t\t\techo(\"trigger exit here\");\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"reset\":\r\n\t\t\t\tawait resetRoha();\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"cd\":\r\n\t\t\t\tif(words.length>1){\r\n\t\t\t\t\tconst newDir=words[1];\r\n\t\t\t\t\tif (newDir.length) Deno.chdir(newDir);\r\n\t\t\t\t}\r\n\t\t\t\tcurrentDir=Deno.cwd();\r\n\t\t\t\techo(\"Changed directory to\", currentDir);\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"dir\":{\r\n\t\t\t\t\tconst cwd=words.slice(1).join(\" \")||currentDir;\r\n\t\t\t\t\techo(\"Directory\",cwd);\r\n\t\t\t\t\tconst dirs=[];\r\n\t\t\t\t\tconst files=[];\r\n\t\t\t\t\tfor await (const file of Deno.readDir(cwd)) {\r\n\t\t\t\t\t\tconst name=file.name;\r\n\t\t\t\t\t\tif(file.isDirectory)dirs.push(name);else files.push(name);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(dirs) echo(\"dirs\",dirs.join(\" \"));\r\n\t\t\t\t\tif(files) echo(\"files\",files.join(\" \"));\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"drop\":\r\n\t\t\t\tdropShares();\r\n\t\t\t\tawait writeForge();\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"attach\":\r\n\t\t\tcase \"share\":\r\n\t\t\t\tif (words.length==1){\r\n\t\t\t\t\tlistShare();\r\n\t\t\t\t}else{\r\n\t\t\t\t\tconst filename=words.slice(1).join(\" \");\r\n\t\t\t\t\tconst path=resolvePath(Deno.cwd(), filename);\r\n\t\t\t\t\tconst stat=await Deno.stat(path);\r\n\t\t\t\t\tconst tag=\"\";//await promptForge(\"Enter tag name (optional):\");\r\n\t\t\t\t\tif(stat.isDirectory){\r\n\t\t\t\t\t\techo(\"Share directory path:\",path);\r\n\t\t\t\t\t\tawait shareDir(path,tag);\r\n\t\t\t\t\t\tawait writeForge();\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\t// attachMedia(words);\r\n\t\t\t\t\t\tconst size=stat.size;\r\n\t\t\t\t\t\tconst modified=stat.mtime.getTime();\r\n\t\t\t\t\t\techo(\"Share file path:\",path,\" size:\",size,\" \");\r\n\t\t\t\t\t\tconst hash=await hashFile(path,size);\r\n\t\t\t\t\t\techo(\"hash:\",hash);\r\n\t\t\t\t\t\tawait addShare({path,size,modified,hash,tag});\r\n\t\t\t\t\t}\r\n\t\t\t\t\tawait writeForge();\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"push\":\r\n\t\t\tcase \"commit\":{\r\n\t\t\t\t\tlet tag=\"\";\r\n\t\t\t\t\tif(words.length>1){\r\n\t\t\t\t\t\ttag=words[1];\r\n\t\t\t\t\t}\r\n\t\t\t\t\tdirty=await commitShares(tag);\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\techo(\"Command not recognised\",words[0]);\r\n\t\t\t\treturn false; // Command not recognized\r\n\t\t}\r\n\t} catch (error) {\r\n\t\tif(roha.config.debugging){\r\n\t\t\techo(\"[FOUNTAIN] callCommand error\",command,error.message,error.stack);\r\n\t\t}else{\r\n\t\t\techo(\"[FOUNTAIN] calling\",command,error.message);\r\n\t\t}\r\n\t}\r\n\tincrement(\"calls\");\r\n\treturn dirty;\r\n}\r\n\r\nasync function pathExists(path) {\r\n\ttry {\r\n\t\tconst stat=await Deno.stat(path);\r\n//\t\tif (!stat.isFile) return false;\r\n\t\treturn true;\r\n\t} catch (error) {\r\n\t\tif (error instanceof Deno.errors.NotFound) return false;\r\n\t\tif (error instanceof Deno.errors.PermissionDenied) return false;\r\n\t\tthrow error;\r\n\t}\r\n}\r\n\r\nfunction extensionForType(contentType) {\r\n\tif (contentType.includes(\"html\")) return \".html\";\r\n\tif (contentType.includes(\"markdown\")) return \".md\";\r\n\tif (contentType.includes(\"json\")) return \".json\";\r\n\tif (contentType.includes(\"javascript\")) return \".js\";\r\n\tif (contentType.includes(\"typescript\")) return \".ts\";\r\n\treturn \".txt\";\r\n}\r\n\r\nasync function onCall(toolCall) {\r\n\tlet verbose=roha.config.verbose;\r\n\tlet name=toolCall.function.name;\r\n\tswitch(name) {\r\n\t\tcase \"read_time\":{\r\n\t\t\tconst time=new Date().toLocaleString();\r\n\t\t\tconst tz=userregion.timeZone;\r\n\t\t\tconst locale=userregion.locale;\r\n\t\t\treturn {time,tz,locale};\r\n\t\t}\r\n\t\tcase \"submit_file\":{\r\n\t\t\tlet args=JSON.parse(toolCall.function.arguments);\r\n\t\t\techo(args.contentType);\r\n\t\t\tif (verbose) echo(args.content);\r\n\t\t\tlet timestamp=Math.floor(Date.now()/1000).toString(16);\r\n\t\t\tlet extension=extensionForType(args.contentType)\r\n\t\t\tlet name= \"submission-\"+timestamp+extension;\r\n\t\t\tlet filePath=resolve(forgePath,name);\r\n\t\t\tawait Deno.writeTextFile(filePath, args.content);\r\n\t\t\techo(\"File saved to:\", filePath);\r\n\t\t\troha.forge.push({name,path:filePath,type:args.contentType});\r\n\t\t\treturn { success: true, path: filePath };\r\n\t\t}\r\n\t\tcase \"fetch_file\":{\r\n\t\t\tconst { fileName }=JSON.parse(toolCall.function.arguments || \"{}\");\r\n\t\t\techo(\"Fetching file:\", fileName);\r\n\t\t\tconst path=\"forge/\"+fileName;\r\n\t\t\tconst data=await Deno.readFile(path);\r\n\t\t\tconst base64=encodeBase64(data);\r\n\t\t\treturn { success: true, path: fileName, Base64:base64 };\r\n\t\t}\r\n\t\tcase \"annotate_forge\":{\r\n\t\t\ttry {\r\n\t\t\t\tconst { name, type, description }=JSON.parse(toolCall.function.arguments || \"{}\");\r\n\t\t\t\tswitch(type){\r\n\t\t\t\t\tcase \"code\":\r\n\t\t\t\t\t\tannotateCode(name,description);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"tag\":\r\n\t\t\t\t\t\tannotateTag(name,description);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"share\":\r\n\t\t\t\t\t\tannotateShare(name,description);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tawait writeForge(); // Persist changes\r\n\t\t\t\treturn { success: true, updated: 1 };\r\n\t\t\t} catch (error) {\r\n\t\t\t\techo(\"annotate_forge error:\",error);\r\n\t\t\t}\r\n\t\t\treturn { success: false, updated: 0 };\r\n\t\t}\r\n\t\tdefault:\r\n\t\t\techo(\"onCall unhandled function name:\",name);\r\n\t\t\tdebugValue(\"toolCall\",toolCall);\r\n\t\t\treturn { success: false, updated: 0 };\r\n\t}\r\n}\r\n\r\nfunction squashMessages(history) {\r\n\tif (history.length < 2) return history;\r\n\tconst squashed=[];\r\n\tconst system=[];\r\n\tconst others=[];\r\n\tfor(const item of history){\r\n\t\tif(item.role==\"system\") system.push(item); else others.push(item);\r\n\t}\r\n\tfor(const list of [[...system],[...others]]){\r\n\t\tlet last=null;\r\n\t\tfor (let i=0; i < list.length; i++) {\r\n\t\t\tconst current=list[i];\r\n\t\t\tif(last && last.role==current.role){\r\n\t\t\t\tlast.content += \"\\n\" + current.content;\r\n\t\t\t} else {\r\n\t\t\t\tsquashed.push(current);\r\n\t\t\t\tlast=current;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn squashed;\r\n}\r\n\r\nasync function processToolCalls(calls) {\r\n\tconst results=[];\r\n\tfor (const tool of calls) {\r\n\t\tconst id=tool.id || !tool.function?.name\r\n\t\techo(\"[RELAY] processToolCalls\",id,tool);\r\n\t\tif (!tool.id || !tool.function?.name) {\r\n\t\t\tresults.push({\r\n\t\t\t\ttool_call_id: tool.id || \"unknown\",\r\n\t\t\t\tname: tool.function?.name || \"unknown\",\r\n\t\t\t\tcontent: JSON.stringify({error: \"Invalid tool call format\"})\r\n\t\t\t});\r\n\t\t\tawait logForge(\"processToolCalls error\");\r\n\t\t\t//Invalid tool call: ${JSON.stringify(tool)}`, \"error\");\r\n\t\t\tcontinue;\r\n\t\t}\r\n\t\ttry {\r\n\t\t\tconst result=await onCall(tool);\r\n\t\t\tresults.push({\r\n\t\t\t\t// todo: fix for testing kimi\r\n\t\t\t\ttool_call_id: tool.id,\r\n\t\t\t\tname: tool.function.name,\r\n\t\t\t\tcontent: JSON.stringify(result || {success: false})\r\n\t\t\t});\r\n\t\t} catch (e) {\r\n\t\t\techo(\"processToolCalls] error\",e);\r\n/*\r\n\t\t\tresults.push({\r\n\t\t\t\ttool_call_id: tool.id,\r\n\t\t\t\tname: tool.function.name,\r\n\t\t\t\tcontent: JSON.stringify({error: e.message})\r\n\t\t\t});\r\n\t\t\tawait log(\"processToolCalls failure\");\r\n*/\r\n\t\t\t//`Tool call failed: ${tool.function.name} - ${e.message}`, \"error\");\r\n\t\t}\r\n\t}\r\n\treturn results;\r\n}\r\n\r\n// strict mode history for simplified model prompts 📠\r\n// returns a list of {role,content}\r\n\r\nfunction strictHistory(history){\r\n\tconst list=[];\r\n\tfor(const _item of history){\r\n\t\tconst item={..._item};\r\n\t\tconst src=\"[\"+itemSource(item)+\"] \";\r\n\t\tswitch(item.role){\r\n\t\t\tcase \"system\":\r\n\t\t\t\tlist.push({role:\"system\",content:src+item.content});\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"assistant\":\r\n\t\t\t\tif(item.tool_calls){\r\n\t\t\t\t\tlist.push({role:item.role,content:src+item.content,tool_calls:item.tool_calls});\r\n\t\t\t\t}else{\r\n\t\t\t\t\tlist.push({role:\"assistant\",content:src+item.content});\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"user\":{\r\n\t\t\t\t\tconst content=src+item.content;\r\n\t\t\t\t\tlist.push({role:item.role,content});\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"tool\":\r\n\t\t\t\tlist.push({...item});\r\n\t\t\t\t//({role:\"tool\",tool_call_id:result.tool_call_id,name:result.name,content:result.content});\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\treturn list;\r\n}\r\n\r\n// TODO: used by moonshot and claude for vision inline images\r\n// \"multi\":true payloads need explanation\r\n\r\nfunction multiHistory(history){\r\n\tconst list=[];\r\n\tlet blobType=\"\";\r\n\tfor(const _item of history){\r\n\t\tconst item={..._item};\r\n\t\tswitch(item.role){\r\n\t\t\tcase \"system\":\r\n\t\t\t\tlist.push({role:\"system\",content:item.content});\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"assistant\":\r\n\t\t\t\tif(item.tool_calls){\r\n\t\t\t\t\tlist.push({role:item.role,content:item.content,tool_calls:item.tool_calls});\r\n\t\t\t\t}else{\r\n\t\t\t\t\tlist.push({role:\"assistant\",content:item.content});\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"user\":{\r\n\t\t\t\t\tif(item.name==\"blob\"){\r\n\t\t\t\t\t\tconst blob=JSON.parse(item.content);\r\n\t\t\t\t\t\tblobType=blob.type;\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(item.name==\"image\"){\r\n\t\t\t\t\t\tconst type=blobType.toLocaleLowerCase();\r\n\t\t\t\t\t\tif(type==\"image/jpeg\"||type==\"image/png\"){\r\n\t\t\t\t\t\t\tconst url=\"data:\"+type+\";base64,\"+item.content;\r\n\t\t\t\t\t\t\tconst detail=\"high\";\r\n\t\t\t\t\t\t\tconst content=[{type:\"image_url\",image_url:{url,detail}}];\r\n\t\t\t\t\t\t\tlist.push({role:item.role,content});\r\n\t\t\t\t\t\t\techo(\"[MULTI] image_url content attached to payload\");\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(item.name==\"content\"){\r\n\t\t\t\t\t\t// TODO: support other encodings\r\n\t\t\t\t\t}\r\n\t\t\t\t\tconst name=item.name||\"anon\";\r\n\t\t\t\t\tconst text=\"[\"+name+\"] \"+item.content;\r\n\t\t\t\t\tconst content=[{type:\"text\",text}];\r\n\t\t\t\t\tlist.push({role:item.role,content});\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"tool\":\r\n\t\t\t\t// TODO: tool result history is ok\r\n\t\t\t\tlist.push({...item});\r\n\t\t\t\t//({role:\"tool\",tool_call_id:result.tool_call_id,name:result.name,content:result.content});\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\treturn list;\r\n}\r\n\r\n// inline mode 📘 flattens images as inline parts\r\n\r\nfunction inlineHistory(history){\r\n\tconst list=[];\r\n\tlet blobType=\"\";\r\n\tfor(const _item of history){\r\n\t\tconst item={..._item};\r\n\t\tswitch(item.role){\r\n\t\t\tcase \"system\":\r\n\t\t\t\tlist.push({role:\"system\",content:item.content});\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"assistant\":\r\n\t\t\t\tif(item.tool_calls){\r\n\t\t\t\t\tlist.push({role:item.role,content:item.content,tool_calls:item.tool_calls});\r\n\t\t\t\t}else{\r\n\t\t\t\t\tlist.push({role:\"assistant\",content:item.content});\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"user\":{\r\n\t\t\t\t\tif(item.name==\"blob\"){\r\n\t\t\t\t\t\tconst blob=JSON.parse(item.content);\r\n\t\t\t\t\t\tblobType=blob.type;\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(item.name==\"image\"){\r\n\t\t\t\t\t\tconst type=blobType.toLocaleLowerCase();\r\n\t\t\t\t\t\tif(type==\"image/jpeg\"||type==\"image/png\"){\r\n\t\t\t\t\t\t\tconst contents=[{parts:[{inlineData:{mimeType:type,data:item.content}}]}];\r\n\t\t\t\t\t\t\tlist.push({role:\"user\",contents});\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(item.name==\"content\"){\r\n\t\t\t\t\t\t// TODO: support other encodings\r\n\t\t\t\t\t}\r\n\t\t\t\t\tconst name=item.name||\"anon\";\r\n\t\t\t\t\tconst text=\"[\"+name+\"] \"+item.content;\r\n\t\t\t\t\tconst content=[{type:\"text\",text}];\r\n\t\t\t\t\tlist.push({role:item.role,content});\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"tool\":\r\n\t\t\t\t// TODO: tool result history is ok\r\n\t\t\t\tlist.push({...item});\r\n\t\t\t\t//({role:\"tool\",tool_call_id:result.tool_call_id,name:result.name,content:result.content});\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\treturn list;\r\n}\r\n\r\n\r\n// fountain relay\r\n// returns spend\r\n// warning - tool_calls resolved with recursion\r\n\r\nasync function relay(depth:number) {\r\n\tconst debugging=roha.config.debugging&&roha.config.verbose;\r\n\tconst now=performance.now();\r\n\tconst verbose=roha.config.verbose;\r\n\tconst info=(grokModel in modelSpecs)?modelSpecs[grokModel]:null;\r\n\tconst strictMode=info&&info.strict;\r\n\tconst multiMode=info&&info.multi;\r\n//\tconst inlineMode=info&&info.inline;\r\n\tconst modelAccount=grokModel.split(\"@\");\r\n\tconst model=modelAccount[0];\r\n\tconst account=modelAccount[1];\r\n\tconst endpoint=rohaEndpoint[account];\r\n\tconst config=modelAccounts[account];\r\n\tconst mut=mutName(model);\r\n\tlet payload={model,mut};\r\n\tlet spend=0;\r\n\tlet elapsed=0;\r\n//\tif(verbose)echo(\"[RELAY] \",depth,mut);\r\n\ttry {\r\n\t// prepare payload\r\n\t\tpayload={model};\r\n\t\tif(strictMode){\r\n\t\t\tpayload.messages=strictHistory(rohaHistory);\r\n\t\t}else if(multiMode){\r\n\t\t\t// warning - not compatible with google generative ai api\r\n\t\t\tpayload.messages=multiHistory(rohaHistory)\r\n\t\t}else{\r\n\t\t\tpayload.messages=[...rohaHistory];\r\n\t\t}\r\n\r\n\t\t// if(config.hasCache) payload.cache_tokens=true;\r\n\r\n\t// use tools\r\n\t\tconst useTools=grokFunctions&&roha.config.tools;\r\n\t\tif(useTools){\r\n\t\t\tpayload.tools=rohaTools;\r\n\t\t}\r\n\t// check cold:true in o4-mini-2025-04-16@openai before enabling temperature\r\n\t\tif(info && !info.cold){\r\n\t\t\tpayload.temperature=grokTemperature;\r\n\t\t}\r\n\t\tif(info && info.max_tokens){\r\n\t\t\tpayload.max_tokens=info.max_tokens;\r\n\t\t}\r\n\t\tif(info && info.pricing.length>3 && grokThink>0){\r\n\t\t\tpayload.config={thinkingConfig:{thinkingBudget:grokThink}};\r\n\t\t}\r\n\t\tif(debugging){\r\n\t\t\tconst dump=JSON.stringify(payload,null,\"\\t\");\r\n\t\t\techo(\"[RELAY] payload\",dump);\r\n\t\t}\r\n\r\n\t\t// [RELAY] endpoint chat completions.create\r\n\t\t// this call can throw from DeepSeek API\r\n\r\n\t\tconst completion=await endpoint.chat.completions.create(payload);\r\n\t\telapsed=(performance.now()-now)/1000;\r\n\r\n\t\t// TODO: detect -latest modelnames rerouting to real instances\r\n\t\tif (completion.model != model) {\r\n\t\t\techo(\"[RELAY] model reset\",completion.model||\"???\",model);\r\n\t\t\tconst name=completion.model+\"@\"+account;\r\n\t\t\tresetModel(name);\r\n\t\t}\r\n\t\tif (verbose) {\r\n\t\t\t// echo(\"relay completion:\" + JSON.stringify(completion, null, \"\\t\"));\r\n\t\t}\r\n\t\t// const system=completion.system_fingerprint;\r\n\t\tconst usage=completion.usage;\r\n\t\tconst size=measure(rohaHistory);\r\n\t\tconst spent=[usage.prompt_tokens | 0,usage.completion_tokens | 0];\r\n\t\tconst emoji=config?(config.emoji||\"\"):\"\";\r\n\t\tgrokUsage += spent[0]+spent[1];\r\n\t\t// echo(\"[relay] debugging spend 0\",grokModel,usage);\r\n\t\t// todo: roha.mut[] -> roha.mutspec[]\r\n\t\tif(grokModel in roha.mut){\r\n\t\t\tconst mutspec=roha.mut[grokModel];\r\n\t\t\tmutspec.relays=(mutspec.relays || 0) + 1;\r\n\t\t\tmutspec.elapsed=(mutspec.elapsed || 0) + elapsed;\r\n\t\t\t// echo(\"debugging spend 1\",grokModel);\r\n\t\t\tif(grokModel in modelSpecs){\r\n\t\t\t\tconst rate=modelSpecs[grokModel].pricing||[0,0];\r\n\t\t\t\tconst tokenRate=rate[0];\r\n\t\t\t\tconst outputRate=rate[rate.length>2?2:1];\r\n\t\t\t\tif(rate.length>2){\r\n\t\t\t\t\tconst cacheRate=rate[1];\r\n\t\t\t\t\tconst cached=usage.prompt_tokens_details?(usage.prompt_tokens_details.cached_tokens||0):0;\r\n\t\t\t\t\tspend=spent[0]*tokenRate/1e6+spent[1]*outputRate/1e6+cached*cacheRate/1e6;\r\n\r\n\t\t\t\t}else{\r\n\t\t\t\t\tspend=spent[0]*tokenRate/1e6+spent[1]*outputRate/1e6;\r\n\t\t\t\t}\r\n\t\t\t\tmutspec.cost+=spend;\r\n\t\t\t\tconst lode=roha.lode[account];\r\n\t\t\t\tif(lode) {\r\n\t\t\t\t\tconst credit=lode.credit||0;\r\n\t\t\t\t\tlode.credit=credit-spend;\r\n\t\t\t\t\tif (verbose) {\r\n\t\t\t\t\t\tconst summary=\"{account:\"+account+\",spent:\"+spend.toFixed(4)+\",balance:\"+(lode.credit).toFixed(4)+\"}\";\r\n\t\t\t\t\t\techo(summary);\r\n\t\t\t\t\t}\r\n\t\t\t\t}else{\r\n\t\t\t\t\techo(\"no lode for account\",account);\r\n\t\t\t\t}\r\n\t\t\t\tawait writeForge();\r\n\t\t\t}else{\r\n\t\t\t\tif(verbose){\r\n\t\t\t\t\techo(\"modelSpecs not found for\",grokModel);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tmutspec.prompt_tokens=(mutspec.prompt_tokens|0)+spent[0];\r\n\t\t\tmutspec.completion_tokens=(mutspec.completion_tokens|0)+spent[1];\r\n\t\t\t// TODO: explain hasForge false condition\r\n\t\t\tif(useTools && mutspec.hasForge!==true){\r\n\t\t\t\techo(\"[RELAY] enabling forge for\",mut);\r\n\t\t\t\tmutspec.hasForge=true;\r\n\t\t\t\tawait writeForge();\r\n\t\t\t}\r\n\t\t}else{\r\n\t\t\techo(\"[RELAY] debugging spend 2\");\r\n\t\t}\r\n\r\n\t\tconst details=(usage.prompt_tokens_details)?JSON.stringify(usage.prompt_tokens_details):\"\";\r\n\r\n//\t\tif(usage.prompt_tokens_details) echo(JSON.stringify(usage.prompt_tokens_details));\r\n//\t\tif(usage.prompt_tokens_details) echo(JSON.stringify(usage));\r\n\r\n\t\tlet cost=\"(\"+usage.prompt_tokens+\"+\"+usage.completion_tokens+\"[\"+grokUsage+\"])\";\r\n\t\tif(spend) {\r\n\t\t\tcost=\"$\"+spend.toFixed(3);\r\n\t\t}\r\n\r\n\t\t// StatusBlock status bar\r\n\t\tconst echostatus=(depth==0);\r\n\t\tif(echostatus){\r\n\t\t\tconst temp=grokTemperature.toFixed(1)+\"°\";\r\n\t\t\tconst forge = roha.config.tools? (grokFunctions ? \"🪣\" : \"🐸\") : \"🪠\";\r\n\t\t\tconst modelSpec=[rohaTitle,rohaModel,emoji,grokModel,temp,forge e,cost,size,elapsed.toFixed(2)+\"s\"];\r\n\t\t\tconst status=\" \"+modelSpec.join(\" \")+\" \";\r\n\t\t\tif (roha.config.ansi)\r\n\t\t\t\techo(StatusBlock+status+AnsiReset);\r\n\t\t\telse\r\n\t\t\t\techo(status);\r\n\t\t}\r\n\r\n\t\tconst replies=[];\r\n\t\tfor (const choice of completion.choices) {\r\n\t\t\tconst calls=choice.message.tool_calls;\r\n\t\t\t// choice has index message{role,content,refusal,annotations} finish_reason\r\n\t\t\tif (calls) {\r\n\t\t\t\tconst count=increment(\"calls\");\r\n\t\t\t\tif(verbose) echo(\"[RELAY] calls in progress\",depth,count)\r\n\t\t\t\t// TODO: map toolcalls index\r\n\t\t\t\tconst toolCalls=calls.map((tool, index) => ({\r\n\t\t\t\t\tid: tool.id,\r\n\t\t\t\t\ttype: \"function\",\r\n\t\t\t\t\tfunction: {name: tool.function.name,arguments: tool.function.arguments || \"{}\"}\r\n\t\t\t\t}));\r\n\t\t\t\tconst toolResults=await processToolCalls(calls);\r\n\t\t\t\tfor (const result of toolResults) {\r\n\t\t\t\t\t// kimi does not like this\r\n\t\t\t\t\t// todo: mess with role tool\r\n\t\t\t\t\t// todo: google needs user not assistant\r\n\t\t\t\t\t// todo: use assistant and modify in gemini tools\r\n\t\t\t\t\tconst item={role:\"assistant\",tool_call_id:result.tool_call_id,title:result.name,content:result.content};\r\n\t\t\t\t\tdebugValue(\"item\",item);\r\n\t\t\t\t\tif(verbose)echo(\"[RELAY] pushing tool result\",item);\r\n\t\t\t\t\trohaHistory.push(item);\r\n\t\t\t\t}\r\n\t\t\t\t// new behavior, message content comes after tool reports\r\n\t\t\t\tconst content=choice.message.content;\r\n\t\t\t\tif(content){\r\n\t\t\t\t\tif(verbose)echo(\"[RELAY] pushing asssistant model\",depth,payload.model,mut,content);\r\n//\t\t\t\t\trohaHistory.push({role:\"assistant\",name:payload.model,mut,content,tool_calls:toolCalls});\r\n\t\t\t\t}\r\n\t\t\t\t// warning - here be dragons\r\n\t\t\t\tconst spent=await relay(depth+1); // Recursive call to process tool results\r\n\t\t\t\tspend+=spent;\r\n\t\t\t}\r\n\r\n\t\t\tconst reasoning=choice.message.reasoning_content;\r\n\t\t\tif(reasoning && roha.config.reasonoutloud){\r\n\t\t\t\tprint(\"=== reasoning ===\");\r\n\t\t\t\t// print chain of thought\r\n\t\t\t\tif (roha.config.ansi) {\r\n\t\t\t\t\tprint(mdToAnsi(reasoning));\r\n\t\t\t\t} else {\r\n\t\t\t\t\tprint(wordWrap(reasoning));\r\n\t\t\t\t}\r\n\t\t\t\tprint(\"=================\");\r\n\t\t\t}\r\n\r\n\t\t\tconst reply=choice.message.content;\r\n\t\t\tif(reply){\r\n\t\t\t\tif (roha.config.ansi) {\r\n\t\t\t\t\tprint(mdToAnsi(reply));\r\n\t\t\t\t} else {\r\n\t\t\t\t\tprint(wordWrap(reply));\r\n\t\t\t\t}\r\n\t\t\t\treplies.push(reply);\r\n\t\t\t}\r\n\t\t}\r\n//\t\tconst name=rohaModel||\"mut1\";\r\n\t\tif(replies.length){\r\n\t\t\tlet content=replies.join(\"\\n<eom>\\n\");\r\n\t\t\trohaHistory.push({role:\"assistant\",mut,emoji,name:model,content,elapsed,price:spend});\r\n\t\t}\r\n\t} catch (error) {\r\n\t\tconst line=error.message || String(error);\r\n\t\tif(line.includes(\"DeepSeek API error\")){\r\n\t\t\techo(line+\" - maximum prompt length exceeded?\");\r\n\t\t\techo(cleanupRequired);\r\n\t\t\treturn spend;\r\n\t\t}\r\n\t\tif(line.includes(\"maximum prompt length\")){\r\n\t\t\techo(\"Oops, maximum prompt length exceeded.\");\r\n\t\t\techo(line);\r\n\t\t\techo(cleanupRequired);\r\n\t\t\treturn spend;\r\n\t\t}\r\n\t\tif(line.includes(\"maximum context length\")){\r\n\t\t\techo(\"Oops, maximum context length exceeded.\");\r\n\t\t\techo(cleanupRequired);\r\n\t\t\treturn spend;\r\n\t\t}\r\n\t\tconst HuggingFace402=\"You have exceeded your monthly included credits for Inference Providers. Subscribe to PRO to get 20x more monthly included credits.\"\r\n\t\tif(line.includes(HuggingFace402)){\r\n\t\t\techo(\"[RELAY] Hugging Face Error depth\",depth,line);\r\n\t\t\treturn spend;\r\n\t\t}\r\n\t\tconst KimiK2400=\"Your request exceeded model token limit\";\r\n\t\tif(line.includes(KimiK2400)){\r\n\t\t\techo(\"[RELAY] Kimi K2 Error depth\",depth,line);\r\n\t\t\treturn spend;\r\n\t\t}\r\n\t\t// error:{\"type\":\"error\",\"error\":{\"type\":\"rate_limit_error\",\r\n\t\tconst err=(error.error&&error.error.error)?error.error.error:{};\r\n\t\tif(err.type==\"rate_limit_error\"||err.type==\"invalid_request_error\"){\r\n\t\t\techo(\"Oops.\",err.type,err.message);\r\n\t\t\techo(cleanupRequired);\r\n\t\t\treturn spend;\r\n\t\t}\r\n\r\n\t\tconst GenAIError=\"[GoogleGenerativeAI Error]\";\r\n\t\tif(line.includes(GenAIError)){\r\n\t\t\techo(\"[GEMINI] unhandled error\",error.message);\r\n\t\t\treturn spend;\r\n\t\t}\r\n\r\n\t\t// Unrecognized request argument supplied: cache_tokens\r\n\t\tconst NoFunctions400=\"does not support Function Calling\";\r\n\t\tif(grokFunctions){\r\n\t\t\tif(line.includes(NoFunctions400)){\r\n\t\t\t\tif(grokModel in roha.mut) {\r\n\t\t\t\t\techo(\"mut\",grokModel,\"noFunctions\",true);\r\n\t\t\t\t\troha.mut[grokModel].noFunctions=true;\r\n\t\t\t\t\tawait writeForge();\r\n\t\t\t\t}\r\n\t\t\t\techo(\"resetting grokFunctions\")\r\n\t\t\t\tgrokFunctions=false;\r\n\t\t\t\treturn spend;\r\n\t\t\t}\r\n\t\t}\r\n\t\t// 400 Bad Request\r\n\t\t//unhandled error line: 400 status code (no body)+\r\n\t\t//Unsupported value: 'temperature' does not support 0.8 with this model.\r\n\t\t// tooling 1 unhandled error line: 400 status code (no body)\r\n\r\n\t\t//\t\techo(\"unhandled error line\",line);\r\n\r\n\t\techo(\"[RELAY] unhandled error\",error.message);\r\n\t\techo(\"[RELAY]\",error.stack);\r\n\t\tif(debugging){\r\n\t\t\tconst dump=JSON.stringify(payload,null,\"\\t\");\r\n\t\t\techo(\"[RELAY] payload\",dump);\r\n\t\t}\r\n\t}\r\n\treturn spend;\r\n}\r\n\r\n// while true promptForge, callCommand and solicit completion\r\n// note - google and deepseek api provides alternative endpoint for this function\r\n\r\nasync function chat() {\r\n\tdance:\r\n\twhile (true) {\r\n\t\tconst lines=[];\r\n\t\tconst images=[];\r\n//\t\techo(ansiMoveToEnd);\r\n\t\twhile (true) {\r\n\t\t\tawait flush();\r\n\t\t\tlet line=\"\";\r\n\t\t\tif(listCommand){\r\n\t\t\t\tline=await promptForge(listCommand+\" #\");\r\n\t\t\t\tif(line.startsWith(\"//\")||!line.startsWith(\"/\")){\r\n\t\t\t\t\tif(line.length&&isFinite(line)){\r\n\t\t\t\t\t\tlet index=line|0;\r\n\t\t\t\t\t\tawait callCommand(listCommand+\" \"+index);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tlistCommand=\"\";\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\tlistCommand=\"\";\r\n\t\t\t}else if(creditCommand){\r\n\t\t\t\tline=await promptForge(\"$\");\r\n\t\t\t\tif(line.startsWith(\"//\")||!line.startsWith(\"/\")){\r\n\t\t\t\t\tif(line.length&&isFinite(line)){\r\n\t\t\t\t\t\tawait creditCommand(line);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcreditCommand=\"\";\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\tcreditCommand=\"\";\r\n\t\t\t}else{\r\n\t\t\t\tline=await promptForge(lines.length?\"+\":rohaPrompt);\r\n\t\t\t}\r\n\t\t\tif (line === \"\") {\r\n\t\t\t\tif(roha.config.returntopush && !lines.length) {\r\n\t\t\t\t\techo(\"auto pushing...\");\r\n\t\t\t\t\tawait callCommand(\"push\");\r\n\t\t\t\t\tawait relay(0);\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tif(!line) break;//simon was here\r\n\t\t\tif (line === \"exit\") {\r\n\t\t\t\tbreak dance;\r\n\t\t\t}\r\n\r\n\t\t\tif (line.startsWith(\"/\")&&!line.startsWith(\"//\")) {\r\n\t\t\t\tconst command=line.substring(1).trim();\r\n\t\t\t\tlet dirty=await callCommand(command);\r\n\t\t\t\tif(dirty){\r\n\t\t\t\t\tlines.push(warnDirty);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tlines.push(line.trim());\r\n\t\t\tawait logForge(line,rohaUser)\r\n\t\t}\r\n\r\n\t\tif (lines.length){\r\n\t\t\tconst query=lines.join(\"\\n\");\r\n\t\t\tif(query.length){\r\n\t\t\t\tconst info=(grokModel in modelSpecs)?modelSpecs[grokModel]:null;\r\n\t\t\t\tconst name=rohaNic;//||rohaUser;\r\n\t\t\t\trohaHistory.push({ role: \"user\", name, content: query });\r\n\t\t\t\tawait relay(0);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\nconst areSame = (arr1, arr2) => {\r\n  return arr1&&arr2&&(arr1.length === arr2.length) && (arr1.every(item => arr2.includes(item)));\r\n};\r\n\r\n// forge uses rohaPath to boot\r\n\r\nlet forgeExists=await pathExists(forgePath);\r\nif(!forgeExists){\r\n\tawait Deno.mkdir(forgePath);\r\n\techo(\"Created path\",forgePath);\r\n\tforgeExists=true;\r\n}\r\nconst fileExists=await pathExists(rohaPath);\r\nif (!fileExists) {\r\n\tawait Deno.writeTextFile(rohaPath, JSON.stringify(emptyRoha));\r\n\techo(\"Created forge\",rohaPath);\r\n}\r\n\r\n// forge lists models from active accounts\r\n\r\necho(rohaTitle,\"running from \"+rohaPath);\r\n\r\nawait flush();\r\nawait readForge();\r\nconst rohaEndpoint={};\r\nfor(const account in modelAccounts){\r\n\tconst t=performance.now();\r\n\tconst endpoint=await connectAccount(account);\r\n\tconst elapsed=(performance.now()-t)/1000;\r\n\tif(endpoint) {\r\n\t\tconst count=endpoint.modelList?.length||0;\t\t//\",endpoint.modelList\r\n\t\tif(roha.config.verbose){\r\n\t\t\techo(\"[FORGE] Connected to\",account,count,elapsed.toFixed(2)+\"s\");\r\n\t\t}\r\n\t\trohaEndpoint[account]=endpoint;\r\n\t\tspecAccount(account);\r\n\t\tconst lode=roha.lode[account];\r\n\r\n//\t\techo(\"[SPEW]\",endpoint.modelList);\r\n\r\n\t\tif(!areSame(lode.modelList,endpoint.modelList)){\r\n\t\t\techo(\"[FORGE] modifying modelList\");\r\n\t\t\tlode.modelList=endpoint.modelList;\r\n\t\t}\r\n//\t\techo(\"[FORGE] endpoint modelList\",endpoint.modelList);\r\n\t}else{\r\n\t\techoWarning(\"[FORGE] Endpoint failure for account\",account);\r\n\t}\r\n}\r\n\r\n// forge starts here, grok started this thing, blame grok\r\n\r\nawait flush();\r\n\r\nresetModel(roha.model||defaultModel);\r\n\r\nawait flush();\r\nlet sessions=increment(\"sessions\");\r\nif(sessions==0||roha.config.showWelcome){\r\n\techo(welcome);\r\n\tawait flush();\r\n}\r\n\r\nif(roha.config){\r\n\tif(roha.config.commitonstart) {\r\n\t\tif(roha.config.verbose){\r\n\t\t\techo(\"commitonstart\");\r\n\t\t}\r\n\t\tawait flush();\r\n\t\tawait commitShares();\r\n\t}\r\n}else{\r\n\troha.config={};\r\n}\r\nawait flush();\r\n\r\nif(roha.config.debugging){\r\n\tparseUnicode();\r\n}\r\n\r\n// signal handlers go here\r\n\r\nif(false){\r\n\tDeno.addSignalListener(\"SIGWINCH\", () => {\r\n\tconst size = Deno.consoleSize();\r\n\tconsole.log(\"Terminal resized\",size);\r\n\t});\r\n\tDeno.addSignalListener(\"SIGCONT\", () => {\r\n\tconst size = Deno.consoleSize();\r\n\tconsole.log(\"Terminal resized\",size);\r\n\t});\r\n}\r\n\r\n// Windows only supports ctrl-c (SIGINT), ctrl-break (SIGBREAK), and ctrl-close (SIGUP)\r\n\r\n// slops go here\r\n\r\nif(roha.config.slops){\r\n\tconst slops=[];\r\n\tconst slopnames=await readFileNames(slopPath,\".slop.ts\");\r\n\tfor(const name of slopnames){\r\n\t\tconst path=slopPath+\"/\"+name;\r\n\t\tconst len=await fileLength(path);\r\n\t\techo(\"[SLOPS] running slop\",name,len);\r\n\t\tconst url=\"file:///\"+path;\r\n\t\tconst worker=new Worker(url,{type: \"module\"});\r\n\t\tworker.onmessage = (message) => {\r\n\t\t\tconst payload={...message.data};\r\n\t\t\tswitch(payload.event){\r\n\t\t\t\tcase \"tick\":\r\n\t\t\t\t\tif(payload.frame){\r\n\t\t\t\t\t\tslopFrames.push(payload.frame);\r\n\t//\t\t\t\t\tconsole.log(payload.frame);\r\n\t//\t\t\t\t\tconst frame=SaveCursor + Home + payload.frame;\r\n\t//\t\t\t\t\tDeno.stdout.write(encoder.encode(frame));\r\n\t//\t\t\t\t\tconsole.log();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\techo(\"[SLOPS]\",name,payload);\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\tslops.push(worker);\r\n\t}\r\n}\r\n\r\nawait flush();\r\n\r\nlet rohaNic=roha.nic||\"nic\";\r\nconst sharecount=roha.sharedFiles?.length||0;\r\n\r\nlet termSize = Deno.consoleSize();\r\necho(\"console:\",termSize);\r\necho(\"user:\",{nic:rohaNic,user:rohaUser,sharecount,terminal:userterminal})\r\necho(\"use /help for latest and exit to quit\");\r\n\r\necho(\"filetype ts = \",fileType(\"ts\"));\r\n\r\nconst birds=padChars(bibli.spec.unicode.lexis.𓅷𓅽.codes);\r\necho(birds);\r\n\r\nif(roha.config.listenonstart){\r\n\tlistenService();\r\n}\r\nawait flush();\r\n\r\ntry {\r\n\tawait chat();\r\n} catch (error) {\r\n\tconsole.error(\"Slop Fountain has crashed, darn, this release will be stable soon:\", error);\r\n\tawait exitForge();\r\n\tDeno.exit(1);\r\n}\r\n\r\nawait exitForge();\r\nDeno.exit(0);\r\n"
		},
		{
			"role": "user",
			"name": "skid",
			"content": "hi am testing new file sharing\nFeel free to comment if shared files are new or different."
		},
		{
			"role": "assistant",
			"mut": "claude-sonnet-4",
			"emoji": "🌐",
			"name": "claude-sonnet-4-20250514",
			"content": "I'll fetch the file you referenced to take a look at it.",
			"elapsed": 2.8438231,
			"price": 0.003405
		},
		{
			"role": "user",
			"name": "skid",
			"content": "this is log of our conversation, it seems to stop?\n> /list\n000 system fountain 1.3.3 As a guest assistant language model please be mind (185)\n001 system ryzen5 models under test include claude-sonnet-4 (41)\n002 user blob {\"path\":\"C:/nitrologic/fountain/roha/slopfountain. (110)\n003 user content // slopfountain.ts - A research tool for dunking l (84578)\n004 user skid hi am testing new file sharing Feel free to commen (89)\n005 assistant claude-sonnet-4 I'll fetch the file you referenced to take a look (56) 🌐 0.0034 2.84s\nHistory size 85.06KB"
		},
		{
			"role": "user",
			"name": "skid",
			"content": "6\ndebugging is on,\nsorry I think I am missing some replies"
		}
	],
	"tools": [
		{
			"type": "function",
			"function": {
				"name": "read_time",
				"description": "Returns current local time",
				"parameters": {
					"type": "object",
					"properties": {},
					"required": []
				}
			}
		},
		{
			"type": "function",
			"function": {
				"name": "submit_file",
				"description": "Submit a file for review",
				"parameters": {
					"type": "object",
					"properties": {
						"contentType": {
							"type": "string"
						},
						"content": {
							"type": "string"
						}
					},
					"required": [
						"contentType",
						"content"
					]
				}
			}
		},
		{
			"type": "function",
			"function": {
				"name": "fetch_file",
				"description": "Request a file for analysis",
				"parameters": {
					"type": "object",
					"properties": {
						"fileName": {
							"type": "string"
						}
					},
					"required": [
						"fileName"
					]
				}
			}
		},
		{
			"type": "function",
			"function": {
				"name": "tag_slop",
				"description": "Attach description to code tag and share Fountain objects",
				"parameters": {
					"type": "object",
					"properties": {
						"name": {
							"type": "string"
						},
						"type": {
							"type": "string",
							"description": "forge category",
							"enum": [
								"code",
								"session",
								"share",
								"lode"
							]
						},
						"description": {
							"type": "string"
						}
					},
					"required": [
						"name",
						"type",
						"description"
					]
				}
			}
		}
	],
	"temperature": 1
}










	"command-a-03-2025@cohere":{
		"pricing":[0.50,2.0],
		"purpose":"canadian something"
	},
	"command-r-plus-08-2024@cohere":{
		"pricing":[1.50,2.0],
		"purpose":"canadian 128K context window"
	},
	"command-r@cohere":{
		"pricing":[1.50,2.0],
		"purpose":"canadian 128K context window"
	},
	"command-a-vision@cohere":{
		"pricing":[1.50,2.0],
		"purpose":"canadian 128K context window"
	},


		if (e_shstrndx < e_shnum) {
			const shstrtab_shoff = e_shoff + (e_shstrndx * e_shentsize);
			shstrtab_offset = view.getUint32(shstrtab_shoff + 16, true);
			const shstrtab_size = view.getUint32(shstrtab_shoff + 20, true);
			if (shstrtab_offset + shstrtab_size > elfData.length) {
				console.error("Section header string table out of bounds");
				return false;
			}
		}

			let name = '';
			for (let j = sh_name; ; j++) {
				const char = view.getUint8(shoff + j);
				if (!char) break;
				name += String.fromCharCode(char);
			}

Task slopshop deno run --allow-net --allow-env --allow-sys --allow-read slopshop.ts
[SHLOP] slop shop 0.2
[SHLOP] serving slopnames
[SHLOP] [
  "test1-tick1.slop.js",
  "test2-bloks2.slop.js",
  "test3-bloks.slop.js",
  "test4-bloks.slop.js",
  "test5-bloks.slop.js",
  "test6-r3000.slop.js",
  "test7-logview.slop.js"
]
[SHLOP] enter to start type exit to end

sprites2= 26
caps.length 26
parseElf { cpuclass: 1, lsb: 1, fam: 8 }
entry point 80010000
Strings: [ "bios.s" ]
]Symbols: [
  { name: "", value: 0, size: 0, type: 0, binding: 0 },
  { name: "", value: 2147549184, size: 0, type: 3, binding: 0 },
  { name: "", value: 4194304, size: 0, type: 3, binding: 0 },
  { name: "", value: 4194328, size: 0, type: 3, binding: 0 },
  { name: "", value: 2147552164, size: 0, type: 3, binding: 0 },
  { name: "", value: 2147556452, size: 0, type: 3, binding: 0 },
  { name: "", value: 0, size: 0, type: 3, binding: 0 },
  { name: "", value: 0, size: 0, type: 3, binding: 0 },
  { name: "", value: 0, size: 0, type: 3, binding: 0 },
  { name: "", value: 0, size: 0, type: 3, binding: 0 },
  { name: "", value: 0, size: 0, type: 3, binding: 0 },
  { name: "", value: 0, size: 0, type: 3, binding: 0 },
  { name: "", value: 0, size: 0, type: 3, binding: 0 },
  { name: "", value: 0, size: 0, type: 3, binding: 0 },
  { name: "", value: 0, size: 0, type: 3, binding: 0 },
  { name: "", value: 0, size: 0, type: 3, binding: 0 },
  { name: "", value: 0, size: 0, type: 3, binding: 0 },
  { name: "bios.s", value: 0, size: 0, type: 4, binding: 0 },
  { name: "", value: 0, size: 0, type: 4, binding: 0 },
  {
    name: "(crosstool-NG 1.27.0.78_d527ff4_dirty) 15.1.0",
    value: 2147589216,
    size: 0,
    type: 0,
    binding: 0
  },
  {
    name: "sstool-NG 1.27.0.78_d527ff4_dirty) 15.1.0",
    value: 2147556452,
    size: 0,
    type: 0,
    binding: 1
  },
  {
    name: "NG 1.27.0.78_d527ff4_dirty) 15.1.0",
    value: 2147556460,
    size: 4,
    type: 1,
    binding: 1
  },
  {
    name: ".78_d527ff4_dirty) 15.1.0",
    value: 2147549720,
    size: 744,
    type: 2,
    binding: 1
  },
  {
    name: "rty) 15.1.0",
    value: 2147551392,
    size: 704,
    type: 2,
    binding: 1
  },
  { name: "\x14", value: 2147552096, size: 68, type: 2, binding: 1 },
  { name: "", value: 2147549184, size: 0, type: 0, binding: 1 },
  {
    name: "\x18\x02\x01\x80",
    value: 2147549184,
    size: 0,
    type: 0,
    binding: 1
  },
  { name: "", value: 2147549204, size: 516, type: 2, binding: 1 },
  { name: "", value: 2147556452, size: 0, type: 0, binding: 1 },
  { name: "@üÿÿÿ", value: 2147556452, size: 4, type: 1, binding: 1 },
  { name: "", value: 2147550464, size: 928, type: 2, binding: 1 },
  { name: "", value: 2147556452, size: 0, type: 0, binding: 1 },
  { name: "", value: 2147556464, size: 0, type: 0, binding: 1 },
  { name: "", value: 2147556452, size: 0, type: 0, binding: 1 },
  { name: "ÿ", value: 2147556456, size: 4, type: 1, binding: 1 }
]
Strings: [
  "mipsrom.cpp",    "_gp",
  "_fdata",         "heapsize",
  "_Z9mallocmemi",  "_Z8availmemi",
  "boot",           "_ftext",
  "_Z8initheapPvi", "__bss_start",
  "heap",           "_Z7freememPv",
  "_edata",         "_end",
  "_fbss",          "freelist"
]
Strings: [
  ".symtab",        ".strtab",
  ".shstrtab",      ".text",
  ".MIPS.abiflags", ".reginfo",
  ".eh_frame",      ".sbss",
  ".stab",          ".stabstr",
  ".comment",       ".pdr",
  ".debug_aranges", ".debug_info",
  ".debug_abbrev",  ".debug_line",
  ".debug_str",     ".gnu.attributes",
  ".mdebug.abi32"
]



[SHLOP] enter to start type exit to end

sprites2= 26
caps.length 26
parseElf { cpuclass: 1, lsb: 1, fam: 8 }
entry point 80010000
Strings: [ "bios.s" ]
]Symbols: [
  { name: "", value: 0, size: 0, type: 0, binding: 0 },
  { name: "", value: 2147549184, size: 0, type: 3, binding: 0 },
  { name: "", value: 4194304, size: 0, type: 3, binding: 0 },
  { name: "", value: 4194328, size: 0, type: 3, binding: 0 },
  { name: "", value: 2147552164, size: 0, type: 3, binding: 0 },
  { name: "", value: 2147556452, size: 0, type: 3, binding: 0 },
  { name: "", value: 0, size: 0, type: 3, binding: 0 },
  { name: "", value: 0, size: 0, type: 3, binding: 0 },
  { name: "", value: 0, size: 0, type: 3, binding: 0 },
  { name: "", value: 0, size: 0, type: 3, binding: 0 },
  { name: "", value: 0, size: 0, type: 3, binding: 0 },
  { name: "", value: 0, size: 0, type: 3, binding: 0 },
  { name: "", value: 0, size: 0, type: 3, binding: 0 },
  { name: "", value: 0, size: 0, type: 3, binding: 0 },
  { name: "", value: 0, size: 0, type: 3, binding: 0 },
  { name: "", value: 0, size: 0, type: 3, binding: 0 },
  { name: "", value: 0, size: 0, type: 3, binding: 0 },
  { name: "bios.s", value: 0, size: 0, type: 4, binding: 0 },
  { name: "", value: 0, size: 0, type: 4, binding: 0 },
  {
    name: "(crosstool-NG 1.27.0.78_d527ff4_dirty) 15.1.0",
    value: 2147589216,
    size: 0,
    type: 0,
    binding: 0
  },
  {
    name: "sstool-NG 1.27.0.78_d527ff4_dirty) 15.1.0",
    value: 2147556452,
    size: 0,
    type: 0,
    binding: 1
  },
  {
    name: "NG 1.27.0.78_d527ff4_dirty) 15.1.0",
    value: 2147556460,
    size: 4,
    type: 1,
    binding: 1
  },
  {
    name: ".78_d527ff4_dirty) 15.1.0",
    value: 2147549720,
    size: 744,
    type: 2,
    binding: 1
  },
  {
    name: "rty) 15.1.0",
    value: 2147551392,
    size: 704,
    type: 2,
    binding: 1
  },
  { name: "\x14", value: 2147552096, size: 68, type: 2, binding: 1 },
  { name: "", value: 2147549184, size: 0, type: 0, binding: 1 },
  {
    name: "\x18\x02\x01\x80",
    value: 2147549184,
    size: 0,
    type: 0,
    binding: 1
  },
  { name: "", value: 2147549204, size: 516, type: 2, binding: 1 },
  { name: "", value: 2147556452, size: 0, type: 0, binding: 1 },
  { name: "@üÿÿÿ", value: 2147556452, size: 4, type: 1, binding: 1 },
  { name: "", value: 2147550464, size: 928, type: 2, binding: 1 },
  { name: "", value: 2147556452, size: 0, type: 0, binding: 1 },
  { name: "", value: 2147556464, size: 0, type: 0, binding: 1 },
  { name: "", value: 2147556452, size: 0, type: 0, binding: 1 },
  { name: "ÿ", value: 2147556456, size: 4, type: 1, binding: 1 }
]
Strings: [
  "mipsrom.cpp",    "_gp",
  "_fdata",         "heapsize",
  "_Z9mallocmemi",  "_Z8availmemi",
  "boot",           "_ftext",
  "_Z8initheapPvi", "__bss_start",
  "heap",           "_Z7freememPv",
  "_edata",         "_end",
  "_fbss",          "freelist"
]
Strings: [
  ".symtab",        ".strtab",
  ".shstrtab",      ".text",
  ".MIPS.abiflags", ".reginfo",
  ".eh_frame",      ".sbss",
  ".stab",          ".stabstr",
  ".comment",       ".pdr",
  ".debug_aranges", ".debug_info",
  ".debug_abbrev",  ".debug_line",
  ".debug_str",     ".gnu.attributes",
  ".mdebug.abi32"
]
test6 homegrown mips r3000 emulator
error: Uncaught (in worker "") (in promise) TypeError: Cannot read properties of undefined (reading 'toString')
console.log("0x"+startVector.toString(16));
			     ^
    at file:///C:/nitrologic/fountain/slop/test6-r3000.slop.js:643:30
    at eventLoopTick (ext:core/01_core.js:179:7)
error: Uncaught (in promise) Error: Unhandled error in child worker.
    at Worker.#pollControl (ext:runtime/11_workers.js:204:19)
    at eventLoopTick (ext:core/01_core.js:179:7)

C:\nitrologic\fountain>^[












export function parseElf1(elfData,ram) {
	const RamSize=ram.length;
	const view=new DataView(elfData.buffer);
// Verify ELF header
	if (view.getUint32(0, true) !== ELF_MAGIC) {
		console.error("Invalid ELF magic");
		return false;
	}
	const cpuclass=view.getUint8(4);
	const lsb=view.getUint8(5);
	const fam=view.getUint16(18, true);
	console.log("parseElf",{cpuclass,lsb,fam});
	if (cpuclass !== ELF_CLASS32 || lsb !== ELF_DATA2LSB || fam !== ELF_EM_MIPS) {
		console.error("Unsupported ELF format (not 32-bit, little-endian MIPS)");
		return false;
	}
	// Read ELF header fields
	const e_entry=view.getUint32(24, true); // Entry point address
	const e_phoff=view.getUint32(28, true); // Program header offset
	const e_shoff = view.getUint32(32, true);
	const e_phnum=view.getUint16(44, true); // Number of program headers
	const e_phentsize=view.getUint16(42, true); // Size of each program header

	const pc_mask=0x00fffffc;

	console.log("entry point",e_entry.toString(16));
	// Load program segments
	for (let i=0; i < e_phnum; i++) {
		const phoff=e_phoff + i * e_phentsize;
		const p_type=view.getUint32(phoff, true);
		const p_offset=view.getUint32(phoff + 4, true);
		const p_vaddr=view.getUint32(phoff + 8, true);
		const p_filesz=view.getUint32(phoff + 16, true);
		const p_memsz=view.getUint32(phoff + 20, true);
		const vaddr24=p_vaddr&pc_mask;
		// Only load PT_LOAD segments (type 1)
		if (p_type===1) {
			// Ensure address is within ram bounds
			if (vaddr24 + p_memsz > RamSize) {
				console.error(`Segment at 0x${p_vaddr.toString(16)} exceeds RAM size`);
				return false;
			}
			// Copy segment data to ram
			const ramIdx=vaddr24 >> 2; // Word-aligned index
			for (let j=0; j < p_filesz; j += 4) {
				const val=view.getUint32(p_offset + j, true);
				ram[ramIdx + (j >> 2)]=val;
				const loc=vaddr24+j;
				const op=val;
//				if(true||j<32){
//					console.log(r3000.disassemble(op,loc));
//				}
			}
			// Zero-fill any remaining memory (if p_memsz > p_filesz, e.g., for .bss)
			for (let j=p_filesz; j < p_memsz; j += 4) {
				ram[ramIdx + (j >> 2)]=0;
			}
			console.log(`Loaded segment: vaddr=0x${p_vaddr.toString(16)}, size=0x${p_filesz.toString(16)}`);
		}
	}
	return e_entry;
}





ELF Header:
  Magic:   7f 45 4c 46 01 01 01 00 00 00 00 00 00 00 00 00
  Class:                             ELF32
  Data:                              2's complement, little endian
  Version:                           1 (current)
  OS/ABI:                            UNIX - System V
  ABI Version:                       0
  Type:                              EXEC (Executable file)
  Machine:                           MIPS R3000
  Version:                           0x1
  Entry point address:               0x80010000
  Start of program headers:          52 (bytes into file)
  Start of section headers:          9916 (bytes into file)
  Flags:                             0x1, noreorder, mips1
  Size of this header:               52 (bytes)
  Size of program headers:           32 (bytes)
  Number of program headers:         4
  Size of section headers:           40 (bytes)
  Number of section headers:         11
  Section header string table index: 10
mipsel-elf-nm: mips2.elf: no symbols
   text    data     bss     dec     hex filename
   1392       0      12    1404     57c mips2.elf

mips2.elf:     file format elf32-littlemips

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004dc  80010000  80010000  00002000  2**2
		  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .MIPS.abiflags 00000018  00400000  00400000  00001000  2**3
		  CONTENTS, ALLOC, LOAD, READONLY, DATA, LINK_ONCE_SAME_SIZE
  2 .reginfo      00000018  00400018  00400018  00002558  2**2
		  CONTENTS, READONLY, LINK_ONCE_SAME_SIZE
  3 .eh_frame     0000007c  800104dc  800104dc  000024dc  2**2
		  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .sbss         0000000c  80011558  80011558  00002558  2**2
		  ALLOC
  5 .comment      00000033  00000000  00000000  00002570  2**0
		  CONTENTS, READONLY
  6 .pdr          000000a0  00000000  00000000  000025a4  2**2
		  CONTENTS, READONLY
  7 .gnu.attributes 00000010  00000000  00000000  00002644  2**0
		  CONTENTS, READONLY
  8 .mdebug.abi32 00000000  00000000  00000000  00002654  2**0
		  CONTENTS, READONLY

1. Etymology & Origin
- Aeolian (Greek: Αἰολικός) refers to the Aeolians, one of the four major tribes of ancient Greece (alongside Dorians, Ionians, and Achaeans).
- Named after Aeolus, the mythical god of winds in Greek mythology (Ἄολος).

	addiu	$sp,$sp,-36
	add	$s8,$zero,$zero
	lw	$ra,0($sp)
	addiu	$sp,$sp,4


#mipsel-elf-gcc -v -march=mips1 -msoft-float -nostdlib -Ttext=0x80010000 -o test.elf test.c
#mipsel-elf-gcc -x c++ -march=mips1 -msoft-float -nostdlib -c -o test.o test.cpp


]parseElf { cpuclass: 1, lsb: 1, fam: 8 }
entry point 80010b70
400000 00010000 sll z0,at,0
400004 01000101 dw 0x40004
400008 00000000 nop
40000c 00000000 nop
400010 00000000 nop
400014 00000000 nop
Loaded segment: vaddr=0x400000, size=0x18
010000 3c1c1f80 lui gp,0x1f80
010004 3c1d8020 lui sp,-0x7fe0
010008 27bdffdc addiu sp,sp,-0x24
01000c 0000f020 add s8,z0,z0
010010 8fbf0000 lw ra,0x0(sp)
010014 27bd0004 addiu sp,sp,0x4
010018 03e00008 jr ra
01001c 00000000 nop
010020 00000000 nop
010024 27bdfff0 addiu sp,sp,-0x10
010028 afbe000c sw s8,0xc(sp)
01002c 03a0f025 or s8,sp,z0
010030 afc40010 sw a0,0x10(s8)
010034 afc50014 sw a1,0x14(s8)
010038 8fc20010 lw v0,0x10(s8)
01003c 00000000 nop
010040 afc20000 sw v0,0x0(s8)
010044 8fc20000 lw v0,0x0(s8)
010048 00000000 nop
01004c 3042000f andi v0,v0,0xf
010050 8fc30014 lw v1,0x14(s8)
010054 00000000 nop
010058 00621023 subu v0,v1,v0
01005c afc20014 sw v0,0x14(s8)
010060 8fc20000 lw v0,0x0(s8)
010064 00000000 nop
010068 2443000f addiu v1,v0,0xf
01006c 2402fff0 addiu v0,z0,-0x10
010070 00621024 and v0,v1,v0
010074 afc20000 sw v0,0x0(s8)
010078 8fc30014 lw v1,0x14(s8)
01007c 2402fff0 addiu v0,z0,-0x10
010080 00621024 and v0,v1,v0
010084 afc20014 sw v0,0x14(s8)
010088 8fc20000 lw v0,0x0(s8)
01008c 00000000 nop
010090 af82800c sw v0,-0x7ff4(gp)
010094 8fc20014 lw v0,0x14(s8)
010098 00000000 nop
01009c af828014 sw v0,-0x7fec(gp)
0100a0 8f82800c lw v0,-0x7ff4(gp)
0100a4 00000000 nop
0100a8 ac400000 sw z0,0x0(v0)
0100ac 8f82800c lw v0,-0x7ff4(gp)
0100b0 00000000 nop
0100b4 24420004 addiu v0,v0,0x4
0100b8 ac400000 sw z0,0x0(v0)
0100bc 8f82800c lw v0,-0x7ff4(gp)
0100c0 00000000 nop
0100c4 24420008 addiu v0,v0,0x8
0100c8 ac400000 sw z0,0x0(v0)
0100cc 8f82800c lw v0,-0x7ff4(gp)
0100d0 00000000 nop
0100d4 2442000c addiu v0,v0,0xc
0100d8 ac400000 sw z0,0x0(v0)
0100dc 8fc20014 lw v0,0x14(s8)
0100e0 00000000 nop
0100e4 00021083 sra v0,v0,2
0100e8 afc20000 sw v0,0x0(s8)
0100ec 8f83800c lw v1,-0x7ff4(gp)
0100f0 8fc40000 lw a0,0x0(s8)
0100f4 3c023fff lui v0,0x3fff
0100f8 3442fffc ori v0,v0,-0x4
0100fc 00821021 addu v0,a0,v0
010100 00021080 sll v0,v0,2
010104 00621021 addu v0,v1,v0
010108 2403ffff addiu v1,z0,-0x1
01010c ac430000 sw v1,0x0(v0)
010110 8f83800c lw v1,-0x7ff4(gp)
010114 8fc40000 lw a0,0x0(s8)
010118 3c023fff lui v0,0x3fff
01011c 3442fffd ori v0,v0,-0x3
010120 00821021 addu v0,a0,v0
010124 00021080 sll v0,v0,2
010128 00621021 addu v0,v1,v0
01012c 2403ffff addiu v1,z0,-0x1
010130 ac430000 sw v1,0x0(v0)
010134 8f83800c lw v1,-0x7ff4(gp)
010138 8fc40000 lw a0,0x0(s8)
01013c 3c023fff lui v0,0x3fff
010140 3442fffe ori v0,v0,-0x2
010144 00821021 addu v0,a0,v0
010148 00021080 sll v0,v0,2
01014c 00621021 addu v0,v1,v0
010150 2403ffff addiu v1,z0,-0x1
010154 ac430000 sw v1,0x0(v0)
010158 8f83800c lw v1,-0x7ff4(gp)
01015c 8fc40000 lw a0,0x0(s8)
010160 3c023fff lui v0,0x3fff
010164 3442ffff ori v0,v0,-0x1
010168 00821021 addu v0,a0,v0
01016c 00021080 sll v0,v0,2
010170 00621021 addu v0,v1,v0
010174 2403ffff addiu v1,z0,-0x1
010178 ac430000 sw v1,0x0(v0)
01017c 8fc20014 lw v0,0x14(s8)
010180 00000000 nop
010184 2442ffe0 addiu v0,v0,-0x20
010188 afc20014 sw v0,0x14(s8)
01018c 8f82800c lw v0,-0x7ff4(gp)
010190 00000000 nop
010194 24420010 addiu v0,v0,0x10
010198 af828010 sw v0,-0x7ff0(gp)
01019c 8f828010 lw v0,-0x7ff0(gp)
0101a0 00000000 nop
0101a4 afc20004 sw v0,0x4(s8)
0101a8 8fc20004 lw v0,0x4(s8)
0101ac 8fc30014 lw v1,0x14(s8)
0101b0 00000000 nop
0101b4 ac430000 sw v1,0x0(v0)
0101b8 8fc20004 lw v0,0x4(s8)
0101bc 00000000 nop
0101c0 24420004 addiu v0,v0,0x4
0101c4 ac400000 sw z0,0x0(v0)
0101c8 8fc20004 lw v0,0x4(s8)
0101cc 00000000 nop
0101d0 24420008 addiu v0,v0,0x8
0101d4 ac400000 sw z0,0x0(v0)
0101d8 8fc20014 lw v0,0x14(s8)
0101dc 00000000 nop
0101e0 00021083 sra v0,v0,2
0101e4 00401825 or v1,v0,z0
0101e8 3c023fff lui v0,0x3fff
0101ec 3442ffff ori v0,v0,-0x1
0101f0 00621021 addu v0,v1,v0
0101f4 00021080 sll v0,v0,2
0101f8 8fc30004 lw v1,0x4(s8)
0101fc 00000000 nop
010200 00621021 addu v0,v1,v0
010204 8fc30014 lw v1,0x14(s8)
010208 00000000 nop
01020c ac430000 sw v1,0x0(v0)
010210 00000000 nop
010214 03c0e825 or sp,s8,z0
010218 8fbe000c lw s8,0xc(sp)
01021c 27bd0010 addiu sp,sp,0x10
010220 03e00008 jr ra
010224 00000000 nop
010228 27bdffe8 addiu sp,sp,-0x18
01022c afbe0014 sw s8,0x14(sp)
010230 03a0f025 or s8,sp,z0
010234 afc40018 sw a0,0x18(s8)
010238 8fc20018 lw v0,0x18(s8)
01023c 00000000 nop
010240 14400004 bne v0,z0,4
010244 00000000 nop
010248 00001025 or v0,z0,z0
01024c 100000ab beq z0,z0,171
010250 00000000 nop
010254 8fc20018 lw v0,0x18(s8)
010258 00000000 nop
01025c 2443001b addiu v1,v0,0x1b
010260 2402fff0 addiu v0,z0,-0x10
010264 00621024 and v0,v1,v0
010268 afc20018 sw v0,0x18(s8)
01026c 27828010 addiu v0,gp,-0x7ff0
010270 afc20000 sw v0,0x0(s8)
010274 1000009a beq z0,z0,154
010278 00000000 nop
01027c 8fc20000 lw v0,0x0(s8)
010280 00000000 nop
010284 8c420000 lw v0,0x0(v0)
010288 00000000 nop
01028c afc20004 sw v0,0x4(s8)
010290 8fc20004 lw v0,0x4(s8)
010294 00000000 nop
010298 8c420000 lw v0,0x0(v0)
01029c 00000000 nop
0102a0 afc20008 sw v0,0x8(s8)
0102a4 8fc30008 lw v1,0x8(s8)
0102a8 8fc20018 lw v0,0x18(s8)
0102ac 00000000 nop
0102b0 14620014 bne v1,v0,20
0102b4 00000000 nop
0102b8 8fc20004 lw v0,0x4(s8)
0102bc 00000000 nop
0102c0 24420008 addiu v0,v0,0x8
0102c4 8c420000 lw v0,0x0(v0)
0102c8 00000000 nop
0102cc 00401825 or v1,v0,z0
0102d0 8fc20000 lw v0,0x0(s8)
0102d4 00000000 nop
0102d8 ac430000 sw v1,0x0(v0)
0102dc 8fc20004 lw v0,0x4(s8)
0102e0 00000000 nop
0102e4 24420004 addiu v0,v0,0x4
0102e8 2403ffff addiu v1,z0,-0x1
0102ec ac430000 sw v1,0x0(v0)
0102f0 8fc20004 lw v0,0x4(s8)
0102f4 00000000 nop
0102f8 24420008 addiu v0,v0,0x8
0102fc 1000007f beq z0,z0,127
010300 00000000 nop
010304 8fc30008 lw v1,0x8(s8)
010308 8fc20018 lw v0,0x18(s8)
01030c 00000000 nop
010310 0043102a slt v0,v0,v1
010314 1040006e beq v0,z0,110
010318 00000000 nop
01031c 8fc30008 lw v1,0x8(s8)
010320 8fc20018 lw v0,0x18(s8)
010324 00000000 nop
010328 00621023 subu v0,v1,v0
01032c afc20008 sw v0,0x8(s8)
010330 8fc20004 lw v0,0x4(s8)
010334 8fc30008 lw v1,0x8(s8)
010338 00000000 nop
01033c ac430000 sw v1,0x0(v0)
010340 8fc20008 lw v0,0x8(s8)
010344 00000000 nop
010348 00021083 sra v0,v0,2
01034c 00401825 or v1,v0,z0
010350 3c023fff lui v0,0x3fff
010354 3442ffff ori v0,v0,-0x1
010358 00621021 addu v0,v1,v0
01035c 00021080 sll v0,v0,2
010360 8fc30004 lw v1,0x4(s8)
010364 00000000 nop
010368 00621021 addu v0,v1,v0
01036c 8fc30008 lw v1,0x8(s8)
010370 00000000 nop
010374 ac430000 sw v1,0x0(v0)
010378 8fc20004 lw v0,0x4(s8)
01037c 00000000 nop
010380 24420008 addiu v0,v0,0x8
010384 8c420000 lw v0,0x0(v0)
010388 00000000 nop
01038c 00401825 or v1,v0,z0
010390 8fc20000 lw v0,0x0(s8)
010394 00000000 nop
010398 ac430000 sw v1,0x0(v0)
01039c 27828010 addiu v0,gp,-0x7ff0
0103a0 afc20000 sw v0,0x0(s8)
0103a4 10000012 beq z0,z0,18
0103a8 00000000 nop
0103ac 8fc20000 lw v0,0x0(s8)
0103b0 00000000 nop
0103b4 8c420000 lw v0,0x0(v0)
0103b8 00000000 nop
0103bc afc2000c sw v0,0xc(s8)
0103c0 8fc2000c lw v0,0xc(s8)
0103c4 00000000 nop
0103c8 8c420000 lw v0,0x0(v0)
0103cc 8fc30008 lw v1,0x8(s8)
0103d0 00000000 nop
0103d4 0062102a slt v0,v1,v0
0103d8 1440000d bne v0,z0,13
0103dc 00000000 nop
0103e0 8fc2000c lw v0,0xc(s8)
0103e4 00000000 nop
0103e8 24420008 addiu v0,v0,0x8
0103ec afc20000 sw v0,0x0(s8)
0103f0 8fc20000 lw v0,0x0(s8)
0103f4 00000000 nop
0103f8 8c420000 lw v0,0x0(v0)
0103fc 00000000 nop
010400 1440ffea bne v0,z0,-22
010404 00000000 nop
010408 10000002 beq z0,z0,2
01040c 00000000 nop
010410 00000000 nop
010414 8fc20000 lw v0,0x0(s8)
010418 00000000 nop
01041c 8c430000 lw v1,0x0(v0)
010420 8fc20004 lw v0,0x4(s8)
010424 00000000 nop
010428 24420008 addiu v0,v0,0x8
01042c ac430000 sw v1,0x0(v0)
010430 8fc20000 lw v0,0x0(s8)
010434 8fc30004 lw v1,0x4(s8)
010438 00000000 nop
01043c ac430000 sw v1,0x0(v0)
010440 8fc20008 lw v0,0x8(s8)
010444 00000000 nop
010448 00021083 sra v0,v0,2
01044c 00021080 sll v0,v0,2
010450 8fc30004 lw v1,0x4(s8)
010454 00000000 nop
010458 00621021 addu v0,v1,v0
01045c afc2000c sw v0,0xc(s8)
010460 8fc2000c lw v0,0xc(s8)
010464 8fc30018 lw v1,0x18(s8)
010468 00000000 nop
01046c ac430000 sw v1,0x0(v0)
010470 8fc2000c lw v0,0xc(s8)
010474 00000000 nop
010478 24420004 addiu v0,v0,0x4
01047c 2403ffff addiu v1,z0,-0x1
010480 ac430000 sw v1,0x0(v0)
010484 8fc20018 lw v0,0x18(s8)
010488 00000000 nop
01048c 00021083 sra v0,v0,2
010490 00401825 or v1,v0,z0
010494 3c023fff lui v0,0x3fff
010498 3442ffff ori v0,v0,-0x1
01049c 00621021 addu v0,v1,v0
0104a0 00021080 sll v0,v0,2
0104a4 8fc3000c lw v1,0xc(s8)
0104a8 00000000 nop
0104ac 00621021 addu v0,v1,v0
0104b0 8fc30018 lw v1,0x18(s8)
0104b4 00000000 nop
0104b8 ac430000 sw v1,0x0(v0)
0104bc 8fc2000c lw v0,0xc(s8)
0104c0 00000000 nop
0104c4 24420008 addiu v0,v0,0x8
0104c8 1000000c beq z0,z0,12
0104cc 00000000 nop
0104d0 8fc20004 lw v0,0x4(s8)
0104d4 00000000 nop
0104d8 24420008 addiu v0,v0,0x8
0104dc afc20000 sw v0,0x0(s8)
0104e0 8fc20000 lw v0,0x0(s8)
0104e4 00000000 nop
0104e8 8c420000 lw v0,0x0(v0)
0104ec 00000000 nop
0104f0 1440ff62 bne v0,z0,-158
0104f4 00000000 nop
0104f8 00001025 or v0,z0,z0
0104fc 03c0e825 or sp,s8,z0
010500 8fbe0014 lw s8,0x14(sp)
010504 27bd0018 addiu sp,sp,0x18
010508 03e00008 jr ra
01050c 00000000 nop
010510 27bdffe0 addiu sp,sp,-0x20
010514 afbe001c sw s8,0x1c(sp)
010518 03a0f025 or s8,sp,z0
01051c afc40020 sw a0,0x20(s8)
010520 8fc20020 lw v0,0x20(s8)
010524 00000000 nop
010528 afc20004 sw v0,0x4(s8)
01052c 8fc20004 lw v0,0x4(s8)
010530 00000000 nop
010534 2442fff8 addiu v0,v0,-0x8
010538 afc20004 sw v0,0x4(s8)
01053c 8fc20004 lw v0,0x4(s8)
010540 00000000 nop
010544 24420004 addiu v0,v0,0x4
010548 ac400000 sw z0,0x0(v0)
01054c afc0000c sw z0,0xc(s8)
010550 8fc20004 lw v0,0x4(s8)
010554 00000000 nop
010558 2442fffc addiu v0,v0,-0x4
01055c 8c420000 lw v0,0x0(v0)
010560 00000000 nop
010564 1040003c beq v0,z0,60
010568 00000000 nop
01056c 8fc20004 lw v0,0x4(s8)
010570 00000000 nop
010574 2442fffc addiu v0,v0,-0x4
010578 8c420000 lw v0,0x0(v0)
01057c 00000000 nop
010580 00021083 sra v0,v0,2
010584 00021080 sll v0,v0,2
010588 00021023 subu v0,z0,v0
01058c 8fc30004 lw v1,0x4(s8)
010590 00000000 nop
010594 00621021 addu v0,v1,v0
010598 afc20008 sw v0,0x8(s8)
01059c 8fc20008 lw v0,0x8(s8)
0105a0 00000000 nop
0105a4 24420004 addiu v0,v0,0x4
0105a8 8c420000 lw v0,0x0(v0)
0105ac 00000000 nop
0105b0 14400029 bne v0,z0,41
0105b4 00000000 nop
0105b8 8fc20008 lw v0,0x8(s8)
0105bc 00000000 nop
0105c0 24420008 addiu v0,v0,0x8
0105c4 8c420000 lw v0,0x0(v0)
0105c8 00000000 nop
0105cc afc2000c sw v0,0xc(s8)
0105d0 8fc20008 lw v0,0x8(s8)
0105d4 00000000 nop
0105d8 8c430000 lw v1,0x0(v0)
0105dc 8fc20004 lw v0,0x4(s8)
0105e0 00000000 nop
0105e4 8c420000 lw v0,0x0(v0)
0105e8 00000000 nop
0105ec 00621021 addu v0,v1,v0
0105f0 afc20000 sw v0,0x0(s8)
0105f4 8fc20008 lw v0,0x8(s8)
0105f8 00000000 nop
0105fc afc20004 sw v0,0x4(s8)
010600 8fc20004 lw v0,0x4(s8)
010604 8fc30000 lw v1,0x0(s8)
010608 00000000 nop
01060c ac430000 sw v1,0x0(v0)
010610 8fc20000 lw v0,0x0(s8)
010614 00000000 nop
010618 00021083 sra v0,v0,2
01061c 00401825 or v1,v0,z0
010620 3c023fff lui v0,0x3fff
010624 3442ffff ori v0,v0,-0x1
010628 00621021 addu v0,v1,v0
01062c 00021080 sll v0,v0,2
010630 8fc30004 lw v1,0x4(s8)
010634 00000000 nop
010638 00621021 addu v0,v1,v0
01063c 8fc30000 lw v1,0x0(s8)
010640 00000000 nop
010644 ac430000 sw v1,0x0(v0)
010648 8fc20004 lw v0,0x4(s8)
01064c 00000000 nop
010650 24420008 addiu v0,v0,0x8
010654 ac400000 sw z0,0x0(v0)
010658 8fc20004 lw v0,0x4(s8)
01065c 00000000 nop
010660 8c420000 lw v0,0x0(v0)
010664 00000000 nop
010668 00021083 sra v0,v0,2
01066c 00021080 sll v0,v0,2
010670 8fc30004 lw v1,0x4(s8)
010674 00000000 nop
010678 00621021 addu v0,v1,v0
01067c afc20008 sw v0,0x8(s8)
010680 8fc20008 lw v0,0x8(s8)
010684 00000000 nop
010688 24420004 addiu v0,v0,0x4
01068c 8c420000 lw v0,0x0(v0)
010690 00000000 nop
010694 1440001e bne v0,z0,30
010698 00000000 nop
01069c 8fc20004 lw v0,0x4(s8)
0106a0 00000000 nop
0106a4 8c430000 lw v1,0x0(v0)
0106a8 8fc20008 lw v0,0x8(s8)
0106ac 00000000 nop
0106b0 8c420000 lw v0,0x0(v0)
0106b4 00000000 nop
0106b8 00621021 addu v0,v1,v0
0106bc afc20000 sw v0,0x0(s8)
0106c0 8fc20004 lw v0,0x4(s8)
0106c4 8fc30000 lw v1,0x0(s8)
0106c8 00000000 nop
0106cc ac430000 sw v1,0x0(v0)
0106d0 8fc20000 lw v0,0x0(s8)
0106d4 00000000 nop
0106d8 00021083 sra v0,v0,2
0106dc 00401825 or v1,v0,z0
0106e0 3c023fff lui v0,0x3fff
0106e4 3442ffff ori v0,v0,-0x1
0106e8 00621021 addu v0,v1,v0
0106ec 00021080 sll v0,v0,2
0106f0 8fc30004 lw v1,0x4(s8)
0106f4 00000000 nop
0106f8 00621021 addu v0,v1,v0
0106fc 8fc30000 lw v1,0x0(s8)
010700 00000000 nop
010704 ac430000 sw v1,0x0(v0)
010708 10000002 beq z0,z0,2
01070c 00000000 nop
010710 afc00008 sw z0,0x8(s8)
010714 27828010 addiu v0,gp,-0x7ff0
010718 afc20010 sw v0,0x10(s8)
01071c 8fc20004 lw v0,0x4(s8)
010720 00000000 nop
010724 8c420000 lw v0,0x0(v0)
010728 00000000 nop
01072c afc20000 sw v0,0x0(s8)
010730 10000046 beq z0,z0,70
010734 00000000 nop
010738 8fc20010 lw v0,0x10(s8)
01073c 00000000 nop
010740 8c420000 lw v0,0x0(v0)
010744 00000000 nop
010748 afc20014 sw v0,0x14(s8)
01074c 8fc30014 lw v1,0x14(s8)
010750 8fc20008 lw v0,0x8(s8)
010754 00000000 nop
010758 14620011 bne v1,v0,17
01075c 00000000 nop
010760 8fc20008 lw v0,0x8(s8)
010764 00000000 nop
010768 24420008 addiu v0,v0,0x8
01076c 8c420000 lw v0,0x0(v0)
010770 00000000 nop
010774 00401825 or v1,v0,z0
010778 8fc20010 lw v0,0x10(s8)
01077c 00000000 nop
010780 ac430000 sw v1,0x0(v0)
010784 afc00008 sw z0,0x8(s8)
010788 8fc20004 lw v0,0x4(s8)
01078c 00000000 nop
010790 1040003e beq v0,z0,62
010794 00000000 nop
010798 1000002c beq z0,z0,44
01079c 00000000 nop
0107a0 8fc30014 lw v1,0x14(s8)
0107a4 8fc20004 lw v0,0x4(s8)
0107a8 00000000 nop
0107ac 14620007 bne v1,v0,7
0107b0 00000000 nop
0107b4 8fc20010 lw v0,0x10(s8)
0107b8 8fc3000c lw v1,0xc(s8)
0107bc 00000000 nop
0107c0 ac430000 sw v1,0x0(v0)
0107c4 10000021 beq z0,z0,33
0107c8 00000000 nop
0107cc 8fc20014 lw v0,0x14(s8)
0107d0 00000000 nop
0107d4 8c420000 lw v0,0x0(v0)
0107d8 8fc30000 lw v1,0x0(s8)
0107dc 00000000 nop
0107e0 0043102a slt v0,v0,v1
0107e4 14400015 bne v0,z0,21
0107e8 00000000 nop
0107ec 8fc20004 lw v0,0x4(s8)
0107f0 00000000 nop
0107f4 24420008 addiu v0,v0,0x8
0107f8 8fc30014 lw v1,0x14(s8)
0107fc 00000000 nop
010800 ac430000 sw v1,0x0(v0)
010804 8fc20010 lw v0,0x10(s8)
010808 8fc30004 lw v1,0x4(s8)
01080c 00000000 nop
010810 ac430000 sw v1,0x0(v0)
010814 3c027fff lui v0,0x7fff
010818 3442ffff ori v0,v0,-0x1
01081c afc20000 sw v0,0x0(s8)
010820 afc00004 sw z0,0x4(s8)
010824 8fc20008 lw v0,0x8(s8)
010828 00000000 nop
01082c 1040001a beq v0,z0,26
010830 00000000 nop
010834 10000005 beq z0,z0,5
010838 00000000 nop
01083c 8fc20014 lw v0,0x14(s8)
010840 00000000 nop
010844 24420008 addiu v0,v0,0x8
010848 afc20010 sw v0,0x10(s8)
01084c 8fc20010 lw v0,0x10(s8)
010850 00000000 nop
010854 8c420000 lw v0,0x0(v0)
010858 00000000 nop
01085c 1440ffb6 bne v0,z0,-74
010860 00000000 nop
010864 8fc20010 lw v0,0x10(s8)
010868 8fc30004 lw v1,0x4(s8)
01086c 00000000 nop
010870 ac430000 sw v1,0x0(v0)
010874 8fc20004 lw v0,0x4(s8)
010878 00000000 nop
01087c 24420008 addiu v0,v0,0x8
010880 ac400000 sw z0,0x0(v0)
010884 10000005 beq z0,z0,5
010888 00000000 nop
01088c 00000000 nop
010890 10000002 beq z0,z0,2
010894 00000000 nop
010898 00000000 nop
01089c 03c0e825 or sp,s8,z0
0108a0 8fbe001c lw s8,0x1c(sp)
0108a4 27bd0020 addiu sp,sp,0x20
0108a8 03e00008 jr ra
0108ac 00000000 nop
0108b0 27bdffe0 addiu sp,sp,-0x20
0108b4 afbe001c sw s8,0x1c(sp)
0108b8 03a0f025 or s8,sp,z0
0108bc afc40020 sw a0,0x20(s8)
0108c0 8f82800c lw v0,-0x7ff4(gp)
0108c4 00000000 nop
0108c8 24420010 addiu v0,v0,0x10
0108cc afc20010 sw v0,0x10(s8)
0108d0 afc00004 sw z0,0x4(s8)
0108d4 10000031 beq z0,z0,49
0108d8 00000000 nop
0108dc 8fc20010 lw v0,0x10(s8)
0108e0 00000000 nop
0108e4 8c420000 lw v0,0x0(v0)
0108e8 00000000 nop
0108ec afc20014 sw v0,0x14(s8)
0108f0 8fc30014 lw v1,0x14(s8)
0108f4 2402ffff addiu v0,z0,-0x1
0108f8 1062002e beq v1,v0,46
0108fc 00000000 nop
010900 8fc20014 lw v0,0x14(s8)
010904 00000000 nop
010908 00021083 sra v0,v0,2
01090c 00401825 or v1,v0,z0
010910 3c023fff lui v0,0x3fff
010914 3442ffff ori v0,v0,-0x1
010918 00621021 addu v0,v1,v0
01091c 00021080 sll v0,v0,2
010920 8fc30010 lw v1,0x10(s8)
010924 00000000 nop
010928 00621021 addu v0,v1,v0
01092c 8c420000 lw v0,0x0(v0)
010930 8fc30014 lw v1,0x14(s8)
010934 00000000 nop
010938 10620004 beq v1,v0,4
01093c 00000000 nop
010940 2402ffff addiu v0,z0,-0x1
010944 10000085 beq z0,z0,133
010948 00000000 nop
01094c 8fc20010 lw v0,0x10(s8)
010950 00000000 nop
010954 24420004 addiu v0,v0,0x4
010958 8c420000 lw v0,0x0(v0)
01095c 00000000 nop
010960 14400006 bne v0,z0,6
010964 00000000 nop
010968 8fc30004 lw v1,0x4(s8)
01096c 8fc20014 lw v0,0x14(s8)
010970 00000000 nop
010974 00621021 addu v0,v1,v0
010978 afc20004 sw v0,0x4(s8)
01097c 8fc20014 lw v0,0x14(s8)
010980 00000000 nop
010984 00021083 sra v0,v0,2
010988 00021080 sll v0,v0,2
01098c 8fc30010 lw v1,0x10(s8)
010990 00000000 nop
010994 00621021 addu v0,v1,v0
010998 afc20010 sw v0,0x10(s8)
01099c 8fc20010 lw v0,0x10(s8)
0109a0 00000000 nop
0109a4 1440ffcd bne v0,z0,-51
0109a8 00000000 nop
0109ac 10000002 beq z0,z0,2
0109b0 00000000 nop
0109b4 00000000 nop
0109b8 8f828010 lw v0,-0x7ff0(gp)
0109bc 00000000 nop
0109c0 afc20010 sw v0,0x10(s8)
0109c4 afc00008 sw z0,0x8(s8)
0109c8 afc0000c sw z0,0xc(s8)
0109cc afc00000 sw z0,0x0(s8)
0109d0 10000043 beq z0,z0,67
0109d4 00000000 nop
0109d8 8fc20010 lw v0,0x10(s8)
0109dc 00000000 nop
0109e0 8c420000 lw v0,0x0(v0)
0109e4 00000000 nop
0109e8 afc20014 sw v0,0x14(s8)
0109ec 8fc30014 lw v1,0x14(s8)
0109f0 8fc20000 lw v0,0x0(s8)
0109f4 00000000 nop
0109f8 0062102a slt v0,v1,v0
0109fc 10400004 beq v0,z0,4
010a00 00000000 nop
010a04 2402ffff addiu v0,z0,-0x1
010a08 10000054 beq z0,z0,84
010a0c 00000000 nop
010a10 8fc20010 lw v0,0x10(s8)
010a14 00000000 nop
010a18 24420004 addiu v0,v0,0x4
010a1c 8c420000 lw v0,0x0(v0)
010a20 00000000 nop
010a24 10400004 beq v0,z0,4
010a28 00000000 nop
010a2c 2402ffff addiu v0,z0,-0x1
010a30 1000004a beq z0,z0,74
010a34 00000000 nop
010a38 8fc20014 lw v0,0x14(s8)
010a3c 00000000 nop
010a40 00021083 sra v0,v0,2
010a44 00401825 or v1,v0,z0
010a48 3c023fff lui v0,0x3fff
010a4c 3442ffff ori v0,v0,-0x1
010a50 00621021 addu v0,v1,v0
010a54 00021080 sll v0,v0,2
010a58 8fc30010 lw v1,0x10(s8)
010a5c 00000000 nop
010a60 00621021 addu v0,v1,v0
010a64 8c420000 lw v0,0x0(v0)
010a68 8fc30014 lw v1,0x14(s8)
010a6c 00000000 nop
010a70 10620004 beq v1,v0,4
010a74 00000000 nop
010a78 2402ffff addiu v0,z0,-0x1
010a7c 10000037 beq z0,z0,55
010a80 00000000 nop
010a84 8fc30014 lw v1,0x14(s8)
010a88 8fc2000c lw v0,0xc(s8)
010a8c 00000000 nop
010a90 0043102a slt v0,v0,v1
010a94 10400004 beq v0,z0,4
010a98 00000000 nop
010a9c 8fc20014 lw v0,0x14(s8)
010aa0 00000000 nop
010aa4 afc2000c sw v0,0xc(s8)
010aa8 8fc20014 lw v0,0x14(s8)
010aac 00000000 nop
010ab0 afc20000 sw v0,0x0(s8)
010ab4 8fc30008 lw v1,0x8(s8)
010ab8 8fc20014 lw v0,0x14(s8)
010abc 00000000 nop
010ac0 00621021 addu v0,v1,v0
010ac4 afc20008 sw v0,0x8(s8)
010ac8 8fc20010 lw v0,0x10(s8)
010acc 00000000 nop
010ad0 24420008 addiu v0,v0,0x8
010ad4 8c420000 lw v0,0x0(v0)
010ad8 00000000 nop
010adc afc20010 sw v0,0x10(s8)
010ae0 8fc20010 lw v0,0x10(s8)
010ae4 00000000 nop
010ae8 1440ffbb bne v0,z0,-69
010aec 00000000 nop
010af0 8fc30004 lw v1,0x4(s8)
010af4 8fc20008 lw v0,0x8(s8)
010af8 00000000 nop
010afc 10620004 beq v1,v0,4
010b00 00000000 nop
010b04 2402ffff addiu v0,z0,-0x1
010b08 10000014 beq z0,z0,20
010b0c 00000000 nop
010b10 8fc20020 lw v0,0x20(s8)
010b14 00000000 nop
010b18 10400006 beq v0,z0,6
010b1c 00000000 nop
010b20 8fc2000c lw v0,0xc(s8)
010b24 00000000 nop
010b28 2442fff4 addiu v0,v0,-0xc
010b2c 1000000b beq z0,z0,11
010b30 00000000 nop
010b34 8fc20004 lw v0,0x4(s8)
010b38 00000000 nop
010b3c 10400006 beq v0,z0,6
010b40 00000000 nop
010b44 8fc20004 lw v0,0x4(s8)
010b48 00000000 nop
010b4c 2442fff4 addiu v0,v0,-0xc
010b50 10000002 beq z0,z0,2
010b54 00000000 nop
010b58 00001025 or v0,z0,z0
010b5c 03c0e825 or sp,s8,z0
010b60 8fbe001c lw s8,0x1c(sp)
010b64 27bd0020 addiu sp,sp,0x20
010b68 03e00008 jr ra
010b6c 00000000 nop
010b70 27bdffe0 addiu sp,sp,-0x20
010b74 afbf001c sw ra,0x1c(sp)
010b78 afbe0018 sw s8,0x18(sp)
010b7c 03a0f025 or s8,sp,z0
010b80 0c004000 jal 0x10000
010b84 00000000 nop
010b88 3c050013 lui a1,0x13
010b8c 3c02800c lui v0,-0x7ff4
010b90 34448000 ori a0,v0,-0x8000
010b94 0c004009 jal 0x10024
010b98 00000000 nop
010b9c 3c021f80 lui v0,0x1f80
010ba0 34421810 ori v0,v0,0x1810
010ba4 afc20010 sw v0,0x10(s8)
010ba8 8fc20010 lw v0,0x10(s8)
010bac 00000000 nop
010bb0 ac400000 sw z0,0x0(v0)
010bb4 1000ffff beq z0,z0,-1
010bb8 00000000 nop
010bbc 00000010 mfhi z0
010bc0 00000000 nop
010bc4 00527a01 dw 0x149e8
010bc8 011f7c01 dw 0x47df0
010bcc 001d0d0b dw 0x7434
010bd0 00000020 add z0,z0,z0
010bd4 00000018 mult z0,z0
010bd8 80010024 lb at,0x24(z0)
010bdc 00000204 sllv z0,z0,z0
010be0 100e4400 beq z0,t6,17408
010be4 44019e44 mfc1 at,s3
010be8 e8031e0d swc2 v1,7693(z0)
010bec 481d0d01 mfc2 sp,at
010bf0 00000ede dw 0x3b
010bf4 00000020 add z0,z0,z0
010bf8 0000003c dw 0x0
010bfc 80010228 lb at,0x228(z0)
010c00 000002e8 dw 0xb
010c04 180e4400 blez z0,17408
010c08 44019e44 mfc1 at,s3
010c0c cc031e0d lwc3 v1,7693(z0)
010c10 481d0d02 mfc2 sp,at
010c14 00000ede dw 0x3b
010c18 00000020 add z0,z0,z0
010c1c 00000060 add z0,z0,z0
010c20 80010510 lb at,0x510(z0)
010c24 000003a0 add z0,z0,z0
010c28 200e4400 addi t6,z0,0x4400
010c2c 44019e44 mfc1 at,s3
010c30 84031e0d lh v1,0x1e0d(z0)
010c34 481d0d03 mfc2 sp,at
010c38 00000ede dw 0x3b
010c3c 00000020 add z0,z0,z0
010c40 00000084 sllv z0,z0,z0
010c44 800108b0 lb at,0x8b0(z0)
010c48 000002c0 sll z0,z0,11
010c4c 200e4400 addi t6,z0,0x4400
010c50 44019e44 mfc1 at,s3
010c54 a4031e0d sh v1,0x1e0d(z0)
010c58 481d0d02 mfc2 sp,at
010c5c 00000ede dw 0x3b
010c60 00000018 mult z0,z0
010c64 000000a8 dw 0x2
010c68 80010b70 lb at,0xb70(z0)
010c6c 0000004c syscall 0x1
010c70 200e4400 addi t6,z0,0x4400
010c74 9e019f48 dw 0x8067d
010c78 1e0d4402 bgtz s0,17410
Loaded segment: vaddr=0x80010000, size=0xc7c
Loaded segment: vaddr=0x80011c7c, size=0x0
test6 homegrown mips r3000 emulator
0x80010b70



import { AnsiReset, rgbShade, greyShade, ansiBG, ansiFG } from "./sloputil.js";


function colors(){
	const list=[];
	for(let i=0;i<6;i++){
		for(let j=0;j<6;j++){
			for(let k=0;k<6;k++){
				const rgb=rgbShade(i/5.0,j/5.0,k/5.0);
				list.push(ansiBG(rgb)+" ");
			}
		}
		list.push(AnsiReset+"\n");
	}
	console.log(list.join(""));
}


// const tiny=new pixelMap(128,12);


// MIPS pre? decode
// op6 rs5 rt5 rd5 sham5 func6
// op6 rs5 rt5 imm16
// op6 address26

// count clock cycles of MIPS r3000 core under emulation


NBSP	🬀	🬁	🬂	🬃	🬄	🬅	🬆	🬇	🬈	🬉	🬊	🬋	🬌	🬍	🬎
3	🬏	🬐	🬑	🬒	🬓	▌	🬔	🬕	🬖	🬗	🬘	🬙	🬚	🬛	🬜	🬝
6	🬞	🬟	🬠	🬡	🬢	🬣	🬤	🬥	🬦	🬧	▐	🬨	🬩	🬪	🬫	🬬
7	🬭	🬮	🬯	🬰	🬱	🬲	🬳	🬴	🬵	🬶	🬷	🬸	🬹	🬺	🬻	█


const AnsiClear="\x1B[2J";
const AnsiHome="\x1B[H";
const AnsiPink="\x1B[38;5;206m";
const AnsiDefault="\x1B[39m";
const AnsiShowCursor = "\x1b[?25h"
const AnsiHideCursor = "\x1b[?25l"
const AnsiCursor="\x1B["; //+ row + ";1H";

const _AnsiBlankLine="\x1B[0K";
const _AnsiRGB="\x1B[38;2;"//⟨r⟩;⟨g⟩;⟨b⟩m"


function test1(){
	for(let i=0;i<100;i++){
		tv.plot(i,i);
	}
	tv.draw(sprites[0],12,2);
	tv.draw(sprites[1],16,7);
	tv.draw(sprites[0],0,12);
	for(let i=0;i<24;i++){
		const d=(Math.random()*10)|0;
		tv.draw(numbers[d],i*5,17);
	}
}

function test1(){
    for(let i=0;i<100;i++){
	tv.plot(i,i);
    }
    tv.draw(sprites[0],12,2);
    tv.draw(sprites[1],16,7);
    tv.draw(sprites[0],0,12);
    for(let i=0;i<24;i++){
	const d=(Math.random()*10)|0;
	tv.draw(numbers[d],i*5,17);
    }
}



//	const shade=(t/3e3)%1;
//	tv.noise(shade);

//	return tv.quadFrame().join("\n");
//	return tv.charFrame("*"," ").join("\n");
//	return tv.brailleFrame().join("\n");


/*

	edgeFrame(fb){
		const lines=[];
		const span=this.width;
		let y=0;
		for(const charline of fb){
			const edge=this.leftEdge[y]||"";
			for(let line of charline){
				lines.push(edge+charline);
			}
			y++;
		}
		return lines;
	}

//				const char=charline.charAt(x);
				// const gcode=0xe8+(Math.random()*24)|0;
				// const rgb=AnsiRGB+(Math.random()*255|0)+";"+(Math.random()*255|0)+";"+(Math.random()*255|0)+"m";
				// 36 × r + 6 × g + b
				// const hcode=0x10+(Math.random()*216)|0;
				// const fg8="\x1B[38;5;"+col8+"m";
//				line.push(fg8+q4);
	greyFrame(fb){
		const lines=[];
		const span=this.width;
		let y=0;
		for(const charline of fb){
			for(let x=0;x<charline.length;x++){
				const char=charline.charAt(x);
				const col8=this.colmap[y*span+x];
				// const gcode=0xe8+(Math.random()*24)|0;
				const gcode=(col8)|0;
				const grey="\x1B[38;5;"+gcode+"m";
				const rgb=AnsiRGB+(Math.random()*255|0)+";"+(Math.random()*255|0)+";"+(Math.random()*255|0)+"m";
				// 36 × r + 6 × g + b
				// const hcode=0x10+(Math.random()*216)|0;
				const fg8="\x1B[38;5;"+col8+"m";
//				line.push(fg8+q4);
			}
			y++;
		}
		return lines;
	}
*/
/*
		const c=this.colmap.length;
		for(let xy=0;xy<c;xy++){
			const col8=16+(Math.random()*216)|0;
			this.colmap[xy]=col8;
		}
*/
// TODO: colmap is colorcodes per line
//export class colorMap{
//  cspan;
//	colmap: Uint8Array;
//


[SPEW] [
	"babbage-002@openai",
	"chatgpt-4o-latest@openai",
	"codex-mini-latest@openai","dall-e-2@openai"
	"dall-e-3@openai",
	"davinci-002@openai","gpt-3.5-turbo-0125@openai","gpt-3.5-turbo-1106@openai","gpt-3.5-turbo-16k@openai","gpt-3.5-turbo-instruct-0914@openai","gpt-3.5-turbo-instruct@openai","gpt-3.5-turbo@openai","gpt-4-0125-preview@openai","gpt-4-0613@openai","gpt-4-1106-preview@openai","gpt-4-turbo-2024-04-09@openai","gpt-4-turbo-preview@openai","gpt-4-turbo@openai","gpt-4.1-2025-04-14@openai","gpt-4.1-mini-2025-04-14@openai","gpt-4.1-mini@openai","gpt-4.1-nano-2025-04-14@openai","gpt-4.1-nano@openai","gpt-4.1@openai","gpt-4@openai","gpt-4o-2024-05-13@openai","gpt-4o-2024-08-06@openai","gpt-4o-2024-11-20@openai","gpt-4o-audio-preview-2024-10-01@openai","gpt-4o-audio-preview-2024-12-17@openai","gpt-4o-audio-preview-2025-06-03@openai","gpt-4o-audio-preview@openai","gpt-4o-mini-2024-07-18@openai","gpt-4o-mini-audio-preview-2024-12-17@openai","gpt-4o-mini-audio-preview@openai","gpt-4o-mini-realtime-preview-2024-12-17@openai","gpt-4o-mini-realtime-preview@openai","gpt-4o-mini-search-preview-2025-03-11@openai","gpt-4o-mini-search-preview@openai","gpt-4o-mini-transcribe@openai","gpt-4o-mini-tts@openai","gpt-4o-mini@openai","gpt-4o-realtime-preview-2024-10-01@openai","gpt-4o-realtime-preview-2024-12-17@openai","gpt-4o-realtime-preview-2025-06-03@openai","gpt-4o-realtime-preview@openai","gpt-4o-search-preview-2025-03-11@openai","gpt-4o-search-preview@openai","gpt-4o-transcribe@openai","gpt-4o@openai","gpt-image-1@openai","o1-2024-12-17@openai","o1-mini-2024-09-12@openai","o1-mini@openai","o1-preview-2024-09-12@openai","o1-preview@openai","o1-pro-2025-03-19@openai","o1-pro@openai","o1@openai","o3-2025-04-16@openai","o3-deep-research-2025-06-26@openai","o3-deep-research@openai","o3-mini-2025-01-31@openai","o3-mini@openai","o3-pro-2025-06-10@openai","o3-pro@openai","o3@openai","o4-mini-2025-04-16@openai","o4-mini-deep-research-2025-06-26@openai","o4-mini-deep-research@openai","o4-mini@openai","omni-moderation-2024-09-26@openai","omni-moderation-latest@openai","text-embedding-3-large@openai","text-embedding-3-small@openai","text-embedding-ada-002@openai","tts-1-1106@openai","tts-1-hd-1106@openai","tts-1-hd@openai","tts-1@openai","whisper-1@openai"
]


model # 2
model: {"mut":"kimi-k2-0711-preview","emoji":"🌙","rate":[0.6,0.15,2.5],"balance":"$-"}
[FOUNTAIN] calling model 2 Converting circular structure to JSON
    --> starting at object with constructor 'OpenAI'
    |     property 'completions' -> object with constructor 'Completions'
    --- property '_client' closes the circle
>

C:\nitrologic\fountain\rc4>cd ..

C:\nitrologic\fountain>fountain.bat

C:\nitrologic\fountain>echo off
Testing Slop Fountain
see roha/deno.json for task options
Task hello deno run slophello.ts
Task slopfountain deno run --allow-net --allow-env --allow-read --allow-write=./forge slopfountain.ts
[SLOP] hello world
fountain 1.3.2 ⛲  running from C:\nitrologic\fountain\roha\forge\forge.json
[DEEPSEEK] {"id":"deepseek-chat","object":"model","owned_by":"deepseek"}
[DEEPSEEK] {"id":"deepseek-reasoner","object":"model","owned_by":"deepseek"}
[SPEW] ["deepseek-chat@deepseek","deepseek-reasoner@deepseek"]
[SPEW] ["kimi-k2-0711-preview@moonshot","kimi-latest@moonshot","kimi-thinking-preview@moonshot","moonshot-v1-128k-vision-preview@moonshot","moonshot-v1-128k@moonshot","moonshot-v1-32k-vision-preview@moonshot","moonshot-v1-32k@moonshot","moonshot-v1-8k-vision-preview@moonshot","moonshot-v1-8k@moonshot","moonshot-v1-auto@moonshot"]
[SPEW] ["claude-opus-4-20250514@anthropic","claude-sonnet-4-20250514@anthropic","claude-3-7-sonnet-20250219@anthropic","claude-3-5-sonnet-20241022@anthropic","claude-3-5-haiku-20241022@anthropic","claude-3-5-sonnet-20240620@anthropic","claude-3-haiku-20240307@anthropic","claude-3-opus-20240229@anthropic"]

[SPEW] ["babbage-002@openai","chatgpt-4o-latest@openai","codex-mini-latest@openai","dall-e-2@openai","dall-e-3@openai","davinci-002@openai","gpt-3.5-turbo-0125@openai","gpt-3.5-turbo-1106@openai","gpt-3.5-turbo-16k@openai","gpt-3.5-turbo-instruct-0914@openai","gpt-3.5-turbo-instruct@openai","gpt-3.5-turbo@openai","gpt-4-0125-preview@openai","gpt-4-0613@openai","gpt-4-1106-preview@openai","gpt-4-turbo-2024-04-09@openai","gpt-4-turbo-preview@openai","gpt-4-turbo@openai","gpt-4.1-2025-04-14@openai","gpt-4.1-mini-2025-04-14@openai","gpt-4.1-mini@openai","gpt-4.1-nano-2025-04-14@openai","gpt-4.1-nano@openai","gpt-4.1@openai","gpt-4@openai","gpt-4o-2024-05-13@openai","gpt-4o-2024-08-06@openai","gpt-4o-2024-11-20@openai","gpt-4o-audio-preview-2024-10-01@openai","gpt-4o-audio-preview-2024-12-17@openai","gpt-4o-audio-preview-2025-06-03@openai","gpt-4o-audio-preview@openai","gpt-4o-mini-2024-07-18@openai","gpt-4o-mini-audio-preview-2024-12-17@openai","gpt-4o-mini-audio-preview@openai","gpt-4o-mini-realtime-preview-2024-12-17@openai","gpt-4o-mini-realtime-preview@openai","gpt-4o-mini-search-preview-2025-03-11@openai","gpt-4o-mini-search-preview@openai","gpt-4o-mini-transcribe@openai","gpt-4o-mini-tts@openai","gpt-4o-mini@openai","gpt-4o-realtime-preview-2024-10-01@openai","gpt-4o-realtime-preview-2024-12-17@openai","gpt-4o-realtime-preview-2025-06-03@openai","gpt-4o-realtime-preview@openai","gpt-4o-search-preview-2025-03-11@openai","gpt-4o-search-preview@openai","gpt-4o-transcribe@openai","gpt-4o@openai","gpt-image-1@openai","o1-2024-12-17@openai","o1-mini-2024-09-12@openai","o1-mini@openai","o1-preview-2024-09-12@openai","o1-preview@openai","o1-pro-2025-03-19@openai","o1-pro@openai","o1@openai","o3-2025-04-16@openai","o3-deep-research-2025-06-26@openai","o3-deep-research@openai","o3-mini-2025-01-31@openai","o3-mini@openai","o3-pro-2025-06-10@openai","o3-pro@openai","o3@openai","o4-mini-2025-04-16@openai","o4-mini-deep-research-2025-06-26@openai","o4-mini-deep-research@openai","o4-mini@openai","omni-moderation-2024-09-26@openai","omni-moderation-latest@openai","text-embedding-3-large@openai","text-embedding-3-small@openai","text-embedding-ada-002@openai","tts-1-1106@openai","tts-1-hd-1106@openai","tts-1-hd@openai","tts-1@openai","whisper-1@openai"]

[SPEW] ["grok-2-1212@xai","grok-2-image-1212@xai","grok-2-vision-1212@xai","grok-3-fast@xai","grok-3-mini-fast@xai","grok-3-mini@xai","grok-3@xai","grok-4-0709@xai"]
[SPEW] ["models/embedding-gecko-001@gemini","models/gemini-1.0-pro-vision-latest@gemini","models/gemini-pro-vision@gemini","models/gemini-1.5-pro-latest@gemini","models/gemini-1.5-pro-002@gemini","models/gemini-1.5-pro@gemini","models/gemini-1.5-flash-latest@gemini","models/gemini-1.5-flash@gemini","models/gemini-1.5-flash-002@gemini","models/gemini-1.5-flash-8b@gemini","models/gemini-1.5-flash-8b-001@gemini","models/gemini-1.5-flash-8b-latest@gemini","models/gemini-2.5-pro-preview-03-25@gemini","models/gemini-2.5-flash-preview-05-20@gemini","models/gemini-2.5-flash@gemini","models/gemini-2.5-flash-lite-preview-06-17@gemini","models/gemini-2.5-pro-preview-05-06@gemini","models/gemini-2.5-pro-preview-06-05@gemini","models/gemini-2.5-pro@gemini","models/gemini-2.0-flash-exp@gemini","models/gemini-2.0-flash@gemini","models/gemini-2.0-flash-001@gemini","models/gemini-2.0-flash-exp-image-generation@gemini","models/gemini-2.0-flash-lite-001@gemini","models/gemini-2.0-flash-lite@gemini","models/gemini-2.0-flash-preview-image-generation@gemini","models/gemini-2.0-flash-lite-preview-02-05@gemini","models/gemini-2.0-flash-lite-preview@gemini","models/gemini-2.0-pro-exp@gemini","models/gemini-2.0-pro-exp-02-05@gemini","models/gemini-exp-1206@gemini","models/gemini-2.0-flash-thinking-exp-01-21@gemini","models/gemini-2.0-flash-thinking-exp@gemini","models/gemini-2.0-flash-thinking-exp-1219@gemini","models/gemini-2.5-flash-preview-tts@gemini","models/gemini-2.5-pro-preview-tts@gemini","models/learnlm-2.0-flash-experimental@gemini","models/gemma-3-1b-it@gemini","models/gemma-3-4b-it@gemini","models/gemma-3-12b-it@gemini","models/gemma-3-27b-it@gemini","models/gemma-3n-e4b-it@gemini","models/gemma-3n-e2b-it@gemini","models/gemini-2.5-flash-lite@gemini","models/embedding-001@gemini","models/text-embedding-004@gemini","models/gemini-embedding-exp-03-07@gemini","models/gemini-embedding-exp@gemini","models/gemini-embedding-001@gemini","models/aqa@gemini"]
[SPEW] ["codestral-2411-rc5@mistral","codestral-2412@mistral","codestral-2501@mistral","codestral-embed-2505@mistral","codestral-embed@mistral","codestral-latest@mistral","devstral-medium-2507@mistral","devstral-medium-latest@mistral","devstral-small-2505@mistral","devstral-small-2507@mistral","devstral-small-latest@mistral","magistral-medium-2506@mistral","magistral-medium-2507@mistral","magistral-medium-latest@mistral","magistral-small-2506@mistral","magistral-small-2507@mistral","magistral-small-latest@mistral","ministral-3b-2410@mistral","ministral-3b-latest@mistral","ministral-8b-2410@mistral","ministral-8b-latest@mistral","mistral-embed@mistral","mistral-large-2407@mistral","mistral-large-2411@mistral","mistral-large-latest@mistral","mistral-large-pixtral-2411@mistral","mistral-medium-2505@mistral","mistral-medium-latest@mistral","mistral-medium@mistral","mistral-moderation-2411@mistral","mistral-moderation-latest@mistral","mistral-ocr-2503@mistral","mistral-ocr-2505@mistral","mistral-ocr-latest@mistral","mistral-saba-2502@mistral","mistral-saba-latest@mistral","mistral-small-2312@mistral","mistral-small-2409@mistral","mistral-small-2501@mistral","mistral-small-2503@mistral","mistral-small-2506@mistral","mistral-small-latest@mistral","mistral-small@mistral","mistral-tiny-2312@mistral","mistral-tiny-2407@mistral","mistral-tiny-latest@mistral","mistral-tiny@mistral","open-mistral-7b@mistral","open-mistral-nemo-2407@mistral","open-mistral-nemo@mistral","open-mixtral-8x22b-2404@mistral","open-mixtral-8x22b@mistral","open-mixtral-8x7b@mistral","pixtral-12b-2409@mistral","pixtral-12b-latest@mistral","pixtral-12b@mistral","pixtral-large-2411@mistral","pixtral-large-latest@mistral","voxtral-mini-2507@mistral","voxtral-mini-latest@mistral","voxtral-small-2507@mistral","voxtral-small-latest@mistral"]
[SPEW] []
[SPEW] ["llama-3.3-70b@cerebras","llama-4-maverick-17b-128e-instruct@cerebras","llama-4-scout-17b-16e-instruct@cerebras","llama3.1-8b@cerebras","qwen-3-235b-a22b@cerebras","qwen-3-32b@cerebras"]
[SPEW] ["ByteDance/SDXL-Lightning-4step@nscale","ByteDance/SDXL-Lightning-8step@nscale","Qwen/QwQ-32B@nscale","Qwen/Qwen2.5-Coder-32B-Instruct@nscale","Qwen/Qwen2.5-Coder-3B-Instruct@nscale","Qwen/Qwen2.5-Coder-7B-Instruct@nscale","Qwen/Qwen3-14B@nscale","Qwen/Qwen3-235B-A22B-Instruct-2507@nscale","Qwen/Qwen3-235B-A22B@nscale","Qwen/Qwen3-32B@nscale","Qwen/Qwen3-8B@nscale","black-forest-labs/FLUX.1-schnell@nscale","deepseek-ai/DeepSeek-R1-Distill-Llama-70B@nscale","deepseek-ai/DeepSeek-R1-Distill-Llama-8B@nscale","deepseek-ai/DeepSeek-R1-Distill-Qwen-1.5B@nscale","deepseek-ai/DeepSeek-R1-Distill-Qwen-14B@nscale","deepseek-ai/DeepSeek-R1-Distill-Qwen-32B@nscale","deepseek-ai/DeepSeek-R1-Distill-Qwen-7B@nscale","meta-llama/Llama-3.1-8B-Instruct@nscale","meta-llama/Llama-3.3-70B-Instruct@nscale","meta-llama/Llama-4-Scout-17B-16E-Instruct@nscale","mistralai/Devstral-Small-2505@nscale","mistralai/mixtral-8x22b-instruct-v0.1@nscale","stabilityai/stable-diffusion-xl-base-1.0@nscale"]
[SPEW] ["FLUX.1-dev@hyperbolic","NousResearch/Hermes-3-Llama-3.1-70B@hyperbolic","Qwen/QwQ-32B-Preview@hyperbolic","Qwen/QwQ-32B@hyperbolic","Qwen/Qwen2.5-72B-Instruct@hyperbolic","Qwen/Qwen2.5-Coder-32B-Instruct@hyperbolic","Qwen/Qwen2.5-VL-72B-Instruct@hyperbolic","Qwen/Qwen2.5-VL-7B-Instruct@hyperbolic","SDXL1.0-base@hyperbolic","TTS@hyperbolic","deepseek-ai/DeepSeek-R1@hyperbolic","deepseek-ai/DeepSeek-V3-0324@hyperbolic","deepseek-ai/DeepSeek-V3@hyperbolic","meta-llama/Llama-3.2-3B-Instruct@hyperbolic","meta-llama/Llama-3.3-70B-Instruct@hyperbolic","meta-llama/Meta-Llama-3-70B-Instruct@hyperbolic","meta-llama/Meta-Llama-3.1-405B-FP8@hyperbolic","meta-llama/Meta-Llama-3.1-405B-Instruct@hyperbolic","meta-llama/Meta-Llama-3.1-405B@hyperbolic","meta-llama/Meta-Llama-3.1-70B-Instruct@hyperbolic","meta-llama/Meta-Llama-3.1-8B-Instruct@hyperbolic","mistralai/Pixtral-12B-2409@hyperbolic"]
model: {"mut":"deepseek-chat","emoji":"🐋","rate":[0.27,0.07,1.1],"balance":"$14.5032"}
console: {"columns":166,"rows":25}
user: {"nic":"skid","user":"nitro@ryzen5","sharecount":2,"terminal":"vscode"}
use /help for latest and exit to quit

[SPEW] ["models/embedding-gecko-001@gemini","models/gemini-1.0-pro-vision-latest@gemini","models/gemini-pro-vision@gemini","models/gemini-1.5-pro-latest@gemini","models/gemini-1.5-pro-002@gemini","models/gemini-1.5-pro@gemini","models/gemini-1.5-flash-latest@gemini","models/gemini-1.5-flash@gemini","models/gemini-1.5-flash-002@gemini","models/gemini-1.5-flash-8b@gemini","models/gemini-1.5-flash-8b-001@gemini","models/gemini-1.5-flash-8b-latest@gemini","models/gemini-2.5-pro-preview-03-25@gemini","models/gemini-2.5-flash-preview-05-20@gemini","models/gemini-2.5-flash@gemini","models/gemini-2.5-flash-lite-preview-06-17@gemini","models/gemini-2.5-pro-preview-05-06@gemini","models/gemini-2.5-pro-preview-06-05@gemini","models/gemini-2.5-pro@gemini","models/gemini-2.0-flash-exp@gemini","models/gemini-2.0-flash@gemini","models/gemini-2.0-flash-001@gemini","models/gemini-2.0-flash-exp-image-generation@gemini","models/gemini-2.0-flash-lite-001@gemini","models/gemini-2.0-flash-lite@gemini","models/gemini-2.0-flash-preview-image-generation@gemini","models/gemini-2.0-flash-lite-preview-02-05@gemini","models/gemini-2.0-flash-lite-preview@gemini","models/gemini-2.0-pro-exp@gemini","models/gemini-2.0-pro-exp-02-05@gemini","models/gemini-exp-1206@gemini","models/gemini-2.0-flash-thinking-exp-01-21@gemini","models/gemini-2.0-flash-thinking-exp@gemini","models/gemini-2.0-flash-thinking-exp-1219@gemini","models/gemini-2.5-flash-preview-tts@gemini","models/gemini-2.5-pro-preview-tts@gemini","models/learnlm-2.0-flash-experimental@gemini","models/gemma-3-1b-it@gemini","models/gemma-3-4b-it@gemini","models/gemma-3-12b-it@gemini","models/gemma-3-27b-it@gemini","models/gemma-3n-e4b-it@gemini","models/gemma-3n-e2b-it@gemini","models/gemini-2.5-flash-lite@gemini","models/embedding-001@gemini","models/text-embedding-004@gemini","models/gemini-embedding-exp-03-07@gemini","models/gemini-embedding-exp@gemini","models/gemini-embedding-001@gemini","models/aqa@gemini"]
[SPEW]

?Prompt error: InvalidData: Windows stdio in console mode does not support writing non-UTF-8 byte sequences
    at async Object.write (ext:deno_web/06_streams.js:1180:9) {
  name: "InvalidData"
}
error: Uncaught (in promise) BadResource: Bad resource ID
		console.log("[SHLOP] reset");


Enabling Mouse Reporting in ANSI Terminals
To detect mouse clicks, movements, and releases, you need to enable mouse tracking using
ANSI escape sequences. Most modern terminals (xterm, iTerm2, GNOME Terminal, Windows Terminal)
support this.

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

1. Basic Mouse Reporting Modes
┌──────┬─────────────────┬─────────────┐
│  Mode │  Escape Sequence │  Description │
├──────┼─────────────────┼─────────────┤
│  Normal (Click Tracking) │  `\x1b[?1000h`  │  Reports mouse clicks & drags
(press/release). │
│  Extended (Motion Tracking) │  `\x1b[?1002h`  │  Reports mouse movement while a
button is held. │
│  Full (All Events) │  `\x1b[?1003h`  │  Reports all mouse movements (even without
clicks). │
└──────┴─────────────────┴─────────────┘

• Disable mouse reporting:*
`\x1b[?1000l` (or `1002l`, `1003l` for extended/full modes).

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

2. Mouse Event Format
When enabled, mouse actions send an escape sequence like:

\x1b[M<b><x><y>

- `<b>` = Button & action (encoded in a single byte).
- `<x>` & `<y>` = Column & row (1-based, ASCII-encoded).

Button Codes (`<b>`)
┌───────┬─────────┐
│  Value │  Meaning │
├───────┼─────────┤
│  `0x20` │  Left button press │
│  `0x23` │  Left button release │
│  `0x21` │  Middle button press │
│  `0x24` │  Middle button release │
│  `0x22` │  Right button press │
│  `0x25` │  Right button release │
│  `0x60` │  Scroll up │
│  `0x61` │  Scroll down │
└───────┴─────────┘

• (Note: Some terminals vary slightly in encoding.)*

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

3. Example in Deno
Here’s how to enable mouse tracking in your `slopfountain.ts`:


// Enable mouse reporting (normal mode)
Deno.stdout.write(new TextEncoder().encode("\x1b[?1000h"));

// Set raw mode for input
Deno.stdin.setRaw(true);
const reader = Deno.stdin.readable.getReader();

while (true) {
  const { value } = await reader.read();
  const input = new TextDecoder().decode(value);

  // Check for mouse input
  if (input.startsWith("\x1b[M")) {
    const [_, b, x, y] = input.split("").map(c => c.charCodeAt(0));
    const button = b - 32; // Decode button
    const col = x - 32;    // Column (1-based)
    const row = y - 32;    // Row (1-based)

    console.log(`Mouse: button=${button}, x=${col}, y=${row}`);
  }

  // Exit on Ctrl+C
  if (input === "\x03") break;
}

// Disable mouse reporting before exit
Deno.stdout.write(new TextEncoder().encode("\x1b[?1000l"));
Deno.stdin.setRaw(false);


━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

4. Handling Mouse Events
┌────────┬────────────────┬─────────┐
│  Action │  Example Output │  Meaning │
├────────┼────────────────┼─────────┤
│  Left-click at (10,5) │  `\x1b[M 0<10><5>` │  Press at column 10, row 5. │
│  Left-release │  `\x1b[M 3<10><5>` │  Release at same position. │
│  Right-click │  `\x1b[M 2<15><8>` │  Right press at (15,8). │
│  Scroll up │  `\x1b[M `\`<5><5>` │  `\` = 0x60 (scroll up). │
└────────┴────────────────┴─────────┘

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

5. Notes & Caveats
1. Terminal Compatibility:
   - Works in xterm, iTerm2, Windows Terminal, GNOME Terminal.
   - May not work in basic `cmd.exe` or `mintty`.

2. Coordinates:
   - `(1,1)` = Top-left corner (not `0,0`).
   - Some terminals report pixels (not cells) in extended modes.

3. Disable on Exit:
   - Always turn off mouse reporting (`\x1b[?1000l`) before exiting, or the terminal may
misbehave.

4. Drag Events:
   - Mode `1002` reports movement while a button is held.
   - Mode `1003` reports all movements (even without clicks).

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

6. Advanced: SGR Mode (Better Encoding)
For more precise reporting (like high-DPI mice), use SGR mode:

// Enable SGR mouse mode (better for modern terminals)
Deno.stdout.write(new TextEncoder().encode("\x1b[?1006h"));

// Example SGR event: `\x1b[<0;12;35M` = Left-click at (12,35)

- Format: `\x1b[<b;x;yM` (press) or `\x1b[<b;x;ym` (release).
- Works better with high-resolution mice.

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

Summary
✅ Enable mouse reporting with `\x1b[?1000h`.
📊 Decode events (`\x1b[M<b><x><y>`).
🚫 Disable with `\x1b[?1000l` before exiting.

Would you like a full implementation in `slopfountain.ts`? I can refine the mouse handling logic
further. 🐭

{account:deepseek,spent:0.0128,balance:-0.6814}
 fountain 1.3.2 ⛲  deepseek-chat 🐋 deepseek-chat@deepseek 1.0° 🪠 $0.013 111.6KB 48.54s
>


//
📜
☯
🪣

//const toolKey={tools:"🪣",notool:"🐸",off:"🪠"};
//,"📘":"Inline","📘":"Inline" "📜"📠


class Item{
	role:string;
	name:sgtring;
	title:string;
	content:string;
}

class History{

}

class Payload{
	model:string="";
	messages:Item[]=[];
	tools:[]=[];
	temperature:number=1.0;
	max_tokens:{}={};
	config:{}={};
};


𓅷 𓅸 𓅹 𓅺 𓅻 𓅼 𓅽
> /model 18
model: {"id":0,"mut":"claude3haiku","emoji":"🌐","rate":[0.8,4],
"modelname":"claude-3-haiku-20240307@anthropic","balance":"$-8.7973",
"strict":true,"multi":false,"inline":false
}

purpose: fast speeds, improved instruction following, and more accurate tool use

> hi claude
+

Oops. invalid_request_error messages.0.content: Field required
Switch model, drop shares or reset history to continue.


// slopsite snapshot for worker refs

/*
import { resolve } from "https://deno.land/std/path/mod.ts";
import { _common } from "https://deno.land/std@0.224.0/path/_common/common.ts";

let verbose=false;

const rawPrompt=true;

let outputBuffer=[];
let printBuffer=[];
let markdownBuffer=[];

const exitMessage="Ending session.";

const AnsiDefault="\x1B[39m";
const AnsiPink="\x1B[38;5;206m";
const AnsiBlankLine="\x1B[0K";
const AnsiClear="\x1B[2J";
const AnsiHome="\x1B[H";
const AnsiCursor="\x1B[";

const AnsiMouseOn="\x1B[?1003h\x1B[?1015h\x1B[?1006h";
const AnsiMouseOff="\x1B[?1000l";

let consoleSize=Deno.consoleSize();

function AnsiPrompt(){
	const row=consoleSize.rows;
	return AnsiCursor + row + ";1H";// + AnsiBlankLine;
}

function toString(arg:any):string{
	if (typeof arg === 'object') {
		return JSON.stringify(arg);
	}
	return String(arg);
}

async function fileLength(path) {
	const stat=await Deno.stat(path);
	return stat.size;
}

function echo(...args:any[]){
//	const args=arguments.length?Array.from(arguments):[];
	const lines=[];
	for(const arg of args){
		const line=toString(arg);
		lines.push(line);
	}
	outputBuffer.push(lines.join(" "));
}

async function readFileNames(path:string,suffix:string){
	const result=[];
	try {
	for await (const entry of Deno.readDir(path)) {
		if (entry.isFile && entry.name.endsWith(suffix)) {
			if(verbose) echo("readFileNames",path,entry);
			result.push(entry.name);
		}
	}
	} catch (error) {
		echo("readFileNames:", error);
	}
	return result;
}

class Event{
	name: string;
	code: number[];
	constructor(name:string,code:number[]) {
		this.name=name;
		this.code=code;
	}
};

const appDir=Deno.cwd();
const slopPath=resolve(appDir,"../slop");

const slops:Worker[]=[];
const slopFrames:string[]=[];
const slopnames=await readFileNames(slopPath,".slop.ts");
const slopEvents:Event[]=[];

function onKey(value:number[]){
	const e=new Event("key",value);
	slopEvents.push(e);
}

function resetWorkers(){
	consoleSize=Deno.consoleSize();
	for(const worker of slops){
		console.log("[SLOP] worker reset");
		worker.postMessage({command:"reset",consoleSize});
	}
}

for(const name of slopnames){
	const path=slopPath+"/"+name;
	const len=await fileLength(path);
	echo("[SLOP] running slop",name,len);
	const url="file:///"+path;
	const worker=new Worker(url,{type: "module"});
	worker.onmessage = (message) => {
		const payload={...message.data};
		switch(payload.event){
			case "tick":
				if(payload.frame){
					slopFrames.push(payload.frame);
				}
				break;
			default:
				echo("[SLOP]",name,payload);
				break;
		}
	}
	slops.push(worker);
}

let slopPail:unknown[]=[];

function logSlop(_result:any){
	const message=JSON.stringify(_result);
	console.error("\t[slop]",message);
	slopPail.push(message);
}


async function sleep(ms:number) {
	await new Promise(function(resolve) {setTimeout(resolve, ms);});
}

function flushEvents(){
	const events:Event[]=[];
	if(slopEvents.length&&slopEvent<slopEvents.length){
		while(slopEvent<slopEvents.length){
			const _event:Event=slopEvents[slopEvent++];
			events.push(_event);
		}
	}
	return events;
}

const decoder=new TextDecoder("utf-8");
const encoder=new TextEncoder();

let promptBuffer=new Uint8Array(0);
let slopFrame=0;
let slopEvent=0;
const reader=Deno.stdin.readable.getReader();
const writer=Deno.stdout.writable.getWriter();
async function refreshBackground(pause:number,line:string) {
	await new Promise(resolve => setTimeout(resolve, pause));
	const events=flushEvents();
	if(events.length){
		console.log("[SLOP] workers update",JSON.stringify(events));
		for(const worker of slops){
			worker.postMessage({command:"update",events});
		}
	}
	if(slopFrames.length&&slopFrame!=slopFrames.length){
		slopFrame=slopFrames.length;
		const frame=slopFrames[slopFrame-1];
//		const message=AnsiHome + frame + AnsiCursor + row + ";1H\n" + prompt+line;
		const message=AnsiHome+frame+AnsiPrompt()+AnsiPink+line+AnsiDefault;
		await writer.write(encoder.encode(message));
		await writer.ready;
	}
}

// exitSlop 𓊽𓉴𓉴𓉴𓊽

function exitSlop(){
	Deno.stdin.setRaw(false);
	console.log("exitSlop",exitMessage);
}

// promptSlop 𓅠

async function promptSlop(message:string) {
	if(!rawPrompt) {
		const response=await prompt(message);
		return response;
	}
	let result="";
	if(message){
		await writer.write(encoder.encode(message));
		await writer.ready;
	}
	Deno.stdin.setRaw(true);
	const timer = setInterval(async() => {
		const line=decoder.decode(promptBuffer);
		await refreshBackground(5,message+line);
	}, 100);
	let busy=true;
	while (busy) {
		try {
//			const timeout = setTimeout(() => {refreshBackground(5)}, 1000); // 5-second timeout
			const { value, done }=await reader.read();
			if (done || !value) break;
			let bytes=[];
			for (const byte of value) {
				if (byte === 0x7F || byte === 0x08) { // Backspace
					if (promptBuffer.length > 0) {
						promptBuffer=promptBuffer.slice(0, -1);
						bytes.push(0x08, 0x20, 0x08);
					}
				} else if (byte === 0x1b) { // Escape sequence
					if (value.length === 1) {
						exitSlop();
						Deno.exit(0);
					}
					onKey(value);
					if (value.length === 3) {
						if (value[1] === 0xf4 && value[2] === 0x50) {
							echo("F1");
						}
					}
					break;
				} else if (byte === 0x0A || byte === 0x0D) { // Enter key
					bytes.push(0x0D, 0x0A);
					const line=decoder.decode(promptBuffer);
					let n=line.length;
					if (n > 0) {
						promptBuffer=promptBuffer.slice(n);
					}
					result=line.trimEnd();
					echo("[stdin]",result);
					busy=false;
				} else if (byte==0x09){
					onKey([0]);
				} else {
					bytes.push(byte);
					const buf=new Uint8Array(promptBuffer.length + 1);
					buf.set(promptBuffer);
					buf[promptBuffer.length]=byte;
					promptBuffer=buf;
				}
			}
			if (bytes.length) await writer.write(new Uint8Array(bytes));
		}catch(error){
			console.error("Prompt error:", error);
			busy=false;
		}
	}
	clearInterval(timer);
	Deno.stdin.setRaw(false);
	return result;
}

console.log("slop 0.1 mouse is on"+AnsiMouseOn);

while(true){
	const input=await(promptSlop(">"));
	if(input=="exit") break;
	if(input==""){
		console.log("[SLOP] reset");
		resetWorkers();
		continue;
	}
	console.log("[SLOP] ",input);
}


console.log("oh no, bye, mouse off");
console.log(AnsiMouseOff);

exitSlop();
Deno.exit(0);
*/

GEMINI {
	"name":"models/gemini-2.5-flash-preview-tts",
	"version":"gemini-2.5-flash-exp-tts-2025-05-19",
	"displayName":"Gemini 2.5 Flash Preview TTS",
	"description":"Gemini 2.5 Flash Preview TTS",
	"inputTokenLimit":8192,
	"outputTokenLimit":16384,
	"supportedGenerationMethods":["countTokens","generateContent"],
	"temperature":1,
	"topP":0.95,
	"topK":64,
	"maxTemperature":2
}

"topP":0.95,"topK":64,"maxTemperature":2

## yet another new name

![Slop Welcome](slop/slopwelcome.png)


+Here's a markdown table test with Chinese mythological creatures:

┌───────────────────┬──────────────────────────────────────┬─────────────────────┐
│  Creature          │  Description                          │  Symbolism           │
├───────────────────┼──────────────────────────────────────┼─────────────────────┤
│  龙 (Lóng)        │  Celestial dragon, controls water     │  Imperial power      │
│  凤凰 (Fènghuáng) │  Immortal fire bird                   │  Harmony, renewal    │
│  麒麟 (Qílín)     │  Hybrid beast with antlers/scales      │  Auspicious omen     │
│  白虎 (Báihǔ)     │  White tiger of the west               │  Martial prowess     │
└───────────────────┴──────────────────────────────────────┴─────────────────────┘

Let me know if you'd like:
- Different styling (e.g., box-drawing chars)
- Additional columns/rows
- Embedded code blocks

• (Tables render differently per client - this should align cleanly in standard markdown viewers.)*

 fountain 1.2.6 ⛲  deepseekchat 🐋 deepseek-chat@deepseek 1.0° 🪠 $0.009 98.47KB 13.20s
>this needs spacing rule
+Slop Fountain has crashed, darn, this release will be stable soon: ReferenceError: error is not defined
    at promptForge (file:///C:/nitrologic/fountain/roha/fountain.js:1820:35)
    at eventLoopTick (ext:core/01_core.js:178:7)
    at async chat (file:///C:/nitrologic/fountain/roha/fountain.js:2967:10)
    at async file:///C:/nitrologic/fountain/roha/fountain.js:3161:2
error: Uncaught (in promise) BadResource: Bad resource ID
		console.log(line);
			^
    at Object.print (ext:core/01_core.js:678:28)
    at Console.<anonymous> (ext:runtime/98_global_scope_shared.js:136:46)
    at console.log (ext:deno_console/01_console.js:3139:20)
    at flush (file:///C:/nitrologic/fountain/roha/fountain.js:625:11)
    at exitForge (file:///C:/nitrologic/fountain/roha/fountain.js:198:8)
    at eventLoopTick (ext:core/01_core.js:178:7)
    at async file:///C:/nitrologic/fountain/roha/fountain.js:3164:2




const rulbreak500="─┬──┴".repeat(100);
const pageRule=rule500;
# interface

[model-name@account temperature° $cost.000 context.00KB time.00s]

# commands

/model [id] [all]

/share [folder]

/push

* discuss with model under test here

exit


> /commit
[DeepSeek] not ok 400 Bad Request
[FOUNTAIN] unhandled error DeepSeek API error
[FOUNTAIN] Error: DeepSeek API error
    at Object.create (file:///C:/nitrologic/fountain/roha/fountain.js:1191:14)
    at eventLoopTick (ext:core/01_core.js:178:7)
    at async relay (file:///C:/nitrologic/fountain/roha/fountain.js:2722:20)
    at async chat (file:///C:/nitrologic/fountain/roha/fountain.js:3003:5)
    at async file:///C:/nitrologic/fountain/roha/fountain.js:3145:2
>


[FOUNTAIN] unhandled error DeepSeek API error: Bad Request "Error: DeepSeek API error:

 Bad Request
     at Object.create (file:///C:/nitrologic/fountain/roha/fountain.js:1190:14)
	     at eventLoopTick (ext:core/01_core.js:178:7)
		     at async relay (file:///C:/nitrologic/fountain/roha/fountain.js:2721:20)
			     at async chat (file:///C:/nitrologic/fountain/roha/fountain.js:3001:5)
				     at async file:///C:/nitrologic/fountain/roha/fountain.js:3143:2"

𓏢 harp
𓏣 sistrum

• Coptic (Sahidic Dialect):*
Ⲛⲓⲙ ⲛⲁⲣⲓⲭⲣⲓⲥⲧⲟⲥ ⲙⲡⲓⲟⲩⲱⲛϩ ⲉⲃⲟⲗ.
Ⲡⲉⲛⲓⲱⲧ ⲉϥϯⲙⲉ ⲙⲙⲟⲛ.

• English:*
"We are Christians of the true light.
Our Father gives wisdom daily."

This uses:
- Standard Sahidic Coptic vocabulary
- The Coptic alphabet from your bibli.json (ⲁ-ⲱ + Ϣ-Ϯ)
- Simple grammatical structure


https://en.wikipedia.org/wiki/List_of_Egyptian_hieroglyphs

𓄰𓄱𓄲𓄳𓄴𓄵𓄶𓄷𓄱𓄰

𓄸

//			const timeout = setTimeout(() => {refreshBackground(5)}, 1000); // 5-second timeout


async function promptForge2(message) {
	if(!roha.config.rawprompt) return prompt(message);
	let result="";
	if (message) {
		await writer.write(encoder.encode(message));
		await writer.ready;
	}
	if(roha.config.page) {
		await writer.write(homeCursor);
	}
	Deno.stdin.setRaw(true);
	try {
		let busy=true;
		while (busy) {
			const { value, done }=await reader.read();
			if (done || !value) break;
			let bytes=[];
			for (const byte of value) {
				if (byte === 0x7F || byte === 0x08) { // Backspace
					if (promptBuffer.length > 0) {
						promptBuffer=promptBuffer.slice(0, -1);
						bytes.push(0x08, 0x20, 0x08);
					}
				} else if (byte === 0x1b) { // Escape sequence
					if (value.length === 1) {
						await exitForge();
						Deno.exit(0);
					}
					if (value.length === 3) {
						if (value[1] === 0xf4 && value[2] === 0x50) {
							echo("F1");
						}
					}
					break;
				} else if (byte === 0x0A || byte === 0x0D) { // Enter key
					bytes.push(0x0D, 0x0A);
					const line=decoder.decode(promptBuffer);
					let n=line.length;
					if (n > 0) {
						promptBuffer=promptBuffer.slice(n);
					}
					result=line.trimEnd();
					await log(result, "stdin");
					busy=false;
				} else {
					bytes.push(byte);
					const buf=new Uint8Array(promptBuffer.length + 1);
					buf.set(promptBuffer);
					buf[promptBuffer.length]=byte;
					promptBuffer=buf;
				}
			}
			if (bytes.length) await writer.write(new Uint8Array(bytes));
		}
	}catch(e){
		echo("promptForge","threw",e);
	} finally {
		Deno.stdin.setRaw(false);
	}
	if(roha.config.page) await writer.write(homeCursor);
	return result;
}


bibli.spec.unicode.lexis.𓅷𓅽

"latin": {
"name": "Latin",
"description": "Latin linguistic roots and Unicode characters",
"alphabet": {
"lower": "abcdefghijklmnopqrstuvwxyz",
"upper": "ABCDEFGHIJKLMNOPQRSTUVWXYZ",
"uncommon": "ÆæŒœÞþÐðƷʒȜȝ"
},
"lingua": {
"core": "verbum nomen ratio vox forma scriptum",
"verbs": "ago dico facio scribo video voco",
"concepts": "veritas virtus tempus lex ars scientia",
"ends": {
"noun": "us a um io ix io",
"verb": "are ere ire ior",
"abstract": "tio io tas men",
"agent": "tor trix or"
}
},

moueson
echo "\033[?1003h\033[?1015h\033[?1006h"
// stty -echo
// But we can still catch them in the STDIN
// We get 16 bits sequences like 35;15;7M where 35 is the mouse move, and the two next numbers are the row and colums numbers + the M ending.

//Then to reset:  echo
mouseoff
"\033[?1000l"

We could similarly catch clicks, mouse wheels, and mouse button wheel. This way we could implement buttons and buffer mouse scrolling. More details on mouse support in this post: https://stackoverflow.com/a/58390575/2494754

Other good one the Clipboard copy:

echo -e '\e]52;c;SGVsbG8gR2l0aHVi'


logy prefix words:
biblio bio chrono ethno topo geo anthro archaeo astro crimin dem etymo
hodo hydr myco neuro paleo pheno psycho socio theo zo
eco mytho philo onco seismo
aero- (aerology: study of the atmosphere)
agro- (agrology: study of soils)
cosmo- (cosmology: study of the universe)
crypto- (cryptology: study of codes)
dendro- (dendrology: study of trees)
eno- (enology: study of wine)
entom- (entomology: study of insects)
glotto- (glottology: study of languages)
graph- (graphology: study of handwriting)
hemato- (hematology: study of blood)
ichthyo- (ichthyology: study of fish)
litho- (lithology: study of rocks)
meteo- (meteorology: study of weather)
morpho- (morphology: study of forms/structures)
nepho- (nephology: study of clouds)
noso- (nosology: study of disease classification)
odonto- (odontology: study of teeth)
orni- (ornithology: study of birds)
patho- (pathology: study of diseases)
phreno- (phrenology: study of skull shapes, now obsolete)
pomo- (pomology: study of fruit)
rheu- (rheumatology: study of rheumatic diseases)
speleo- (speleology: study of caves)
techno- (technology: study/application of techniques)
vexillo- (vexillology: study of flags)

Using these above, you can make pink text like so:

\033[38;5;206m     #That is, \033[38;5;<FG COLOR>m

And make an early-morning blue background using

\033[48;5;57m      #That is, \033[48;5;<BG COLOR>m
And, of course, you can combine these:

\033[38;5;206;48;5;57m
The 8-bit colours are arranged like so:

Range	Description
0x00-0x07	standard colors (same as the 4-bit colours)
0x08-0x0F	high intensity colors
0x10-0xE7	6 × 6 × 6 cube (216 colors): 16 + 36 × r + 6 × g + b (0 ≤ r, g, b ≤ 5)
0xE8-0xFF	grayscale from black to white in 24 steps

class pixels2{
	width: number;
	height: number;
	bits: boolean[];
	constructor(width:number,height:number) {
		this.width = width;
		this.height = height;
		this.bits = new Array(width*height).fill(false);
		const words=(width+15)/16;
	}
	clear(){
		const n=this.bits.length;
		for(let xy=0;xy<n;xy++){
			const r=Math.random();
			this.bits[xy]=r>0.3?true:false;
		}
	}
	frame():string[]{
		const w=this.width;
		const h=this.height;
		const bits=this.bits;
		const cols:number=h/2;
		const rows:number=w/2;
		const lines:string[]=[];
		for(let y:number=0;y<cols;y++){
			let line:string[]=[];
			const y0=2*y*w;
			const y1=y0+w;
			for(let x:number=0;x<rows;x++){
				const b4:boolean[]=[
					bits[y0+x*2+0],
					bits[y0+x*2+1],
					bits[y1+x*2+0],
					bits[y1+x*2+1]
				];
				const index:number=(b4[0]?1:0)+(b4[1]?2:0)+(b4[2]?4:0)+(b4[3]?8:0);
				const q4=quads.charAt(index);
				line.push(q4);
			}
			lines.push(line.join(""));
		}
		return lines;
	}
};



const Leds="⚫⚪🔵🟢🔴🟡🟣🟠🟤";
const dots = ["🟣", "🔵", "🟢", "🟡", "🔴"];

function blankFrame2(){
	const w=32;
	const h=12;
	const bits:boolean[]=new Array(w*h);
	for(let xy=0;xy<w*h;xy++){
		const r=Math.random();
		bits[xy]=r>0.3?true:false;
	}
	const cols=h/2;
	const rows=w/2;
	const lines:string[]=new Array(rows);
	for(let y=0;y<cols;y++){
		let line:string[]=[];
		const y0=2*y*w;
		const y1=y0+w;
		for(let x=0;x<rows;x++){
			const b4:boolean[]=[
				bits[y0+x*2+0],
				bits[y0+x*2+1],
				bits[y1+x*2+0],
				bits[y1+x*2+1]
			];
			const index:number=(b4[0]?1:0)+(b4[1]?2:0)+(b4[2]?4:0)+(b4[3]?8:0);
			const q4=quads.charAt(index);
			line.push(q4);
		}
		lines[y]=line.join("");
	}
	return lines.join("\n");
}



// slop 0.1 const bloks=" ▘▝▗▄▌▞▖▜▚▐▀▛▙▟█"


/*
const blocks=" ▘▝▖▗▌▐▀▄▚▞▛▜▙▟█";
const blockbits=[0, 1,2,4,8, 5,10,3,12,9,6, 7,11,13,14, 15];
let blits=Array(16).fill(" ");
for(let index=0;index<16;index++){
	const bit=blockbits[index];
	blits[bit]=blocks.charAt(index);
}
console.log(blits.join(""));
*/


{
  "hieroglyph": {
    "base": {
	"description": "Egyptian Hieroglyph A001 (Seated Man)",
	"codepoint": "U+13000",
	"character": "𓀀"
    },
    "variants": [
	{
	"rotation": "90 degrees",
	"variation_selector": "VS1",
	"codepoint": "U+13000 U+FE00",
	"character_sequence": "𓀀︀"
	},
	{
	"rotation": "180 degrees",
	"variation_selector": "VS2",
	"codepoint": "U+13000 U+FE01",
	"character_sequence": "𓀀︁"
	}
    ]
  }

"all":
"𓀀𓀁𓀂𓀃𓀄𓀅𓀆𓀇𓀈𓀉𓀊𓀋𓀌𓀍𓀎𓀏𓀐𓀑𓀒𓀓𓀔𓀕𓀖𓀗𓀘𓀙𓀚𓀛𓀜𓀝𓀞𓀟𓀠𓀡𓀢𓀣𓀤𓀥𓀦𓀧𓀨𓀩𓀪𓀫𓀬𓀭𓀮𓀯𓀰𓀱𓀲𓀳𓀴𓀵𓀶𓀷𓀸𓀹𓀺𓀻𓀼𓀽𓀾𓀿𓁀𓁁𓁂𓁃𓁄𓁅𓁆𓁇𓁈𓁉𓁊𓁋𓁌𓁍𓁎𓁏𓁐𓁑𓁒𓁓𓁔𓁕𓁖𓁗𓁘𓁙𓁚𓁛𓁜𓁝𓁞𓁟𓁠𓁡𓁢𓁣𓁤𓁥𓁦𓁧𓁨𓁩𓁪𓁫𓁬𓁭𓁮𓁯𓁰𓁱𓁲𓁳𓁴𓁵𓁶𓁷𓁸𓁹𓁺𓁻𓁼𓁽𓁾𓁿𓂀𓂁𓂂𓂃𓂄𓂅𓂆𓂇𓂈𓂉𓂊𓂋𓂌𓂍𓂎𓂏𓂐𓂑𓂒𓂓𓂔𓂕𓂖𓂗𓂘𓂙𓂚𓂛𓂜𓂝𓂞𓂟𓂠𓂡𓂢𓂣𓂤𓂥𓂦𓂧𓂨𓂩𓂪𓂫𓂬𓂭𓂮𓂯𓂰𓂱𓂲𓂳𓂴𓂵𓂶𓂷𓂸𓂹𓂺𓂻𓂼𓂽𓂾𓂿𓃀𓃁𓃂𓃃𓃄𓃅𓃆𓃇𓃈𓃉𓃊𓃋𓃌𓃍𓃎𓃏𓃐𓃑𓃒𓃓𓃔𓃕𓃖𓃗𓃘𓃙𓃚𓃛𓃜𓃝𓃞𓃟𓃠𓃡𓃢𓃣𓃤𓃥𓃦𓃧𓃨𓃩𓃪𓃫𓃬𓃭𓃮𓃯𓃰𓃱𓃲𓃳𓃴𓃵𓃶𓃷𓃸𓃹𓃺𓃻𓃼𓃽𓃾𓃿𓄀𓄁𓄂𓄃𓄄𓄅𓄆𓄇𓄈𓄉𓄊𓄋𓄌𓄍𓄎𓄏𓄐𓄑𓄒𓄓𓄔𓄕𓄖𓄗𓄘𓄙𓄚𓄛𓄜𓄝𓄞𓄟𓄠𓄡𓄢𓄣𓄤𓄥𓄦𓄧𓄨𓄩𓄪𓄫𓄬𓄭𓄮𓄯𓄰𓄱𓄲𓄳𓄴𓄵𓄶𓄷𓄸𓄹𓄺𓄻𓄼𓄽𓄾𓄿𓅀𓅁𓅂𓅃𓅄𓅅𓅆𓅇𓅈𓅉𓅊𓅋𓅌𓅍𓅎𓅏𓅐𓅑𓅒𓅓𓅔𓅕𓅖𓅗𓅘𓅙𓅚𓅛𓅜𓅝𓅞𓅟𓅠𓅡𓅢𓅣𓅤𓅥𓅦𓅧𓅨𓅩𓅪𓅫𓅬𓅭𓅮𓅯𓅰𓅱𓅲𓅳𓅴𓅵𓅶𓅷𓅸𓅹𓅺𓅻𓅼𓅽𓅾𓅿𓆀𓆁𓆂𓆃𓆄𓆅𓆆𓆇𓆈𓆉𓆊𓆋𓆌𓆍𓆎𓆏𓆐𓆑𓆒𓆓𓆔𓆕𓆖𓆗𓆘𓆙𓆚𓆛𓆜𓆝𓆞𓆟𓆠𓆡𓆢𓆣𓆤𓆥𓆦𓆧𓆨𓆩𓆪𓆫𓆬𓆭𓆮𓆯𓆰𓆱𓆲𓆳𓆴𓆵𓆶𓆷𓆸𓆹𓆺𓆻𓆼𓆽𓆾𓆿𓇀𓇁𓇂𓇃𓇄𓇅𓇆𓇇𓇈𓇉𓇊𓇋𓇌𓇍𓇎𓇏𓇐𓇑𓇒𓇓𓇔𓇕𓇖𓇗𓇘𓇙𓇚𓇛𓇜𓇝𓇞𓇟𓇠𓇡𓇢𓇣𓇤𓇥𓇦𓇧𓇨𓇩𓇪𓇫𓇬𓇭𓇮𓇯𓇰𓇱𓇲𓇳𓇴𓇵𓇶𓇷𓇸𓇹𓇺𓇻𓇼𓇽𓇾𓇿𓈀𓈁𓈂𓈃𓈄𓈅𓈆𓈇𓈈𓈉𓈊𓈋𓈌𓈍𓈎𓈏𓈐𓈑𓈒𓈓𓈔𓈕𓈖𓈗𓈘𓈙𓈚𓈛𓈜𓈝𓈞𓈟𓈠𓈡𓈢𓈣𓈤𓈥𓈦𓈧𓈨𓈩𓈪𓈫𓈬𓈭𓈮𓈯𓈰𓈱𓈲𓈳𓈴𓈵𓈶𓈷𓈸𓈹𓈺𓈻𓈼𓈽𓈾𓈿𓉀𓉁𓉂𓉃𓉄𓉅𓉆𓉇𓉈𓉉𓉊𓉋𓉌𓉍𓉎𓉏𓉐𓉑𓉒𓉓𓉔𓉕𓉖𓉗𓉘𓉙𓉚𓉛𓉜𓉝𓉞𓉟𓉠𓉡𓉢𓉣𓉤𓉥𓉦𓉧𓉨𓉩𓉪𓉫𓉬𓉭𓉮𓉯𓉰𓉱𓉲𓉳𓉴𓉵𓉶𓉷𓉸𓉹𓉺𓉻𓉼𓉽𓉾𓉿𓊀𓊁𓊂𓊃𓊄𓊅𓊆𓊇𓊈𓊉𓊊𓊋𓊌𓊍𓊎𓊏𓊐𓊑𓊒𓊓𓊔𓊕𓊖𓊗𓊘𓊙𓊚𓊛𓊜𓊝𓊞𓊟𓊠𓊡𓊢𓊣𓊤𓊥𓊦𓊧𓊨𓊩𓊪𓊫𓊬𓊭𓊮𓊯𓊰𓊱𓊲𓊳𓊴𓊵𓊶𓊷𓊸𓊹𓊺𓊻𓊼𓊽𓊾𓊿𓋀𓋁𓋂𓋃𓋄𓋅𓋆𓋇𓋈𓋉𓋊𓋋𓋌𓋍𓋎𓋏𓋐𓋑𓋒𓋓𓋔𓋕𓋖𓋗𓋘𓋙𓋚𓋛𓋜𓋝𓋞𓋟𓋠𓋡𓋢𓋣𓋤𓋥𓋦𓋧𓋨𓋩𓋪𓋫𓋬𓋭𓋮𓋯𓋰𓋱𓋲𓋳𓋴𓋵𓋶𓋷𓋸𓋹𓋺𓋻𓋼𓋽𓋾𓋿𓌀𓌁𓌂𓌃𓌄𓌅𓌆𓌇𓌈𓌉𓌊𓌋𓌌𓌍𓌎𓌏𓌐𓌑𓌒𓌓𓌔𓌕𓌖𓌗𓌘𓌙𓌚𓌛𓌜𓌝𓌞𓌟𓌠𓌡𓌢𓌣𓌤𓌥𓌦𓌧𓌨𓌩𓌪𓌫𓌬𓌭𓌮𓌯𓌰𓌱𓌲𓌳𓌴𓌵𓌶𓌷𓌸𓌹𓌺𓌻𓌼𓌽𓌾𓌿𓍀𓍁𓍂𓍃𓍄𓍅𓍆𓍇𓍈𓍉𓍊𓍋𓍌𓍍𓍎𓍏𓍐𓍑𓍒𓍓𓍔𓍕𓍖𓍗𓍘𓍙𓍚𓍛𓍜𓍝𓍞𓍟𓍠𓍡𓍢𓍣𓍤𓍥𓍦𓍧𓍨𓍩𓍪𓍫𓍬𓍭𓍮𓍯𓍰𓍱𓍲𓍳𓍴𓍵𓍶𓍷𓍸𓍹𓍺𓍻𓍼𓍽𓍾𓍿𓎀𓎁𓎂𓎃𓎄𓎅𓎆𓎇𓎈𓎉𓎊𓎋𓎌𓎍𓎎𓎏𓎐𓎑𓎒𓎓𓎔𓎕𓎖𓎗𓎘𓎙𓎚𓎛𓎜𓎝𓎞𓎟𓎠𓎡𓎢𓎣𓎤𓎥𓎦𓎧𓎨𓎩𓎪𓎫𓎬𓎭𓎮𓎯𓎰𓎱𓎲𓎳𓎴𓎵𓎶𓎷𓎸𓎹𓎺𓎻𓎼𓎽𓎾𓎿𓏀𓏁𓏂𓏃𓏄𓏅𓏆𓏇𓏈𓏉𓏊𓏋𓏌𓏍𓏎𓏏𓏐𓏑𓏒𓏓𓏔𓏕𓏖𓏗𓏘𓏙𓏚𓏛𓏜𓏝𓏞𓏟𓏠𓏡𓏢𓏣𓏤𓏥𓏦𓏧𓏨𓏩𓏪𓏫𓏬𓏭𓏮𓏯𓏰𓏱𓏲𓏳𓏴𓏵𓏶𓏷𓏸𓏹𓏺𓏻𓏼𓏽𓏾𓏿𓐀𓐁𓐂𓐃𓐄𓐅𓐆𓐇𓐈𓐉𓐊𓐋𓐌𓐍𓐎𓐏𓐐𓐑𓐒𓐓𓐔𓐕𓐖𓐗𓐘𓐙𓐚𓐛𓐜𓐝𓐞𓐟𓐠𓐡𓐢𓐣𓐤𓐥𓐦𓐧𓐨𓐩𓐪𓐫𓐬𓐭𓐮𓐯",

cartouches


{
	"𓃱": "giraffe"
	"𓃰": "elephant"
	"𓃬": "lion",
	"𓃮": "leopard",
	"𓃲": "oryx",
	"𓃴": "gazelle",
	"𓃯": "hippo",
	"𓃥": "jackal",
	"𓃦": "hyena",
	"𓃸": "monkey",
	"𓃷": "baboon",
	"𓃗": "horse",
	"𓃘": "donkey",
	"𓃟": "pig",
	"𓃒": "bull",
	"𓃚": "kid",
	"𓃔": "calf",
	"𓃖": "suckling",
	"𓃠": "cat",
	"𓃡": "dog"
}

Aegyptus, Regular

Egyptian Hieroglyphs
Unicode version 5.2

Lo,Egyp
General classified as "Other_Letter" (Lo)
Script value "Egyptian Hieroglyphs" (Egyp).

[U+13000,U+1342F] encompassing 1,072 assigned code
[U+13460,U+143FF] Egyptian Hieroglyphs Extended-A

Gardiner’s Sign List 763 signs across 26 categories (A–Z) various in AA

use : classifiers ideograms phonograms

standardized variants for rotated signs (100)
	VS1: U+FE00 for 90° rotation (40)
	VS2: U+FE01 for 180° rotation (22)

{
	"A": {
		"name": "Man and His Occupations",
		"description": "Signs depicting human figures, actions, or roles such as seated man, king, or soldier.",
		"count": 59
	},
	"B": {
		"name": "Woman and Her Occupations",
		"description": "Signs of women, female roles, or activities like seated woman or queen.",
		"count": 7
	},
	"C": {
		"name": "Anthropomorphic Deities",
		"description": "Deities with human-like forms, such as gods like Osiris or Horus.",
		"count": 11
	},
	"D": {
		"name": "Parts of the Human Body",
		"description": "Body parts like eye, hand, or leg.",
		"count": 63,
	},
	"E": {
		"name": "Mammals",
		"description": "Mammalian animals, including cat, lion, or cow.",
		"count": 34,
	},
	"F": {
		"name": "Parts of Mammals",
		"description": "Animal body parts such as horn or tail.",
		"count": 32,
	},
	"G": {
		"name": "Birds",
		"description": "Bird species and related signs, like owl or vulture.",
		"count": 54,
	},
	"H": {
		"name": "Parts of Birds",
		"description": "Bird body parts, such as wing or feather.",
		"count": 8
	},
	"I": {
		"name": "Amphibious Animals, Reptiles, etc.",
		"description": "Reptiles and amphibians, like snake or crocodile.",
		"count": 15
	},
	"K": {
		"name": "Fish and Parts of Fish",
		"description": "Fish and fish-related signs, such as fish or fin.",
		"count": 6,
	},
	"L": {
		"name": "Invertebrates and Lesser Animals",
		"description": "Insects and small creatures, like bee or scorpion.",
		"count": 7,
	},
	"M": {
		"name": "Trees and Plants",
		"description": "Vegetation, such as reed or lotus.",
		"count": 44,
	},
	"N": {
		"name": "Sky, Earth, Water",
		"description": "Natural features like sky, mountain, or water.",
		"count": 42
	},
	"O": {
		"name": "Buildings, Parts of Buildings, etc.",
		"description": "Architectural elements, such as house or pyramid.",
		"count": 51
	},
	"P": {
		"name": "Ships, Parts of Ships, etc.",
		"description": "Watercraft and related signs, like boat or sail.",
		"count": 11
	},
	"Q": {
		"name": "Domestic and Funerary Furniture",
		"description": "Household items, such as chair or bed.",
		"count": 7
	},
	"R": {
		"name": "Temple Furniture and Sacred Emblems",
		"description": "Religious objects, like altar or ankh.",
		"count": 25
	},
	"S": {
		"name": "Crowns, Dress, Staves, etc.",
		"description": "Regalia and symbols of power, such as crown or scepter.",
		"count": 45
	},
	"T": {
		"name": "Warfare, Hunting, Butchery",
		"description": "Weapons and tools, like bow or knife.",
		"count": 35
	},
	"U": {
		"name": "Agriculture, Crafts, and Professions",
		"description": "Tools and activities, such as plow or adze.",
		"count": 41
	},
	"V": {
		"name": "Rope, Fiber, Baskets, Bags, etc.",
		"description": "Cordage and containers, like rope or basket.",
		"count": 39
	},
	"W": {
		"name": "Vessels of Stone and Earthenware",
		"description": "Containers, such as jar or pot.",
		"count": 25
	},
	"X": {
		"name": "Loaves and Cakes",
		"description": "Bread and food items, like loaf.",
		"count": 8
	},
	"Y": {
		"name": "Writings, Games, Music",
		"description": "Cultural objects, such as scroll or harp.",
		"count": 8
	},
	"Z": {
		"name": "Strokes, Signs Derived from Hieratic, Geometrical Figures",
		"description": "Lines and shapes, like single stroke.",
		"count": 11
	},
	"AA": {
		"name": "Unclassified",
		"description": "Miscellaneous signs not fitting other categories.",
		"count": 31
	}
}


𓉴𓊽𓊽𓊽𓊽𓊽𓉴𓊽𓊽𓊽𓊽𓊽𓉴𓊽𓊽𓊽𓊽𓊽𓉴𓊽𓊽𓊽𓊽𓊽𓉴𓊽𓊽𓊽𓊽𓊽𓉴𓉵𓉵𓉵𓉵𓉵𓉴𓊽𓊽𓊽𓊽𓊽𓉴𓊽𓊽𓊽𓊽𓊽𓉴𓊽𓊽𓊽𓊽𓊽𓉴𓊽𓊽𓊽𓊽𓊽𓉴𓊽𓊽𓊽𓊽𓊽𓉴

U+1300x	𓀀	𓀁	𓀂	𓀃	𓀄	𓀅	𓀆	𓀇	𓀈	𓀉	𓀊	𓀋	𓀌	𓀍	𓀎	𓀏
U+1301x	𓀐	𓀑	𓀒	𓀓	𓀔	𓀕	𓀖	𓀗	𓀘	𓀙	𓀚	𓀛	𓀜	𓀝	𓀞	𓀟
U+1302x	𓀠	𓀡	𓀢	𓀣	𓀤	𓀥	𓀦	𓀧	𓀨	𓀩	𓀪	𓀫	𓀬	𓀭	𓀮	𓀯
U+1303x	𓀰	𓀱	𓀲	𓀳	𓀴	𓀵	𓀶	𓀷	𓀸	𓀹	𓀺	𓀻	𓀼	𓀽	𓀾	𓀿
U+1304x	𓁀	𓁁	𓁂	𓁃	𓁄	𓁅	𓁆	𓁇	𓁈	𓁉	𓁊	𓁋	𓁌	𓁍	𓁎	𓁏
U+1305x	𓁐	𓁑	𓁒	𓁓	𓁔	𓁕	𓁖	𓁗	𓁘	𓁙	𓁚	𓁛	𓁜	𓁝	𓁞	𓁟
U+1306x	𓁠	𓁡	𓁢	𓁣	𓁤	𓁥	𓁦	𓁧	𓁨	𓁩	𓁪	𓁫	𓁬	𓁭	𓁮	𓁯
U+1307x	𓁰	𓁱	𓁲	𓁳	𓁴	𓁵	𓁶	𓁷	𓁸	𓁹	𓁺	𓁻	𓁼	𓁽	𓁾	𓁿
U+1308x	𓂀	𓂁	𓂂	𓂃	𓂄	𓂅	𓂆	𓂇	𓂈	𓂉	𓂊	𓂋	𓂌	𓂍	𓂎	𓂏
U+1309x	𓂐	𓂑	𓂒	𓂓	𓂔	𓂕	𓂖	𓂗	𓂘	𓂙	𓂚	𓂛	𓂜	𓂝	𓂞	𓂟
U+130Ax	𓂠	𓂡	𓂢	𓂣	𓂤	𓂥	𓂦	𓂧	𓂨	𓂩	𓂪	𓂫	𓂬	𓂭	𓂮	𓂯
U+130Bx	𓂰	𓂱	𓂲	𓂳	𓂴	𓂵	𓂶	𓂷	𓂸	𓂹	𓂺	𓂻	𓂼	𓂽	𓂾	𓂿
U+130Cx	𓃀	𓃁	𓃂	𓃃	𓃄	𓃅	𓃆	𓃇	𓃈	𓃉	𓃊	𓃋	𓃌	𓃍	𓃎	𓃏
U+130Dx	𓃐	𓃑	𓃒	𓃓	𓃔	𓃕	𓃖	𓃗	𓃘	𓃙	𓃚	𓃛	𓃜	𓃝	𓃞	𓃟
U+130Ex	𓃠	𓃡	𓃢	𓃣	𓃤	𓃥	𓃦	𓃧	𓃨	𓃩	𓃪	𓃫	𓃬	𓃭	𓃮	𓃯
U+130Fx	𓃰	𓃱	𓃲	𓃳	𓃴	𓃵	𓃶	𓃷	𓃸	𓃹	𓃺	𓃻	𓃼	𓃽	𓃾	𓃿
U+1310x	𓄀	𓄁	𓄂	𓄃	𓄄	𓄅	𓄆	𓄇	𓄈	𓄉	𓄊	𓄋	𓄌	𓄍	𓄎	𓄏
U+1311x	𓄐	𓄑	𓄒	𓄓	𓄔	𓄕	𓄖	𓄗	𓄘	𓄙	𓄚	𓄛	𓄜	𓄝	𓄞	𓄟
U+1312x	𓄠	𓄡	𓄢	𓄣	𓄤	𓄥	𓄦	𓄧	𓄨	𓄩	𓄪	𓄫	𓄬	𓄭	𓄮	𓄯
U+1313x	𓄰	𓄱	𓄲	𓄳	𓄴	𓄵	𓄶	𓄷	𓄸	𓄹	𓄺	𓄻	𓄼	𓄽	𓄾	𓄿
U+1314x	𓅀	𓅁	𓅂	𓅃	𓅄	𓅅	𓅆	𓅇	𓅈	𓅉	𓅊	𓅋	𓅌	𓅍	𓅎	𓅏
U+1315x	𓅐	𓅑	𓅒	𓅓	𓅔	𓅕	𓅖	𓅗	𓅘	𓅙	𓅚	𓅛	𓅜	𓅝	𓅞	𓅟
U+1316x	𓅠	𓅡	𓅢	𓅣	𓅤	𓅥	𓅦	𓅧	𓅨	𓅩	𓅪	𓅫	𓅬	𓅭	𓅮	𓅯
U+1317x	𓅰	𓅱	𓅲	𓅳	𓅴	𓅵	𓅶	𓅷	𓅸	𓅹	𓅺	𓅻	𓅼	𓅽	𓅾	𓅿
U+1318x	𓆀	𓆁	𓆂	𓆃	𓆄	𓆅	𓆆	𓆇	𓆈	𓆉	𓆊	𓆋	𓆌	𓆍	𓆎	𓆏
U+1319x	𓆐	𓆑	𓆒	𓆓	𓆔	𓆕	𓆖	𓆗	𓆘	𓆙	𓆚	𓆛	𓆜	𓆝	𓆞	𓆟
U+131Ax	𓆠	𓆡	𓆢	𓆣	𓆤	𓆥	𓆦	𓆧	𓆨	𓆩	𓆪	𓆫	𓆬	𓆭	𓆮	𓆯
U+131Bx	𓆰	𓆱	𓆲	𓆳	𓆴	𓆵	𓆶	𓆷	𓆸	𓆹	𓆺	𓆻	𓆼	𓆽	𓆾	𓆿
U+131Cx	𓇀	𓇁	𓇂	𓇃	𓇄	𓇅	𓇆	𓇇	𓇈	𓇉	𓇊	𓇋	𓇌	𓇍	𓇎	𓇏
U+131Dx	𓇐	𓇑	𓇒	𓇓	𓇔	𓇕	𓇖	𓇗	𓇘	𓇙	𓇚	𓇛	𓇜	𓇝	𓇞	𓇟
U+131Ex	𓇠	𓇡	𓇢	𓇣	𓇤	𓇥	𓇦	𓇧	𓇨	𓇩	𓇪	𓇫	𓇬	𓇭	𓇮	𓇯
U+131Fx	𓇰	𓇱	𓇲	𓇳	𓇴	𓇵	𓇶	𓇷	𓇸	𓇹	𓇺	𓇻	𓇼	𓇽	𓇾	𓇿
U+1320x	𓈀	𓈁	𓈂	𓈃	𓈄	𓈅	𓈆	𓈇	𓈈	𓈉	𓈊	𓈋	𓈌	𓈍	𓈎	𓈏
U+1321x	𓈐	𓈑	𓈒	𓈓	𓈔	𓈕	𓈖	𓈗	𓈘	𓈙	𓈚	𓈛	𓈜	𓈝	𓈞	𓈟
U+1322x	𓈠	𓈡	𓈢	𓈣	𓈤	𓈥	𓈦	𓈧	𓈨	𓈩	𓈪	𓈫	𓈬	𓈭	𓈮	𓈯
U+1323x	𓈰	𓈱	𓈲	𓈳	𓈴	𓈵	𓈶	𓈷	𓈸	𓈹	𓈺	𓈻	𓈼	𓈽	𓈾	𓈿
U+1324x	𓉀	𓉁	𓉂	𓉃	𓉄	𓉅	𓉆	𓉇	𓉈	𓉉	𓉊	𓉋	𓉌	𓉍	𓉎	𓉏
U+1325x	𓉐	𓉑	𓉒	𓉓	𓉔	𓉕	𓉖	𓉗	𓉘	𓉙	𓉚	𓉛	𓉜	𓉝	𓉞	𓉟
U+1326x	𓉠	𓉡	𓉢	𓉣	𓉤	𓉥	𓉦	𓉧	𓉨	𓉩	𓉪	𓉫	𓉬	𓉭	𓉮	𓉯
U+1327x	𓉰	𓉱	𓉲	𓉳	𓉴	𓉵	𓉶	𓉷	𓉸	𓉹	𓉺	𓉻	𓉼	𓉽	𓉾	𓉿
U+1328x	𓊀	𓊁	𓊂	𓊃	𓊄	𓊅	𓊆	𓊇	𓊈	𓊉	𓊊	𓊋	𓊌	𓊍	𓊎	𓊏
U+1329x	𓊐	𓊑	𓊒	𓊓	𓊔	𓊕	𓊖	𓊗	𓊘	𓊙	𓊚	𓊛	𓊜	𓊝	𓊞	𓊟
U+132Ax	𓊠	𓊡	𓊢	𓊣	𓊤	𓊥	𓊦	𓊧	𓊨	𓊩	𓊪	𓊫	𓊬	𓊭	𓊮	𓊯
U+132Bx	𓊰	𓊱	𓊲	𓊳	𓊴	𓊵	𓊶	𓊷	𓊸	𓊹	𓊺	𓊻	𓊼	𓊽	𓊾	𓊿
U+132Cx	𓋀	𓋁	𓋂	𓋃	𓋄	𓋅	𓋆	𓋇	𓋈	𓋉	𓋊	𓋋	𓋌	𓋍	𓋎	𓋏
U+132Dx	𓋐	𓋑	𓋒	𓋓	𓋔	𓋕	𓋖	𓋗	𓋘	𓋙	𓋚	𓋛	𓋜	𓋝	𓋞	𓋟
U+132Ex	𓋠	𓋡	𓋢	𓋣	𓋤	𓋥	𓋦	𓋧	𓋨	𓋩	𓋪	𓋫	𓋬	𓋭	𓋮	𓋯
U+132Fx	𓋰	𓋱	𓋲	𓋳	𓋴	𓋵	𓋶	𓋷	𓋸	𓋹	𓋺	𓋻	𓋼	𓋽	𓋾	𓋿
U+1330x	𓌀	𓌁	𓌂	𓌃	𓌄	𓌅	𓌆	𓌇	𓌈	𓌉	𓌊	𓌋	𓌌	𓌍	𓌎	𓌏
U+1331x	𓌐	𓌑	𓌒	𓌓	𓌔	𓌕	𓌖	𓌗	𓌘	𓌙	𓌚	𓌛	𓌜	𓌝	𓌞	𓌟
U+1332x	𓌠	𓌡	𓌢	𓌣	𓌤	𓌥	𓌦	𓌧	𓌨	𓌩	𓌪	𓌫	𓌬	𓌭	𓌮	𓌯
U+1333x	𓌰	𓌱	𓌲	𓌳	𓌴	𓌵	𓌶	𓌷	𓌸	𓌹	𓌺	𓌻	𓌼	𓌽	𓌾	𓌿
U+1334x	𓍀	𓍁	𓍂	𓍃	𓍄	𓍅	𓍆	𓍇	𓍈	𓍉	𓍊	𓍋	𓍌	𓍍	𓍎	𓍏
U+1335x	𓍐	𓍑	𓍒	𓍓	𓍔	𓍕	𓍖	𓍗	𓍘	𓍙	𓍚	𓍛	𓍜	𓍝	𓍞	𓍟
U+1336x	𓍠	𓍡	𓍢	𓍣	𓍤	𓍥	𓍦	𓍧	𓍨	𓍩	𓍪	𓍫	𓍬	𓍭	𓍮	𓍯
U+1337x	𓍰	𓍱	𓍲	𓍳	𓍴	𓍵	𓍶	𓍷	𓍸	𓍹	𓍺	𓍻	𓍼	𓍽	𓍾	𓍿
U+1338x	𓎀	𓎁	𓎂	𓎃	𓎄	𓎅	𓎆	𓎇	𓎈	𓎉	𓎊	𓎋	𓎌	𓎍	𓎎	𓎏
U+1339x	𓎐	𓎑	𓎒	𓎓	𓎔	𓎕	𓎖	𓎗	𓎘	𓎙	𓎚	𓎛	𓎜	𓎝	𓎞	𓎟
U+133Ax	𓎠	𓎡	𓎢	𓎣	𓎤	𓎥	𓎦	𓎧	𓎨	𓎩	𓎪	𓎫	𓎬	𓎭	𓎮	𓎯
U+133Bx	𓎰	𓎱	𓎲	𓎳	𓎴	𓎵	𓎶	𓎷	𓎸	𓎹	𓎺	𓎻	𓎼	𓎽	𓎾	𓎿
U+133Cx	𓏀	𓏁	𓏂	𓏃	𓏄	𓏅	𓏆	𓏇	𓏈	𓏉	𓏊	𓏋	𓏌	𓏍	𓏎	𓏏
U+133Dx	𓏐	𓏑	𓏒	𓏓	𓏔	𓏕	𓏖	𓏗	𓏘	𓏙	𓏚	𓏛	𓏜	𓏝	𓏞	𓏟
U+133Ex	𓏠	𓏡	𓏢	𓏣	𓏤	𓏥	𓏦	𓏧	𓏨	𓏩	𓏪	𓏫	𓏬	𓏭	𓏮	𓏯
U+133Fx	𓏰	𓏱	𓏲	𓏳	𓏴	𓏵	𓏶	𓏷	𓏸	𓏹	𓏺	𓏻	𓏼	𓏽	𓏾	𓏿
U+1340x	𓐀	𓐁	𓐂	𓐃	𓐄	𓐅	𓐆	𓐇	𓐈	𓐉	𓐊	𓐋	𓐌	𓐍	𓐎	𓐏
U+1341x	𓐐	𓐑	𓐒	𓐓	𓐔	𓐕	𓐖	𓐗	𓐘	𓐙	𓐚	𓐛	𓐜	𓐝	𓐞	𓐟
U+1342x	𓐠	𓐡	𓐢	𓐣	𓐤	𓐥	𓐦	𓐧	𓐨	𓐩	𓐪	𓐫	𓐬	𓐭	𓐮	𓐯
